
binfmt_flat.o:     file format elf32-tradbigmips
binfmt_flat.o
architecture: mips:3000, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000
private flags = 1001: [abi=O32] [mips1] [not 32bitmode]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003720  00000000  00000000  00000040  2**4
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         000001c0  00000000  00000000  00003760  2**4
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000df0  00000000  00000000  00003920  2**4
                  ALLOC
  3 .reginfo      00000018  00000000  00000000  00003920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA, LINK_ONCE_SAME_SIZE
  4 .pdr          000002c0  00000000  00000000  00003938  2**2
                  CONTENTS, RELOC, READONLY
  5 .mdebug.abi32 00000000  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY
  6 .debug_abbrev 00000508  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ff06  00000000  00000000  00004100  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_line   00001d0b  00000000  00000000  00014006  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .rodata       00000600  00000000  00000000  00015d20  2**4
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 10 .fixup        00000040  00000000  00000000  00016320  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 __ex_table    00000038  00000000  00000000  00016360  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 12 .text.init    00000024  00000000  00000000  00016398  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.exit    00000024  00000000  00000000  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .initcall.init 00000004  00000000  00000000  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .exitcall.exit 00000004  00000000  00000000  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .debug_frame  000002f0  00000000  00000000  000163e8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 17 .debug_pubnames 00000020  00000000  00000000  000166d8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 18 .debug_aranges 00000030  00000000  00000000  000166f8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 19 .debug_str    00008089  00000000  00000000  00016728  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      00000012  00000000  00000000  0001e7b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 binfmt_flat.c
00000000 l    d  .text	00000000 
00000000 l    d  .data	00000000 
00000000 l    d  .bss	00000000 
00000000 l    d  .mdebug.abi32	00000000 
00000000 l    d  .debug_abbrev	00000000 
00000000 l    d  .debug_info	00000000 
00000000 l    d  .debug_line	00000000 
00000000 l     O .data	00000018 flat_format
000033f4 l     F .text	00000000 load_flat_binary
000036f0 l     F .text	00000000 load_flat_library
00000000 l     F .text	00000000 flat_core_dump
00000034 l     F .text	00000000 create_flat_tables
00000000 l    d  .fixup	00000000 
00000000 l    d  __ex_table	00000000 
0000012c l     F .text	00000000 fill_inbuf
000001fc l     F .text	00000000 flush_window
00000018 l     O .data	0000004c border
00000064 l     O .data	0000003e cplens
000000a4 l     O .data	0000003e cplext
000000e4 l     O .data	0000003c cpdist
00000120 l     O .data	0000003c cpdext
0000015c l     O .data	00000022 mask_bits
00000180 l     O .data	00000004 lbits
00000184 l     O .data	00000004 dbits
00000000 l     O .bss	00000480 v.0
000002b8 l     F .text	00000000 huft_build
00000924 l     F .text	00000000 huft_free
00000964 l     F .text	00000000 inflate_codes
00000f60 l     F .text	00000000 inflate_stored
00000480 l     O .bss	00000480 l.1
00001194 l     F .text	00000000 inflate_fixed
00000900 l     O .bss	000004f0 ll.2
000013b0 l     F .text	00000000 inflate_dynamic
00001bdc l     F .text	00000000 inflate_block
00001d68 l     F .text	00000000 inflate
00000188 l     O .data	00000038 p.3
00001e2c l     F .text	00000000 makecrc
00001edc l     F .text	00000000 gunzip
00002624 l     F .text	00000000 decompress_exec
0000273c l     F .text	00000000 calc_reloc
00002920 l     F .text	00000000 load_flat_file
00000000 l    d  .text.init	00000000 
00000000 l     F .text.init	00000000 init_flat_binfmt
00000000 l    d  .text.exit	00000000 
00000000 l     F .text.exit	00000000 exit_flat_binfmt
00000000 l    d  .initcall.init	00000000 
00000000 l     O .initcall.init	00000004 __initcall_init_flat_binfmt
00000000 l    d  .exitcall.exit	00000000 
00000000 l     O .exitcall.exit	00000004 __exitcall_exit_flat_binfmt
00000000 l    d  .debug_frame	00000000 
00000000 l    d  .debug_pubnames	00000000 
00000000 l    d  .debug_aranges	00000000 
00000000 l    d  .debug_str	00000000 
00000000 l    d  .rodata	00000000 
00000000 l    d  .reginfo	00000000 
00000000 l    d  .pdr	00000000 
00000000 l    d  .comment	00000000 
00000000         *UND*	00000000 printk
00000000       O *UND*	00000000 memcpy
00000000         *UND*	00000000 memset
00000000         *UND*	00000000 kmalloc
00000000         *UND*	00000000 kfree
00000000         *UND*	00000000 send_sig
000027d8 g     F .text	00000000 old_reloc
00000000         *UND*	00000000 flush_old_exec
00000000         *UND*	00000000 setup_arg_pages
00000000         *UND*	00000000 __set_personality
00000000         *UND*	00000000 __down_write
00000000         *UND*	00000000 do_mmap_pgoff
00000000         *UND*	00000000 __up_write
00000000         *UND*	00000000 do_munmap
00000000         *UND*	00000000 ksize
00000000         *UND*	00000000 _flush_icache_range
00000000         *UND*	00000000 compute_creds
00000000         *UND*	00000000 set_binfmt
00000000         *UND*	00000000 zone_table
00000000         *UND*	00000000 register_binfmt
00000000         *UND*	00000000 unregister_binfmt


Disassembly of section .text:

00000000 <flat_core_dump>:
exit_flat_binfmt():
/home/mips/lx4180/fs/binfmt_flat.c:93
 * Currently only a stub-function.
 */

static int flat_core_dump(long signr, struct pt_regs * regs, struct file *file)
{
       0:	27bdffe8 	addiu	sp,sp,-24
flat_core_dump():
       4:	afbf0010 	sw	ra,16(sp)
exit_flat_binfmt():
/home/mips/lx4180/fs/binfmt_flat.c:970
	printk("Process %s:%d received signr %d and should have core dumped\n",
			current->comm, current->pid, (int) signr);
	return(1);
}


/*
 * create_flat_tables() parses the env- and arg-strings in new user
 * memory and creates the pointer tables from them, and puts their
 * addresses on the "stack", returning the new stack pointer value.
 */
static unsigned long create_flat_tables(
	unsigned long pp,
	struct linux_binprm * bprm)
{
	unsigned long *argv,*envp;
	unsigned long * sp;
	char * p = (char*)pp;
	int argc = bprm->argc;
	int envc = bprm->envc;
	char dummy;

	sp = (unsigned long *) ((-(unsigned long)sizeof(char *))&(unsigned long) p);

#ifdef __alpha__
/* whee.. test-programs are so much fun. */
	put_user((unsigned long) 0, --sp);
	put_user((unsigned long) 0, --sp);
	if (bprm->loader) {
		put_user((unsigned long) 0, --sp);
		put_user((unsigned long) 0x3eb, --sp);
		put_user((unsigned long) bprm->loader, --sp);
		put_user((unsigned long) 0x3ea, --sp);
	}
	put_user((unsigned long) bprm->exec, --sp);
	put_user((unsigned long) 0x3e9, --sp);
#endif

	sp -= envc+1;
	envp = sp;
	sp -= argc+1;
	argv = sp;
#if defined(__i386__) || defined(__mc68000__) || defined(__arm__)
	--sp; put_user((unsigned long) envp, sp);
	--sp; put_user((unsigned long) argv, sp);
#endif
	put_user(argc,--sp);
	current->mm->arg_start = (unsigned long) p;
	while (argc-->0) {
		put_user((unsigned long) p, argv++);
		do {
			get_user(dummy, p); p++;
		} while (dummy);
	}
	put_user((unsigned long) NULL, argv);
	current->mm->arg_end = current->mm->env_start = (unsigned long) p;
	while (envc-->0) {
		put_user((unsigned long)p, envp); envp++;
		do {
			get_user(dummy, p); p++;
		} while (dummy);
	}
	put_user((unsigned long) NULL, envp);
	current->mm->env_end = (unsigned long) p;
	return (unsigned long)sp;
}



#ifdef CONFIG_BINFMT_ZFLAT
/*
 * this is fairly harmless unless you use it.  It hasn't had a lot
 * of testing but I have run systems with every binary compressed (davidm)
 *
 * here are the zlib hacks - to replace globals with locals
 */

typedef unsigned char  uch;
typedef unsigned short ush;
typedef unsigned long  ulg;
#define INBUFSIZ 4096
#define WSIZE 0x8000    /* window size--must be a power of two, and */
                        /*  at least 32K for zip's deflate method */
struct s_zloc
{
	struct linux_binprm *bprm;
	unsigned long start_pos;
	unsigned long bytes2read;
	char *data_pointer, *out_pointer;
	uch *inbuf;
	uch *window;
	unsigned insize;  /* valid bytes in inbuf */
	unsigned inptr;   /* index of next byte to be processed in inbuf */
	unsigned outcnt;  /* bytes in output buffer */
	int exit_code;
	long bytes_out;
	int crd_infp, crd_outfp;
	ulg bb;                         /* bit buffer */
	unsigned bk;                    /* bits in bit buffer */
	ulg crc_32_tab[256];
	ulg crc; /* shift register contents */
	unsigned hufts;
};

static int fill_inbuf(struct s_zloc *zloc)
{
	int i;
	loff_t fpos;

	if(zloc->exit_code)
		return -1;
	i = (zloc->bytes2read > INBUFSIZ) ? INBUFSIZ : zloc->bytes2read;
	fpos = zloc->start_pos;
	i = zloc->bprm->file->f_op->read(zloc->bprm->file,
			(char *) zloc->data_pointer, i, &fpos);
	if (i >= (unsigned long) -4096)
		return -1;
	zloc->bytes2read -= i;
	zloc->start_pos += i;
	zloc->insize = i;
	zloc->inptr = 1;
	return zloc->inbuf[0];
}

static void flush_window(struct s_zloc *zloc)
{
	ulg c = zloc->crc;
	unsigned n;
	uch *in, ch;
	memcpy(zloc->out_pointer, zloc->window, zloc->outcnt);
	in = zloc->window;
	for(n = 0; n < zloc->outcnt; n++)
	{
		ch = *in++;
		c = zloc->crc_32_tab[((int)c ^ch) & 0xff] ^(c >> 8);
	}
	zloc->crc = c;
	zloc->out_pointer += zloc->outcnt;
	zloc->bytes_out += (ulg)zloc->outcnt;
	zloc->outcnt = 0;
}

#define inbuf (zloc->inbuf)
#define window (zloc->window)
#define insize (zloc->insize)
#define inptr (zloc->inptr)
#define outcnt (zloc->outcnt)
#define exit_code (zloc->exit_code)
#define bytes_out (zloc->bytes_out)
#define crd_infp (zloc->crd_infp)
#define crd_infp (zloc->crd_infp)
#define bb (zloc->bb)
#define bk (zloc->bk)
#define crc (zloc->crc)
#define crc_32_tab (zloc->crc_32_tab)
#define hufts (zloc->hufts)

#define get_byte()  (inptr < insize ? inbuf[inptr++] : fill_inbuf(zloc))
#define memzero(s, n)     memset ((s), 0, (n))

#define OF(args)  args
#define Assert(cond,msg)
#define Trace(x)
#define Tracev(x)
#define Tracevv(x)
#define Tracec(c,x)
#define Tracecv(c,x)

#define STATIC static

#define malloc(arg) kmalloc(arg, GFP_KERNEL)
#define free(arg) kfree(arg)

#define error(arg) printk("zflat:" arg "\n")

#include "../lib/inflate2.c"

#undef error

#undef malloc
#undef free

#undef inbuf
#undef window
#undef insize
#undef inptr
#undef outcnt
#undef exit_code
#undef bytes_out
#undef crd_infp
#undef crd_outp
#undef bb
#undef bk
#undef crc
#undef crc_32_tab

#undef get_byte
#undef memzero


static int decompress_exec(
	struct linux_binprm *bprm,
	unsigned long offset,
	char * buffer,
	long len,
	int fd)
{
	struct s_zloc *zloc;
	int res;
	zloc = kmalloc(sizeof(*zloc), GFP_KERNEL);
	if(!zloc)
	{
		return -ENOMEM;
	}
	memset(zloc, 0, sizeof(*zloc));
	zloc->bprm = bprm;
	zloc->out_pointer = buffer;
	zloc->inbuf = kmalloc(INBUFSIZ, GFP_KERNEL);
	if(!zloc->inbuf)
	{
		kfree(zloc);
		return -ENOMEM;
	}
	zloc->window = kmalloc(WSIZE, GFP_KERNEL);
	if(!zloc->window)
	{
		kfree(zloc->inbuf);
		kfree(zloc);
		return -ENOMEM;
	}
	zloc->data_pointer = zloc->inbuf;
	zloc->bytes2read = len;
	zloc->start_pos = offset;
	zloc->crc = (ulg)0xffffffffL;
	makecrc(zloc);
	res = gunzip(zloc);
	kfree(zloc->window);
	kfree(zloc->inbuf);
	kfree(zloc);
	return res ? -ENOMEM : 0;
}
#endif /* CONFIG_BINFMT_ZFLAT */


static unsigned long
calc_reloc(unsigned long r, struct lib_info *p, int curid, int internalp)
{
	unsigned long addr;
	int id;
	unsigned long start_brk;
	unsigned long start_data;
	unsigned long text_len;
	unsigned long start_code;


#ifdef CONFIG_BINFMT_SHARED_FLAT
	if (r == 0)
		id = curid;	/* Relocs of 0 are always self referring */
	else {
		id = (r >> 24) & 0xff;	/* Find ID for this reloc */
		r &= 0x00ffffff;	/* Trim ID off here */
	}
	if (id >= MAX_SHARED_LIBS) {
		printk("BINFMT_FLAT: reference 0x%x to shared library %d",
				(unsigned) r, id);
		goto failed;
	}
	if (curid != id) {
		if (internalp) {
			printk("BINFMT_FLAT: reloc address 0x%x not in same module "
					"(%d != %d)", (unsigned) r, curid, id);
			goto failed;
		} else if ( ! p->lib_list[id].loaded &&
				load_flat_shared_library(id, p) > (unsigned long) -4096) {
			printk("BINFMT_FLAT: failed to load library %d", id);
			goto failed;
		}
		/* Check versioning information (i.e. time stamps) */
		if (p->lib_list[id].build_date && p->lib_list[curid].build_date &&
				p->lib_list[curid].build_date < p->lib_list[id].build_date) {
			printk("BINFMT_FLAT: library %d is younger than %d", id, curid);
			goto failed;
		}
	}
#else
	id = 0;
#endif

	start_brk = p->lib_list[id].start_brk;
	start_data = p->lib_list[id].start_data;
	start_code = p->lib_list[id].start_code;
	text_len = p->lib_list[id].text_len;
	
#ifdef NO_MM
	r -= 0x400000;
#endif

#ifdef NO_MM
	if (r > start_brk + (32<<10)) {
#else		
	if (r > start_brk - start_data + text_len) {
#endif
		printk("BINFMT_FLAT: reloc outside program 0x%x (0 - 0x%x/0x%x)",
				(int) r,(int)(start_brk-start_code),(int)text_len);
		goto failed;
	}
	
	if (r < text_len)			/* In text segment */
		addr = r + start_code;
	else					/* In data segment */
		addr = r - text_len + start_data;
	
	/* Range checked already above so doing the range tests is redundant...*/
	return(addr);

failed:
	printk(", killing %s!\n", current->comm);
	send_sig(SIGSEGV, current, 0);

	return RELOC_FAILED;
}


void old_reloc(unsigned long rl)
{
#ifdef DEBUG
	char *segment[] = { "TEXT", "DATA", "BSS", "*UNKNOWN*" };
#endif
	flat_v2_reloc_t	r;
	unsigned long *ptr;
	
	r.value = rl;
#if defined(CONFIG_COLDFIRE)
	ptr = (unsigned long *) (current->mm->start_code + r.reloc.offset);
#else
	ptr = (unsigned long *) (current->mm->start_data + r.reloc.offset);
#endif

#ifdef DEBUG
	printk("Relocation of variable at DATASEG+%x "
		"(address %p, currently %x) into segment %s\n",
		r.reloc.offset, ptr, (int)*ptr, segment[r.reloc.type]);
#endif
	
	switch (r.reloc.type) {
	case OLD_FLAT_RELOC_TYPE_TEXT:
		*ptr += current->mm->start_code;
		break;
	case OLD_FLAT_RELOC_TYPE_DATA:
		*ptr += current->mm->start_data;
		break;
	case OLD_FLAT_RELOC_TYPE_BSS:
		*ptr += current->mm->end_data;
		break;
	default:
		printk("BINFMT_FLAT: Unknown relocation type=%x\n", r.reloc.type);
		break;
	}

#ifdef DEBUG
	printk("Relocation became %x\n", (int)*ptr);
#endif
}		


static int load_flat_file(struct linux_binprm * bprm,
		struct lib_info *libinfo, int id, unsigned long *extra_stack)
{
	struct flat_hdr * hdr;
	unsigned long textpos = 0, datapos = 0, result;
	unsigned long realdatastart = 0;
	unsigned long text_len, data_len, bss_len, stack_len, flags;
	unsigned long memp = 0; /* for finding the brk area */
	unsigned long extra, rlim;
	unsigned long *reloc = 0, *rp;
	struct inode *inode;
	int i, rev, relocs = 0;
	loff_t fpos;
	unsigned long start_code, end_code;

	DBG_FLT("BINFMT_FLAT: Loading file: %s\n", bprm->filename);

	hdr = ((struct flat_hdr *) bprm->buf);		/* exec-header */
	inode = bprm->file->f_dentry->d_inode;

	text_len  = ntohl(hdr->data_start);
	data_len  = ntohl(hdr->data_end) - ntohl(hdr->data_start);
	bss_len   = ntohl(hdr->bss_end) - ntohl(hdr->data_end);
	stack_len = ntohl(hdr->stack_size);
	if (extra_stack) {
		stack_len += *extra_stack;
		*extra_stack = stack_len;
	}
	relocs    = ntohl(hdr->reloc_count);
	flags     = ntohl(hdr->flags);
	rev       = ntohl(hdr->rev);

	if (strncmp(hdr->magic, "bFLT", 4) ||
			(rev != FLAT_VERSION && rev != OLD_FLAT_VERSION)) {
		/*
		 * because a lot of people do not manage to produce good
		 * flat binaries,  we leave this printk to help them realise
		 * the problem.  We only print the error if its * not a script file
		 */
		if (strncmp(hdr->magic, "#!", 2))
			printk("BINFMT_FLAT: bad magic/rev (0x%x, need 0x%x)\n",
					rev, (int) FLAT_VERSION);
		return -ENOEXEC;
	}
	
	/* Don't allow old format executables to use shared libraries */
	if (rev == OLD_FLAT_VERSION && id != 0) {
		printk("BINFMT_FLAT: shared libraries are not available before rev 0x%x\n",
				(int) FLAT_VERSION);
		return -ENOEXEC;
	}

	/*
	 * fix up the flags for the older format,  there were all kinds
	 * of endian hacks,  this only works for the simple cases
	 */
	if (rev == OLD_FLAT_VERSION && flags)
		flags = FLAT_FLAG_RAM;

#ifndef CONFIG_BINFMT_ZFLAT
	if (flags & (FLAT_FLAG_GZIP|FLAT_FLAG_GZDATA)) {
		printk("Support for ZFLAT executables is not enabled.\n");
		return -ENOEXEC;
	}
#endif

	/*
	 * Check initial limits. This avoids letting people circumvent
	 * size limits imposed on them by creating programs with large
	 * arrays in the data or bss.
	 */
	rlim = current->rlim[RLIMIT_DATA].rlim_cur;
	if (rlim >= RLIM_INFINITY)
		rlim = ~0;
	if (data_len + bss_len > rlim)
		return -ENOMEM;

	/* Flush all traces of the currently running executable */
	if (id == 0) {
		result = flush_old_exec(bprm);
		if (result)
			return result;

		/* do this up here so we can fail cleanly */
		result = setup_arg_pages(bprm);
		if (result < 0) {
			/* Someone check-me: is this error path enough? */ 
			send_sig(SIGKILL, current, 0); 
			return result;
		}

		/* OK, This is the point of no return */
#if !defined(__sparc__)
		set_personality(PER_LINUX);
#else
		set_personality(PER_SUNOS);
#if !defined(__sparc_v9__)
		memcpy(&current->thread.core_exec, &ex, sizeof(struct exec));
#endif
#endif
	}

	/*
	 * there are a couple of cases here,  the seperate code/data
	 * case,  and then the fully copied to RAM case which lumps
	 * it all together.
	 */
	if ((flags & (FLAT_FLAG_RAM|FLAT_FLAG_GZIP)) == 0) {
		/*
		 * this should give us a ROM ptr,  but if it doesn't we don't
		 * really care
		 */
		DBG_FLT("BINFMT_FLAT: ROM mapping of file (we hope)\n");

		down_write(&current->mm->mmap_sem);
		textpos = do_mmap(bprm->file, 0, text_len, PROT_READ|PROT_EXEC, 0, 0);
		up_write(&current->mm->mmap_sem);
		if (!textpos  || textpos >= (unsigned long) -4096) {
			if (!textpos)
				textpos = (unsigned long) -ENOMEM;
			printk("Unable to mmap process text, errno %d\n", (int)-textpos);
			return textpos;
		}

		extra = MAX(bss_len + stack_len, relocs * sizeof(unsigned long));

		down_write(&current->mm->mmap_sem);
		realdatastart = do_mmap(0, 0, data_len + extra +
				MAX_SHARED_LIBS * sizeof(unsigned long),
				PROT_READ|PROT_WRITE|PROT_EXEC, 0, 0);
		up_write(&current->mm->mmap_sem);

		if (realdatastart == 0 || realdatastart >= (unsigned long)-4096) {
			if (!realdatastart)
				realdatastart = (unsigned long) -ENOMEM;
			printk("Unable to allocate RAM for process data, errno %d\n",
					(int)-datapos);
			do_munmap(current->mm, textpos, text_len);
			return realdatastart;
		}
		datapos = realdatastart + MAX_SHARED_LIBS * sizeof(unsigned long);

		DBG_FLT("BINFMT_FLAT: Allocated data+bss+stack (%d bytes): %x\n",
				(int)(data_len + bss_len + stack_len), (int)datapos);

		fpos = ntohl(hdr->data_start);
#ifdef CONFIG_BINFMT_ZFLAT
		if (flags & FLAT_FLAG_GZDATA) {
			result = decompress_exec(bprm, fpos, (char *) datapos, 
						 data_len + (relocs * sizeof(unsigned long)), 0);
		} else
#endif
		{
			result = bprm->file->f_op->read(bprm->file, (char *) datapos,
					data_len + (relocs * sizeof(unsigned long)), &fpos);
		}
		if (result >= (unsigned long)-4096) {
			printk("Unable to read data+bss, errno %d\n", (int)-result);
			do_munmap(current->mm, textpos, text_len);
			do_munmap(current->mm, realdatastart, data_len + extra);
			return result;
		}

		reloc = (unsigned long *) (datapos+(ntohl(hdr->reloc_start)-text_len));
		memp = realdatastart;

	} else {

		/*
		 * calculate the extra space we need to map in
		 */

		extra = MAX(bss_len + stack_len, relocs * sizeof(unsigned long));

		down_write(&current->mm->mmap_sem);
		textpos = do_mmap(0, 0, text_len + data_len + extra +
					MAX_SHARED_LIBS * sizeof(unsigned long),
				PROT_READ | PROT_EXEC | PROT_WRITE, 0, 0);
		up_write(&current->mm->mmap_sem);
		if (!textpos  || textpos >= (unsigned long) -4096) {
			if (!textpos)
				textpos = (unsigned long) -ENOMEM;
			printk("Unable to allocate RAM for process text/data, errno %d\n",
					(int)-textpos);
			return textpos;
		}

		realdatastart = textpos + ntohl(hdr->data_start);
		datapos = realdatastart + MAX_SHARED_LIBS * sizeof(unsigned long);
		reloc = (unsigned long *) (textpos + ntohl(hdr->reloc_start) +
				MAX_SHARED_LIBS * sizeof(unsigned long));
		memp = textpos;

#ifdef CONFIG_BINFMT_ZFLAT
		/*
		 * load it all in and treat it like a RAM load from now on
		 */
		if (flags & FLAT_FLAG_GZIP) {
			result = decompress_exec(bprm, sizeof (struct flat_hdr),
					 (((char *) textpos) + sizeof (struct flat_hdr)),
					 (text_len + data_len + (relocs * sizeof(unsigned long))
						  - sizeof (struct flat_hdr)),
					 0);
#ifndef NO_MM
			memmove(datapos, realdatastart,
					data_len + (relocs * sizeof(unsigned long)));
#endif					
		} else if (flags & FLAT_FLAG_GZDATA) {
			fpos = 0;
			result = bprm->file->f_op->read(bprm->file,
					(char *) textpos, text_len, &fpos);
			if (result < (unsigned long) -4096)
				result = decompress_exec(bprm, text_len, (char *) datapos,
						 data_len + (relocs * sizeof(unsigned long)), 0);
		}
		else
#endif
		{
			fpos = 0;
			result = bprm->file->f_op->read(bprm->file,
					(char *) textpos, text_len, &fpos);
			if (result < (unsigned long) -4096) {
				fpos = ntohl(hdr->data_start);
				result = bprm->file->f_op->read(bprm->file, (char *) datapos,
					data_len + (relocs * sizeof(unsigned long)), &fpos);
			}
		}
		if (result >= (unsigned long)-4096) {
			printk("Unable to read code+data+bss, errno %d\n",(int)-result);
			do_munmap(current->mm, textpos, text_len + data_len + extra +
				MAX_SHARED_LIBS * sizeof(unsigned long));
			return result;
		}
	}

	DBG_FLT("Mapping is %x, Entry point is %x, data_start is %x\n",
			(int)textpos, 0x00ffffff & ntohl(hdr->entry), ntohl(hdr->data_start));

	/* The main program needs a little extra setup in the task structure */
	start_code = textpos + sizeof (struct flat_hdr);
	end_code = textpos + text_len;
	if (id == 0) {
		current->mm->start_code = start_code;
		current->mm->end_code = end_code;
		current->mm->start_data = datapos;
		current->mm->end_data = datapos + data_len;
#ifdef NO_MM
		/*
		 *	set up the brk stuff (uses any slack left in data/bss/stack allocation
		 *	We put the brk after the bss (between the bss and stack) like other
		 *	platforms.
		 */
		current->mm->start_brk = datapos + data_len + bss_len;
		current->mm->brk = (current->mm->start_brk + 3) & ~3;
		current->mm->end_brk = memp + ksize((void *) memp) - stack_len;
#else
		current->mm->mmap = NULL;
#endif
		current->mm->rss = 0;
	}
	DBG_FLT("%s %s: TEXT=%x-%x DATA=%x-%x BSS=%x-%x\n",
		id?"Lib":"Load", bprm->filename,
		(int) start_code, (int) end_code,
		(int) datapos, (int) datapos + data_len,
		(int) datapos + data_len, (int) ((datapos + data_len + bss_len) + 3) & ~3);

	text_len -= sizeof(struct flat_hdr); /* the real code len */

	/* Store the current module values into the global library structure */
	libinfo->lib_list[id].start_code = start_code;
	libinfo->lib_list[id].start_data = datapos;
#ifdef NO_MM
	libinfo->lib_list[id].start_brk = datapos + data_len + bss_len;
#endif
	libinfo->lib_list[id].text_len = text_len;
	libinfo->lib_list[id].loaded = 1;
	libinfo->lib_list[id].entry = (0x00ffffff & ntohl(hdr->entry)) + textpos;
	libinfo->lib_list[id].build_date = ntohl(hdr->build_date);
	
	/*
	 * We just load the allocations into some temporary memory to
	 * help simplify all this mumbo jumbo
	 *
	 * We've got two different sections of relocation entries.
	 * The first is the GOT which resides at the begining of the data segment
	 * and is terminated with a -1.  This one can be relocated in place.
	 * The second is the extra relocation entries tacked after the image's
	 * data segment. These require a little more processing as the entry is
	 * really an offset into the image which contains an offset into the
	 * image.
	 */
	if (flags & FLAT_FLAG_GOTPIC) {
#ifdef NO_MM
		// mips special	
		for (rp = ((unsigned long *)datapos)+2; *rp != 0xffffffff; rp++) {
#else		
		for (rp = (unsigned long *)datapos; *rp != 0xffffffff; rp++) {
#endif
			unsigned long addr;
			//printk("rp=%x *rp=%x\n", rp, *rp); //XIPOSTRACE
			if (*rp) {
				addr = calc_reloc(*rp, libinfo, id, 0);
				//printk("addr=%x\n",addr); //XIPOSTRACE
				if (addr == RELOC_FAILED)
				{
					printk("calc_reloc fail 10 id = %x\n",id);
					return -ENOEXEC;
				}
				*rp = addr;
			}
		}
	}

	/*
	 * Now run through the relocation entries.
	 * We've got to be careful here as C++ produces relocatable zero
	 * entries in the constructor and destructor tables which are then
	 * tested for being not zero (which will always occur unless we're
	 * based from address zero).  This causes an endless loop as __start
	 * is at zero.  The solution used is to not relocate zero addresses.
	 * This has the negative side effect of not allowing a global data
	 * reference to be statically initialised to _stext (I've moved
	 * __start to address 4 so that is okay).
	 */

	if (rev > OLD_FLAT_VERSION) {
		for (i=0; i < relocs; i++) {
			unsigned long addr;

			/* Get the address of the pointer to be
			   relocated (of course, the address has to be
			   relocated first).  */
			rp = (unsigned long *) calc_reloc(ntohl(reloc[i]), libinfo, id, 1);
			printk("rp = %x,*rp=%x\n",rp,*rp); // XIPOSTRACE
			if (rp == (unsigned long *)RELOC_FAILED)
			{
				printk("calc_reloc fail 2 id = %x\n",id);
				return -ENOEXEC;
			}
				
			/* Get the pointer's value.  */
			addr = get_unaligned (rp);
			printk("addr=%x\n",addr);	//XIPOSTRACE
			if (addr != 0) {
				/*
				 * Do the relocation.  PIC relocs in the data section are
				 * already in target order
				 */
				addr = calc_reloc(
						(flags & FLAT_FLAG_GOTPIC) ? addr : ntohl(addr),
						libinfo, id, 0);
				if (addr == RELOC_FAILED)
				{
					printk("calc_reloc fail 3 id = %x\n",id);
					return -ENOEXEC;
				}
				/* Write back the relocated pointer.  */
				put_unaligned (addr, rp);
			}
		}
	} else {
		for (i=0; i < relocs; i++)
			old_reloc(ntohl(reloc[i]));
	}
	
	flush_icache_range(start_code, end_code);

	/* zero the BSS,  BRK and stack areas */
	memset((void*)(datapos + data_len), 0, bss_len + 
			(memp + ksize((void *) memp) - stack_len -	/* end brk */
			libinfo->lib_list[id].start_brk) +		/* start brk */
			stack_len);
	return 0;
}


#ifdef CONFIG_BINFMT_SHARED_FLAT
/* Load a shared library into memory.  The library gets its own data
 * segment (including bss) but not argv/argc/environ.
 */
static int load_flat_shared_library(int id, struct lib_info *libs)
{
	struct linux_binprm bprm;
	int res;
	char buf[16];

	/* Create the file name */
	sprintf(buf, "/lib/lib%d.so", id);

	/* Open the file up */
	bprm.filename = buf;
	bprm.file = open_exec(bprm.filename);
	res = PTR_ERR(bprm.file);
	if (IS_ERR(bprm.file))
		return res;

	res = prepare_binprm(&bprm);

	if (res <= (unsigned long)-4096)
		res = load_flat_file(&bprm, libs, id, NULL);
	if (bprm.file) {
		allow_write_access(bprm.file);
		fput(bprm.file);
		bprm.file = NULL;
	}
	return(res);
}
#endif


/*
 * These are the functions used to load flat style executables and shared
 * libraries.  There is no binary dependent code anywhere else.
 */
static int load_flat_binary(struct linux_binprm * bprm, struct pt_regs * regs)
{
	struct lib_info libinfo;
	unsigned long p = bprm->p;
	unsigned long stack_len;
	unsigned long start_addr;
	unsigned long *sp;
	int res;
	int i, j;

	memset(&libinfo, 0, sizeof(libinfo));
	/*
	 * We have to add the size of our arguments to our stack size
	 * otherwise it's too easy for users to create stack overflows
	 * by passing in a huge argument list.  And yes,  we have to be
	 * pedantic and include space for the argv/envp array as it may have
	 * a lot of entries.
	 */
#define TOP_OF_ARGS (PAGE_SIZE * MAX_ARG_PAGES - sizeof(void *))
	stack_len = TOP_OF_ARGS - bprm->p;             /* the strings */
	stack_len += (bprm->argc + 1) * sizeof(char *); /* the argv array */
	stack_len += (bprm->envc + 1) * sizeof(char *); /* the envp array */

	
	res = load_flat_file(bprm, &libinfo, 0, &stack_len);
	if (res > (unsigned long)-4096)
		return res;
	
	/* Update data segment pointers for all libraries */
	for (i=0; i<MAX_SHARED_LIBS; i++)
		if (libinfo.lib_list[i].loaded)
			for (j=0; j<MAX_SHARED_LIBS; j++)
				(-(j+1))[(unsigned long *)(libinfo.lib_list[i].start_data)] =
					(libinfo.lib_list[j].loaded)?
						libinfo.lib_list[j].start_data:UNLOADED_LIB;

	compute_creds(bprm);
 	current->flags &= ~PF_FORKNOEXEC;

	set_binfmt(&flat_format);

	p = ((current->mm->end_brk + stack_len + 3) & ~3) - 4;
	DBG_FLT("p=%x\n", (int)p);

	/* copy the arg pages onto the stack, this could be more efficient :-) */
	for (i = TOP_OF_ARGS - 1; i >= bprm->p; i--)
		* (char *) --p =
			((char *) page_address(bprm->page[i/PAGE_SIZE]))[i % PAGE_SIZE];

	sp = (unsigned long *) create_flat_tables(p, bprm);
	
	/* Fake some return addresses to ensure the call chain will
	 * initialise library in order for us.  We are required to call
	 * lib 1 first, then 2, ... and finally the main program (id 0).
	 */
	start_addr = libinfo.lib_list[0].entry;
#ifdef NO_MM
	start_addr -= 0x400000;
#endif

#ifdef CONFIG_BINFMT_SHARED_FLAT
	for (i = MAX_SHARED_LIBS-1; i>0; i--) {
		if (libinfo.lib_list[i].loaded) {
			/* Push previos first to call address */
			--sp;	put_user(start_addr, sp);
			start_addr = libinfo.lib_list[i].entry;
		}
	}
#endif
	
	/* Stash our initial stack pointer into the mm structure */
	current->mm->start_stack = (unsigned long )sp;

	
	DBG_FLT("start_thread(regs=0x%x, entry=0x%x, start_stack=0x%x)\n",
		(int)regs, (int)start_addr, (int)current->mm->start_stack);
	
	start_thread(regs,
		     start_addr,
		     current->mm->start_stack);

	if (current->ptrace & PT_PTRACED)
		send_sig(SIGTRAP, current, 0);


	return 0;
}


static int load_flat_library(struct file *file)
{
	printk("load_lib\n");
	return(-ENOEXEC);
}

static int __init init_flat_binfmt(void)
{
	return register_binfmt(&flat_format);
       8:	00803821 	move	a3,a0
/home/mips/lx4180/fs/binfmt_flat.c:94
       c:	3c040000 	lui	a0,0x0
			c: R_MIPS_HI16	.rodata
      10:	24840000 	addiu	a0,a0,0
			10: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/binfmt_flat.c:971
}
      14:	8f86007c 	lw	a2,124(gp)
      18:	0c000000 	jal	0 <flat_core_dump>
			18: R_MIPS_26	printk
      1c:	2785023e 	addiu	a1,gp,574
/home/mips/lx4180/fs/binfmt_flat.c:97
      20:	24020001 	li	v0,1
flat_core_dump():
      24:	8fbf0010 	lw	ra,16(sp)
/home/mips/lx4180/fs/binfmt_flat.c:971
      28:	00000000 	nop
      2c:	03e00008 	jr	ra
      30:	27bd0018 	addiu	sp,sp,24

00000034 <create_flat_tables>:
create_flat_tables():
/home/mips/lx4180/fs/binfmt_flat.c:108
      34:	27bdfff0 	addiu	sp,sp,-16
/home/mips/lx4180/fs/binfmt_flat.c:112
      38:	8ca60120 	lw	a2,288(a1)
/home/mips/lx4180/fs/binfmt_flat.c:113
      3c:	8ca70124 	lw	a3,292(a1)
/home/mips/lx4180/fs/binfmt_flat.c:116
      40:	2402fffc 	li	v0,-4
      44:	00824824 	and	t1,a0,v0
/home/mips/lx4180/fs/binfmt_flat.c:132
      48:	00071080 	sll	v0,a3,0x2
      4c:	01224823 	subu	t1,t1,v0
      50:	2529fffc 	addiu	t1,t1,-4
/home/mips/lx4180/fs/binfmt_flat.c:133
      54:	01204021 	move	t0,t1
/home/mips/lx4180/fs/binfmt_flat.c:134
      58:	00c01821 	move	v1,a2
      5c:	00061080 	sll	v0,a2,0x2
      60:	01224823 	subu	t1,t1,v0
      64:	2529fffc 	addiu	t1,t1,-4
/home/mips/lx4180/fs/binfmt_flat.c:135
      68:	01202821 	move	a1,t1
/home/mips/lx4180/fs/binfmt_flat.c:140
      6c:	2529fffc 	addiu	t1,t1,-4
      70:	ad260000 	sw	a2,0(t1)
      74:	00001021 	move	v0,zero
/home/mips/lx4180/fs/binfmt_flat.c:141
      78:	8f82002c 	lw	v0,44(gp)
      7c:	00000000 	nop
      80:	ac440040 	sw	a0,64(v0)
/home/mips/lx4180/fs/binfmt_flat.c:142
      84:	1860000d 	blez	v1,bc <create_flat_tables+0x88>
      88:	24c6ffff 	addiu	a2,a2,-1
/home/mips/lx4180/fs/binfmt_flat.c:143
      8c:	00a01021 	move	v0,a1
      90:	24a50004 	addiu	a1,a1,4
      94:	ac440000 	sw	a0,0(v0)
      98:	00001021 	move	v0,zero
/home/mips/lx4180/fs/binfmt_flat.c:145
      9c:	80820000 	lb	v0,0(a0)
      a0:	00001821 	move	v1,zero
      a4:	00021600 	sll	v0,v0,0x18
/home/mips/lx4180/fs/binfmt_flat.c:146
      a8:	1440fffc 	bnez	v0,9c <create_flat_tables+0x68>
      ac:	24840001 	addiu	a0,a0,1
      b0:	00c01021 	move	v0,a2
      b4:	1c40fff5 	bgtz	v0,8c <create_flat_tables+0x58>
      b8:	24c6ffff 	addiu	a2,a2,-1
/home/mips/lx4180/fs/binfmt_flat.c:148
      bc:	aca00000 	sw	zero,0(a1)
      c0:	00001021 	move	v0,zero
/home/mips/lx4180/fs/binfmt_flat.c:149
      c4:	8f83002c 	lw	v1,44(gp)
      c8:	00000000 	nop
      cc:	ac640048 	sw	a0,72(v1)
      d0:	ac640044 	sw	a0,68(v1)
/home/mips/lx4180/fs/binfmt_flat.c:150
      d4:	00e01021 	move	v0,a3
      d8:	1840000c 	blez	v0,10c <create_flat_tables+0xd8>
      dc:	24e7ffff 	addiu	a3,a3,-1
/home/mips/lx4180/fs/binfmt_flat.c:151
      e0:	ad040000 	sw	a0,0(t0)
      e4:	00001021 	move	v0,zero
      e8:	25080004 	addiu	t0,t0,4
/home/mips/lx4180/fs/binfmt_flat.c:153
      ec:	80820000 	lb	v0,0(a0)
      f0:	00001821 	move	v1,zero
      f4:	00021600 	sll	v0,v0,0x18
/home/mips/lx4180/fs/binfmt_flat.c:154
      f8:	1440fffc 	bnez	v0,ec <create_flat_tables+0xb8>
      fc:	24840001 	addiu	a0,a0,1
     100:	00e01021 	move	v0,a3
     104:	1c40fff6 	bgtz	v0,e0 <create_flat_tables+0xac>
     108:	24e7ffff 	addiu	a3,a3,-1
/home/mips/lx4180/fs/binfmt_flat.c:156
     10c:	ad000000 	sw	zero,0(t0)
     110:	00001021 	move	v0,zero
/home/mips/lx4180/fs/binfmt_flat.c:157
     114:	8f82002c 	lw	v0,44(gp)
     118:	00000000 	nop
     11c:	ac44004c 	sw	a0,76(v0)
/home/mips/lx4180/fs/binfmt_flat.c:159
     120:	01201021 	move	v0,t1
     124:	03e00008 	jr	ra
     128:	27bd0010 	addiu	sp,sp,16

0000012c <fill_inbuf>:
fill_inbuf():
/home/mips/lx4180/fs/binfmt_flat.c:199
     12c:	27bdffe0 	addiu	sp,sp,-32
     130:	afbf001c 	sw	ra,28(sp)
     134:	afb00018 	sw	s0,24(sp)
     138:	00808021 	move	s0,a0
/home/mips/lx4180/fs/binfmt_flat.c:203
     13c:	8c820028 	lw	v0,40(a0)
     140:	00000000 	nop
     144:	14400028 	bnez	v0,1e8 <fill_inbuf+0xbc>
     148:	2404ffff 	li	a0,-1
/home/mips/lx4180/fs/binfmt_flat.c:205
     14c:	8e060008 	lw	a2,8(s0)
     150:	00000000 	nop
     154:	2cc21001 	sltiu	v0,a2,4097
     158:	14400002 	bnez	v0,164 <fill_inbuf+0x38>
     15c:	00000000 	nop
     160:	24061000 	li	a2,4096
/home/mips/lx4180/fs/binfmt_flat.c:206
     164:	8e030004 	lw	v1,4(s0)
     168:	00001021 	move	v0,zero
     16c:	afa20010 	sw	v0,16(sp)
     170:	afa30014 	sw	v1,20(sp)
/home/mips/lx4180/fs/binfmt_flat.c:207
     174:	8e020000 	lw	v0,0(s0)
     178:	00000000 	nop
     17c:	8c440108 	lw	a0,264(v0)
     180:	00000000 	nop
     184:	8c820010 	lw	v0,16(a0)
     188:	00000000 	nop
     18c:	8c420008 	lw	v0,8(v0)
     190:	8e05000c 	lw	a1,12(s0)
     194:	0040f809 	jalr	v0
     198:	27a70010 	addiu	a3,sp,16
     19c:	00403021 	move	a2,v0
/home/mips/lx4180/fs/binfmt_flat.c:209
     1a0:	2c42f000 	sltiu	v0,v0,-4096
     1a4:	10400010 	beqz	v0,1e8 <fill_inbuf+0xbc>
     1a8:	2404ffff 	li	a0,-1
/home/mips/lx4180/fs/binfmt_flat.c:211
     1ac:	8e020008 	lw	v0,8(s0)
     1b0:	00000000 	nop
     1b4:	00461023 	subu	v0,v0,a2
     1b8:	ae020008 	sw	v0,8(s0)
/home/mips/lx4180/fs/binfmt_flat.c:212
     1bc:	8e020004 	lw	v0,4(s0)
     1c0:	00000000 	nop
     1c4:	00c21021 	addu	v0,a2,v0
     1c8:	ae020004 	sw	v0,4(s0)
/home/mips/lx4180/fs/binfmt_flat.c:213
     1cc:	ae06001c 	sw	a2,28(s0)
/home/mips/lx4180/fs/binfmt_flat.c:214
     1d0:	24020001 	li	v0,1
     1d4:	ae020020 	sw	v0,32(s0)
/home/mips/lx4180/fs/binfmt_flat.c:215
     1d8:	8e020014 	lw	v0,20(s0)
     1dc:	00000000 	nop
     1e0:	90440000 	lbu	a0,0(v0)
     1e4:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:216
     1e8:	00801021 	move	v0,a0
     1ec:	8fbf001c 	lw	ra,28(sp)
     1f0:	8fb00018 	lw	s0,24(sp)
     1f4:	03e00008 	jr	ra
     1f8:	27bd0020 	addiu	sp,sp,32

000001fc <flush_window>:
flush_window():
/home/mips/lx4180/fs/binfmt_flat.c:219
     1fc:	27bdffe0 	addiu	sp,sp,-32
     200:	afbf0018 	sw	ra,24(sp)
     204:	afb10014 	sw	s1,20(sp)
     208:	afb00010 	sw	s0,16(sp)
     20c:	00808821 	move	s1,a0
/home/mips/lx4180/fs/binfmt_flat.c:220
     210:	8c900440 	lw	s0,1088(a0)
/home/mips/lx4180/fs/binfmt_flat.c:223
     214:	8c840010 	lw	a0,16(a0)
     218:	8e250018 	lw	a1,24(s1)
     21c:	8e260024 	lw	a2,36(s1)
     220:	0c000000 	jal	0 <flat_core_dump>
			220: R_MIPS_26	memcpy
     224:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:224
     228:	8e240018 	lw	a0,24(s1)
/home/mips/lx4180/fs/binfmt_flat.c:225
     22c:	8e220024 	lw	v0,36(s1)
     230:	00000000 	nop
     234:	00403021 	move	a2,v0
     238:	1040000f 	beqz	v0,278 <flush_window+0x7c>
     23c:	00002821 	move	a1,zero
/home/mips/lx4180/fs/binfmt_flat.c:227
     240:	90820000 	lbu	v0,0(a0)
     244:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:228
     248:	02021026 	xor	v0,s0,v0
     24c:	304200ff 	andi	v0,v0,0xff
     250:	00021080 	sll	v0,v0,0x2
     254:	00511021 	addu	v0,v0,s1
     258:	00101a02 	srl	v1,s0,0x8
     25c:	8c420040 	lw	v0,64(v0)
     260:	00000000 	nop
     264:	00628026 	xor	s0,v1,v0
/home/mips/lx4180/fs/binfmt_flat.c:225
     268:	24a50001 	addiu	a1,a1,1
     26c:	00a6102b 	sltu	v0,a1,a2
     270:	1440fff3 	bnez	v0,240 <flush_window+0x44>
     274:	24840001 	addiu	a0,a0,1
/home/mips/lx4180/fs/binfmt_flat.c:230
     278:	ae300440 	sw	s0,1088(s1)
/home/mips/lx4180/fs/binfmt_flat.c:231
     27c:	8e220010 	lw	v0,16(s1)
     280:	8e230024 	lw	v1,36(s1)
     284:	00000000 	nop
     288:	00431021 	addu	v0,v0,v1
     28c:	ae220010 	sw	v0,16(s1)
/home/mips/lx4180/fs/binfmt_flat.c:232
     290:	8e22002c 	lw	v0,44(s1)
     294:	00000000 	nop
     298:	00431021 	addu	v0,v0,v1
     29c:	ae22002c 	sw	v0,44(s1)
/home/mips/lx4180/fs/binfmt_flat.c:233
     2a0:	ae200024 	sw	zero,36(s1)
/home/mips/lx4180/fs/binfmt_flat.c:234
     2a4:	8fbf0018 	lw	ra,24(sp)
     2a8:	8fb10014 	lw	s1,20(sp)
     2ac:	8fb00010 	lw	s0,16(sp)
     2b0:	03e00008 	jr	ra
     2b4:	27bd0020 	addiu	sp,sp,32

000002b8 <huft_build>:
huft_build():
/home/mips/lx4180/fs/../lib/inflate2.c:276
   tables to decode that set of codes.  Return zero on success, one if
   the given code set is incomplete (the tables are still built in this
   case), two if the input is invalid (all zero length codes or an
   oversubscribed set of lengths), and three if not enough memory. */
{
     2b8:	27bdfee0 	addiu	sp,sp,-288
     2bc:	afbf011c 	sw	ra,284(sp)
     2c0:	afbe0118 	sw	s8,280(sp)
     2c4:	afb70114 	sw	s7,276(sp)
     2c8:	afb60110 	sw	s6,272(sp)
     2cc:	afb5010c 	sw	s5,268(sp)
     2d0:	afb40108 	sw	s4,264(sp)
     2d4:	afb30104 	sw	s3,260(sp)
     2d8:	afb20100 	sw	s2,256(sp)
     2dc:	afb100fc 	sw	s1,252(sp)
     2e0:	afb000f8 	sw	s0,248(sp)
     2e4:	afa40120 	sw	a0,288(sp)
     2e8:	00a0a021 	move	s4,a1
     2ec:	afa60128 	sw	a2,296(sp)
     2f0:	afa7012c 	sw	a3,300(sp)
     2f4:	8fb3013c 	lw	s3,316(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:300
  unsigned a;                   /* counter for codes of length k */
  unsigned c[BMAX+1];           /* bit length count table */
  unsigned f;                   /* i repeats in table every f entries */
  int g;                        /* maximum code length */
  int h;                        /* table level */
  register unsigned i;          /* counter, current code */
  register unsigned j;          /* counter */
  register int k;               /* number of bits in current code */
  int l;                        /* bits per table (returned in m) */
  register unsigned *p;         /* pointer into c[], b[], or v[] */
  register struct huft *q;      /* points to current table */
  struct huft r;                /* table entry for structure assignment */
  struct huft *u[BMAX];         /* table stack */
  static unsigned v[N_MAX];     /* values in order of bit length */
  register int w;               /* bits before this table == (l * h) */
  unsigned x[BMAX+1];           /* bit offsets, then code stack */
  unsigned *xp;                 /* pointer into x */
  int y;                        /* number of dummy codes added */
  unsigned z;                   /* number of entries in current table */

DEBG("huft1 ");

  /* Generate counts for each bit length */
  memzero(c, sizeof(c));
     2f8:	27a40010 	addiu	a0,sp,16
     2fc:	00002821 	move	a1,zero
     300:	0c000000 	jal	0 <flat_core_dump>
			300: R_MIPS_26	memset
     304:	24060044 	li	a2,68
/home/mips/lx4180/fs/../lib/inflate2.c:301
  p = b;  i = n;
     308:	02809021 	move	s2,s4
     30c:	8fb10128 	lw	s1,296(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:302
  do {
     310:	27a40010 	addiu	a0,sp,16
/home/mips/lx4180/fs/../lib/inflate2.c:305
    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
	    n-i, *p));
    c[*p]++;                    /* assume all entries <= BMAX */
     314:	8e430000 	lw	v1,0(s2)
     318:	00000000 	nop
     31c:	00031880 	sll	v1,v1,0x2
     320:	00641821 	addu	v1,v1,a0
     324:	8c620000 	lw	v0,0(v1)
     328:	00000000 	nop
     32c:	24420001 	addiu	v0,v0,1
     330:	ac620000 	sw	v0,0(v1)
/home/mips/lx4180/fs/../lib/inflate2.c:307
    p++;                      /* Can't combine with above line (Solaris bug) */
  } while (--i);
     334:	2631ffff 	addiu	s1,s1,-1
     338:	1620fff6 	bnez	s1,314 <huft_build+0x5c>
     33c:	26520004 	addiu	s2,s2,4
/home/mips/lx4180/fs/../lib/inflate2.c:308
  if (c[0] == n)                /* null input--all zero length codes */
     340:	8fa20010 	lw	v0,16(sp)
     344:	8fa30128 	lw	v1,296(sp)
     348:	00000000 	nop
     34c:	14430007 	bne	v0,v1,36c <huft_build+0xb4>
     350:	24100001 	li	s0,1
/home/mips/lx4180/fs/../lib/inflate2.c:310
  {
    *t = (struct huft *)NULL;
     354:	8fa40138 	lw	a0,312(sp)
     358:	00000000 	nop
     35c:	ac800000 	sw	zero,0(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:311
    *m = 0;
     360:	ae600000 	sw	zero,0(s3)
/home/mips/lx4180/fs/../lib/inflate2.c:312
    return 0;
     364:	0800023d 	j	8f4 <huft_build+0x63c>
			364: R_MIPS_26	.text
     368:	00001021 	move	v0,zero
/home/mips/lx4180/fs/../lib/inflate2.c:318
  }

DEBG("huft2 ");

  /* Find minimum and maximum length, bound *m by those */
  l = *m;
     36c:	8e760000 	lw	s6,0(s3)
/home/mips/lx4180/fs/../lib/inflate2.c:319
  for (j = 1; j <= BMAX; j++)
     370:	27a30010 	addiu	v1,sp,16
/home/mips/lx4180/fs/../lib/inflate2.c:320
    if (c[j])
     374:	00101080 	sll	v0,s0,0x2
     378:	00431021 	addu	v0,v0,v1
     37c:	8c420000 	lw	v0,0(v0)
     380:	00000000 	nop
     384:	14400006 	bnez	v0,3a0 <huft_build+0xe8>
     388:	02d0102b 	sltu	v0,s6,s0
/home/mips/lx4180/fs/../lib/inflate2.c:319
     38c:	26100001 	addiu	s0,s0,1
     390:	2e020011 	sltiu	v0,s0,17
     394:	1440fff8 	bnez	v0,378 <huft_build+0xc0>
     398:	00101080 	sll	v0,s0,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:323
      break;
  k = j;                        /* minimum code length */
  if ((unsigned)l < j)
     39c:	02d0102b 	sltu	v0,s6,s0
     3a0:	10400002 	beqz	v0,3ac <huft_build+0xf4>
     3a4:	0200f021 	move	s8,s0
/home/mips/lx4180/fs/../lib/inflate2.c:324
    l = j;
     3a8:	0200b021 	move	s6,s0
/home/mips/lx4180/fs/../lib/inflate2.c:325
  for (i = BMAX; i; i--)
     3ac:	24110010 	li	s1,16
     3b0:	27a30010 	addiu	v1,sp,16
/home/mips/lx4180/fs/../lib/inflate2.c:326
    if (c[i])
     3b4:	00111080 	sll	v0,s1,0x2
     3b8:	00431021 	addu	v0,v0,v1
     3bc:	8c420000 	lw	v0,0(v0)
     3c0:	00000000 	nop
     3c4:	14400005 	bnez	v0,3dc <huft_build+0x124>
     3c8:	0236102b 	sltu	v0,s1,s6
/home/mips/lx4180/fs/../lib/inflate2.c:325
     3cc:	2631ffff 	addiu	s1,s1,-1
     3d0:	1620fff9 	bnez	s1,3b8 <huft_build+0x100>
     3d4:	00111080 	sll	v0,s1,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:329
      break;
  g = i;                        /* maximum code length */
  if ((unsigned)l > i)
     3d8:	0236102b 	sltu	v0,s1,s6
     3dc:	10400002 	beqz	v0,3e8 <huft_build+0x130>
     3e0:	afb100e8 	sw	s1,232(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:330
    l = i;
     3e4:	0220b021 	move	s6,s1
/home/mips/lx4180/fs/../lib/inflate2.c:331
  *m = l;
     3e8:	ae760000 	sw	s6,0(s3)
/home/mips/lx4180/fs/../lib/inflate2.c:336

DEBG("huft3 ");

  /* Adjust last length count to fill out codes, if needed */
  for (y = 1 << j; j < i; j++, y <<= 1)
     3ec:	24020001 	li	v0,1
     3f0:	02021004 	sllv	v0,v0,s0
     3f4:	afa200ec 	sw	v0,236(sp)
     3f8:	0211102b 	sltu	v0,s0,s1
     3fc:	1040000e 	beqz	v0,438 <huft_build+0x180>
     400:	27a30010 	addiu	v1,sp,16
/home/mips/lx4180/fs/../lib/inflate2.c:337
    if ((y -= c[j]) < 0)
     404:	00101080 	sll	v0,s0,0x2
     408:	00431021 	addu	v0,v0,v1
     40c:	8c420000 	lw	v0,0(v0)
     410:	8fa400ec 	lw	a0,236(sp)
     414:	00000000 	nop
     418:	00822023 	subu	a0,a0,v0
     41c:	04800011 	bltz	a0,464 <huft_build+0x1ac>
     420:	afa400ec 	sw	a0,236(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:336
     424:	26100001 	addiu	s0,s0,1
     428:	00042040 	sll	a0,a0,0x1
     42c:	0211102b 	sltu	v0,s0,s1
     430:	1440fff4 	bnez	v0,404 <huft_build+0x14c>
     434:	afa400ec 	sw	a0,236(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:339
      return 2;                 /* bad input: more codes than bits */
  if ((y -= c[i]) < 0)
     438:	00111080 	sll	v0,s1,0x2
     43c:	03a21021 	addu	v0,sp,v0
     440:	8c420010 	lw	v0,16(v0)
     444:	8fa300ec 	lw	v1,236(sp)
     448:	00000000 	nop
     44c:	00621823 	subu	v1,v1,v0
     450:	afa300ec 	sw	v1,236(sp)
     454:	04600127 	bltz	v1,8f4 <huft_build+0x63c>
     458:	24020002 	li	v0,2
     45c:	0800011b 	j	46c <huft_build+0x1b4>
			45c: R_MIPS_26	.text
     460:	00111080 	sll	v0,s1,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:338
     464:	0800023d 	j	8f4 <huft_build+0x63c>
			464: R_MIPS_26	.text
     468:	24020002 	li	v0,2
/home/mips/lx4180/fs/../lib/inflate2.c:341
    return 2;
  c[i] += y;
     46c:	27a30010 	addiu	v1,sp,16
     470:	00431021 	addu	v0,v0,v1
     474:	8c430000 	lw	v1,0(v0)
     478:	8fa400ec 	lw	a0,236(sp)
     47c:	00000000 	nop
     480:	00831821 	addu	v1,a0,v1
     484:	ac430000 	sw	v1,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:346

DEBG("huft4 ");

  /* Generate starting offsets into the value table for each length */
  x[1] = j = 0;
     488:	00008021 	move	s0,zero
     48c:	afa000a4 	sw	zero,164(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:347
  p = c + 1;  xp = x + 2;
     490:	27b20014 	addiu	s2,sp,20
/home/mips/lx4180/fs/../lib/inflate2.c:348
  while (--i) {                 /* note that i == g from above */
     494:	2631ffff 	addiu	s1,s1,-1
     498:	12200009 	beqz	s1,4c0 <huft_build+0x208>
     49c:	27a500a8 	addiu	a1,sp,168
/home/mips/lx4180/fs/../lib/inflate2.c:349
    *xp++ = (j += *p++);
     4a0:	8e420000 	lw	v0,0(s2)
     4a4:	00000000 	nop
     4a8:	02028021 	addu	s0,s0,v0
     4ac:	acb00000 	sw	s0,0(a1)
     4b0:	26520004 	addiu	s2,s2,4
     4b4:	2631ffff 	addiu	s1,s1,-1
     4b8:	1620fff9 	bnez	s1,4a0 <huft_build+0x1e8>
     4bc:	24a50004 	addiu	a1,a1,4
/home/mips/lx4180/fs/../lib/inflate2.c:355
  }

DEBG("huft5 ");

  /* Make a table of values in order of bit lengths */
  p = b;  i = 0;
     4c0:	02809021 	move	s2,s4
     4c4:	00008821 	move	s1,zero
/home/mips/lx4180/fs/../lib/inflate2.c:356
  do {
     4c8:	27a60010 	addiu	a2,sp,16
     4cc:	3c050000 	lui	a1,0x0
			4cc: R_MIPS_HI16	.bss
     4d0:	24a50000 	addiu	a1,a1,0
			4d0: R_MIPS_LO16	.bss
/home/mips/lx4180/fs/../lib/inflate2.c:357
    if ((j = *p++) != 0)
     4d4:	8e500000 	lw	s0,0(s2)
     4d8:	00000000 	nop
     4dc:	1200000a 	beqz	s0,508 <huft_build+0x250>
     4e0:	26520004 	addiu	s2,s2,4
/home/mips/lx4180/fs/../lib/inflate2.c:358
      v[x[j]++] = i;
     4e4:	00102080 	sll	a0,s0,0x2
     4e8:	00862021 	addu	a0,a0,a2
     4ec:	8c830090 	lw	v1,144(a0)
     4f0:	00000000 	nop
     4f4:	00031080 	sll	v0,v1,0x2
     4f8:	00451021 	addu	v0,v0,a1
     4fc:	ac510000 	sw	s1,0(v0)
     500:	24630001 	addiu	v1,v1,1
     504:	ac830090 	sw	v1,144(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:359
  } while (++i < n);
     508:	26310001 	addiu	s1,s1,1
     50c:	8fa30128 	lw	v1,296(sp)
     510:	00000000 	nop
     514:	0223102b 	sltu	v0,s1,v1
     518:	1440ffee 	bnez	v0,4d4 <huft_build+0x21c>
     51c:	2415ffff 	li	s5,-1
/home/mips/lx4180/fs/../lib/inflate2.c:364

DEBG("h6 ");

  /* Generate the Huffman codes and for each, make the table entries */
  x[0] = i = 0;                 /* first Huffman code is zero */
     520:	00008821 	move	s1,zero
     524:	afa000a0 	sw	zero,160(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:365
  p = v;                        /* grab values in bit order */
     528:	3c120000 	lui	s2,0x0
			528: R_MIPS_HI16	.bss
     52c:	26520000 	addiu	s2,s2,0
			52c: R_MIPS_LO16	.bss
/home/mips/lx4180/fs/../lib/inflate2.c:367
  h = -1;                       /* no tables yet--level -1 */
  w = -l;                       /* bits decoded == (l * h) */
     530:	00169823 	negu	s3,s6
/home/mips/lx4180/fs/../lib/inflate2.c:368
  u[0] = (struct huft *)NULL;   /* just to keep compilers happy */
     534:	afa00060 	sw	zero,96(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:369
  q = (struct huft *)NULL;      /* ditto */
     538:	00003021 	move	a2,zero
/home/mips/lx4180/fs/../lib/inflate2.c:374
  z = 0;                        /* ditto */
DEBG("h6a ");

  /* go through the bit lengths (k already is bits in shortest code) */
  for (; k <= g; k++)
     53c:	8fa400e8 	lw	a0,232(sp)
     540:	00000000 	nop
     544:	009e102a 	slt	v0,a0,s8
     548:	144000df 	bnez	v0,8c8 <huft_build+0x610>
     54c:	0000a021 	move	s4,zero
/home/mips/lx4180/fs/../lib/inflate2.c:377
  {
DEBG("h6b ");
    a = c[k];
     550:	001e1080 	sll	v0,s8,0x2
     554:	03a21021 	addu	v0,sp,v0
     558:	8c570010 	lw	s7,16(v0)
     55c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:378
    while (a--)
     560:	26f7ffff 	addiu	s7,s7,-1
     564:	2402ffff 	li	v0,-1
     568:	12e200d1 	beq	s7,v0,8b0 <huft_build+0x5f8>
     56c:	00000000 	nop
     570:	8fa30128 	lw	v1,296(sp)
     574:	00000000 	nop
     578:	00031080 	sll	v0,v1,0x2
     57c:	3c010000 	lui	at,0x0
			57c: R_MIPS_HI16	.bss
     580:	24210000 	addiu	at,at,0
			580: R_MIPS_LO16	.bss
     584:	00221021 	addu	v0,at,v0
     588:	afa200f4 	sw	v0,244(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:383
    {
DEBG("h6b1 ");
      /* here i is the Huffman code of length k bits for value *p */
      /* make tables up to required level */
      while (k > w + l)
     58c:	02761021 	addu	v0,s3,s6
     590:	00401821 	move	v1,v0
     594:	005e102a 	slt	v0,v0,s8
     598:	1040005f 	beqz	v0,718 <huft_build+0x460>
     59c:	001e2080 	sll	a0,s8,0x2
     5a0:	afa400f0 	sw	a0,240(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:386
      {
DEBG1("1 ");
        h++;
     5a4:	26b50001 	addiu	s5,s5,1
/home/mips/lx4180/fs/../lib/inflate2.c:387
        w += l;                 /* previous table always l bits */
     5a8:	00609821 	move	s3,v1
/home/mips/lx4180/fs/../lib/inflate2.c:390

        /* compute minimum size table less than or equal to l bits */
        z = (z = g - w) > (unsigned)l ? l : z;  /* upper limit on table size */
     5ac:	8fa200e8 	lw	v0,232(sp)
     5b0:	00000000 	nop
     5b4:	0043a023 	subu	s4,v0,v1
     5b8:	02d4102b 	sltu	v0,s6,s4
     5bc:	14400002 	bnez	v0,5c8 <huft_build+0x310>
     5c0:	02c01821 	move	v1,s6
     5c4:	02801821 	move	v1,s4
/home/mips/lx4180/fs/../lib/inflate2.c:391
        if ((f = 1 << (j = k - w)) > a + 1)     /* try a k-w bit table */
     5c8:	03d38023 	subu	s0,s8,s3
     5cc:	24020001 	li	v0,1
     5d0:	02022004 	sllv	a0,v0,s0
     5d4:	26e20001 	addiu	v0,s7,1
     5d8:	0044102b 	sltu	v0,v0,a0
     5dc:	10400016 	beqz	v0,638 <huft_build+0x380>
     5e0:	0060a021 	move	s4,v1
/home/mips/lx4180/fs/../lib/inflate2.c:394
        {                       /* too few codes for k-w bit table */
DEBG1("2 ");
          f -= a + 1;           /* deduct codes from patterns left */
     5e4:	00971023 	subu	v0,a0,s7
     5e8:	2444ffff 	addiu	a0,v0,-1
/home/mips/lx4180/fs/../lib/inflate2.c:395
          xp = c + k;
     5ec:	27a20010 	addiu	v0,sp,16
     5f0:	8fa300f0 	lw	v1,240(sp)
     5f4:	00000000 	nop
     5f8:	00432821 	addu	a1,v0,v1
/home/mips/lx4180/fs/../lib/inflate2.c:396
          while (++j < z)       /* try smaller tables up to z bits */
     5fc:	26100001 	addiu	s0,s0,1
     600:	0214102b 	sltu	v0,s0,s4
     604:	1040000d 	beqz	v0,63c <huft_build+0x384>
     608:	24020001 	li	v0,1
/home/mips/lx4180/fs/../lib/inflate2.c:398
          {
            if ((f <<= 1) <= *++xp)
     60c:	00042040 	sll	a0,a0,0x1
     610:	24a50004 	addiu	a1,a1,4
     614:	8ca30000 	lw	v1,0(a1)
     618:	00000000 	nop
     61c:	0064102b 	sltu	v0,v1,a0
     620:	10400006 	beqz	v0,63c <huft_build+0x384>
     624:	24020001 	li	v0,1
/home/mips/lx4180/fs/../lib/inflate2.c:400
              break;            /* enough codes to use up j bits */
            f -= *xp;           /* else deduct codes from patterns */
     628:	26100001 	addiu	s0,s0,1
     62c:	0214102b 	sltu	v0,s0,s4
     630:	1440fff6 	bnez	v0,60c <huft_build+0x354>
     634:	00832023 	subu	a0,a0,v1
/home/mips/lx4180/fs/../lib/inflate2.c:404
          }
        }
DEBG1("3 ");
        z = 1 << j;             /* table entries for j-bit table */
     638:	24020001 	li	v0,1
     63c:	0202a004 	sllv	s4,v0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:407

        /* allocate and link in new table */
        if ((q = (struct huft *)malloc((z + 1)*sizeof(struct huft))) ==
     640:	001420c0 	sll	a0,s4,0x3
     644:	24840008 	addiu	a0,a0,8
     648:	0c000000 	jal	0 <flat_core_dump>
			648: R_MIPS_26	kmalloc
     64c:	240501f0 	li	a1,496
     650:	14400009 	bnez	v0,678 <huft_build+0x3c0>
     654:	00403021 	move	a2,v0
/home/mips/lx4180/fs/../lib/inflate2.c:410
            (struct huft *)NULL)
        {
          if (h)
     658:	12a00005 	beqz	s5,670 <huft_build+0x3b8>
     65c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:411
            huft_free(zloc, u[0]);
     660:	8fa40120 	lw	a0,288(sp)
     664:	8fa50060 	lw	a1,96(sp)
     668:	0c000249 	jal	924 <huft_free>
			668: R_MIPS_26	.text
     66c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:412
          return 3;             /* not enough memory */
     670:	0800023d 	j	8f4 <huft_build+0x63c>
			670: R_MIPS_26	.text
     674:	24020003 	li	v0,3
/home/mips/lx4180/fs/../lib/inflate2.c:415
        }
DEBG1("4 ");
        hufts += z + 1;         /* track memory usage */
     678:	8fa40120 	lw	a0,288(sp)
     67c:	00000000 	nop
     680:	8c820444 	lw	v0,1092(a0)
     684:	00000000 	nop
     688:	02821021 	addu	v0,s4,v0
     68c:	24420001 	addiu	v0,v0,1
     690:	ac820444 	sw	v0,1092(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:416
        *t = q + 1;             /* link to list for huft_free() */
     694:	24c40008 	addiu	a0,a2,8
     698:	8fa20138 	lw	v0,312(sp)
     69c:	00000000 	nop
     6a0:	ac440000 	sw	a0,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:417
        *(t = &(q->v.t)) = (struct huft *)NULL;
     6a4:	24c30004 	addiu	v1,a2,4
     6a8:	afa30138 	sw	v1,312(sp)
     6ac:	acc00004 	sw	zero,4(a2)
/home/mips/lx4180/fs/../lib/inflate2.c:418
        u[h] = ++q;             /* table starts after link */
     6b0:	00151880 	sll	v1,s5,0x2
     6b4:	27a20010 	addiu	v0,sp,16
     6b8:	00621821 	addu	v1,v1,v0
     6bc:	00803021 	move	a2,a0
/home/mips/lx4180/fs/../lib/inflate2.c:422

DEBG1("5 ");
        /* connect to last table, if there is one */
        if (h)
     6c0:	12a00011 	beqz	s5,708 <huft_build+0x450>
     6c4:	ac640050 	sw	a0,80(v1)
/home/mips/lx4180/fs/../lib/inflate2.c:424
        {
          x[h] = i;             /* save pattern for backing up */
     6c8:	ac710090 	sw	s1,144(v1)
/home/mips/lx4180/fs/../lib/inflate2.c:425
          r.b = (uch)l;         /* bits to dump before this table */
     6cc:	a3b60059 	sb	s6,89(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:426
          r.e = (uch)(16 + j);  /* bits in this table */
     6d0:	26020010 	addiu	v0,s0,16
     6d4:	a3a20058 	sb	v0,88(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:427
          r.v.t = q;            /* pointer to this table */
     6d8:	afa4005c 	sw	a0,92(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:428
          j = i >> (w - l);     /* (get around Turbo C bug) */
     6dc:	02761023 	subu	v0,s3,s6
     6e0:	00518006 	srlv	s0,s1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:429
          u[h-1][j] = r;        /* connect to last table */
     6e4:	8c63004c 	lw	v1,76(v1)
     6e8:	001010c0 	sll	v0,s0,0x3
     6ec:	00431021 	addu	v0,v0,v1
     6f0:	8fa30058 	lw	v1,88(sp)
     6f4:	00000000 	nop
     6f8:	ac430000 	sw	v1,0(v0)
     6fc:	8fa3005c 	lw	v1,92(sp)
     700:	00000000 	nop
     704:	ac430004 	sw	v1,4(v0)
     708:	02761821 	addu	v1,s3,s6
     70c:	007e102a 	slt	v0,v1,s8
     710:	1440ffa4 	bnez	v0,5a4 <huft_build+0x2ec>
     714:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:436
        }
DEBG1("6 ");
      }
DEBG("h6c ");

      /* set up table entry in r */
      r.b = (uch)(k - w);
     718:	03d31023 	subu	v0,s8,s3
     71c:	a3a20059 	sb	v0,89(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:437
      if (p >= v + n)
     720:	8fa400f4 	lw	a0,244(sp)
     724:	00000000 	nop
     728:	0244102b 	sltu	v0,s2,a0
     72c:	14400003 	bnez	v0,73c <huft_build+0x484>
     730:	24020063 	li	v0,99
/home/mips/lx4180/fs/../lib/inflate2.c:438
        r.e = 99;               /* out of values--invalid code */
     734:	080001f2 	j	7c8 <huft_build+0x510>
			734: R_MIPS_26	.text
     738:	a3a20058 	sb	v0,88(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:439
      else if (*p < s)
     73c:	8e430000 	lw	v1,0(s2)
     740:	8fa4012c 	lw	a0,300(sp)
     744:	00000000 	nop
     748:	0064102b 	sltu	v0,v1,a0
     74c:	10400008 	beqz	v0,770 <huft_build+0x4b8>
     750:	2c620100 	sltiu	v0,v1,256
/home/mips/lx4180/fs/../lib/inflate2.c:441
      {
        r.e = (uch)(*p < 256 ? 16 : 15);    /* 256 is end-of-block code */
     754:	2c420001 	sltiu	v0,v0,1
     758:	24030010 	li	v1,16
     75c:	00621823 	subu	v1,v1,v0
     760:	a3a30058 	sb	v1,88(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:442
        r.v.n = (ush)(*p);             /* simple code is just the value */
     764:	96420002 	lhu	v0,2(s2)
/home/mips/lx4180/fs/../lib/inflate2.c:443
	p++;                           /* one compiler does not like *p++ */
     768:	080001f1 	j	7c4 <huft_build+0x50c>
			768: R_MIPS_26	.text
     76c:	a7a2005c 	sh	v0,92(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:447
      }
      else
      {
        r.e = (uch)e[*p - s];   /* non-simple--look up in lists */
     770:	8e420000 	lw	v0,0(s2)
     774:	8fa3012c 	lw	v1,300(sp)
     778:	00000000 	nop
     77c:	00431023 	subu	v0,v0,v1
     780:	00021040 	sll	v0,v0,0x1
     784:	8fa40134 	lw	a0,308(sp)
     788:	00000000 	nop
     78c:	00441021 	addu	v0,v0,a0
     790:	90420001 	lbu	v0,1(v0)
     794:	00000000 	nop
     798:	a3a20058 	sb	v0,88(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:448
        r.v.n = d[*p++ - s];
     79c:	8e420000 	lw	v0,0(s2)
     7a0:	00000000 	nop
     7a4:	00431023 	subu	v0,v0,v1
     7a8:	00021040 	sll	v0,v0,0x1
     7ac:	8fa30130 	lw	v1,304(sp)
     7b0:	00000000 	nop
     7b4:	00431021 	addu	v0,v0,v1
     7b8:	94420000 	lhu	v0,0(v0)
     7bc:	00000000 	nop
     7c0:	a7a2005c 	sh	v0,92(sp)
     7c4:	26520004 	addiu	s2,s2,4
/home/mips/lx4180/fs/../lib/inflate2.c:453
      }
DEBG("h6d ");

      /* fill code-like entries with r */
      f = 1 << (k - w);
     7c8:	03d31023 	subu	v0,s8,s3
     7cc:	24030001 	li	v1,1
     7d0:	00432004 	sllv	a0,v1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:454
      for (j = i >> w; j < z; j += f)
     7d4:	02718006 	srlv	s0,s1,s3
     7d8:	0214102b 	sltu	v0,s0,s4
     7dc:	1040000f 	beqz	v0,81c <huft_build+0x564>
     7e0:	27c2ffff 	addiu	v0,s8,-1
/home/mips/lx4180/fs/../lib/inflate2.c:455
        q[j] = r;
     7e4:	001010c0 	sll	v0,s0,0x3
     7e8:	00461021 	addu	v0,v0,a2
     7ec:	8fa30058 	lw	v1,88(sp)
     7f0:	00000000 	nop
     7f4:	ac430000 	sw	v1,0(v0)
     7f8:	8fa3005c 	lw	v1,92(sp)
     7fc:	00000000 	nop
     800:	ac430004 	sw	v1,4(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:454
     804:	02048021 	addu	s0,s0,a0
     808:	0214102b 	sltu	v0,s0,s4
     80c:	1440fff6 	bnez	v0,7e8 <huft_build+0x530>
     810:	001010c0 	sll	v0,s0,0x3
/home/mips/lx4180/fs/../lib/inflate2.c:458

      /* backwards increment the k-bit code i */
      for (j = 1 << (k - 1); i & j; j >>= 1)
     814:	27c2ffff 	addiu	v0,s8,-1
     818:	24030001 	li	v1,1
     81c:	00438004 	sllv	s0,v1,v0
     820:	02301024 	and	v0,s1,s0
     824:	10400006 	beqz	v0,840 <huft_build+0x588>
     828:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:459
        i ^= j;
     82c:	02308826 	xor	s1,s1,s0
/home/mips/lx4180/fs/../lib/inflate2.c:458
     830:	00108042 	srl	s0,s0,0x1
     834:	02301024 	and	v0,s1,s0
     838:	1440fffc 	bnez	v0,82c <huft_build+0x574>
     83c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:460
      i ^= j;
     840:	02308826 	xor	s1,s1,s0
/home/mips/lx4180/fs/../lib/inflate2.c:463

      /* backup over finished tables */
      while ((i & ((1 << w) - 1)) != x[h])
     844:	24020001 	li	v0,1
     848:	02621004 	sllv	v0,v0,s3
     84c:	2442ffff 	addiu	v0,v0,-1
     850:	02221024 	and	v0,s1,v0
     854:	00151880 	sll	v1,s5,0x2
     858:	27a40010 	addiu	a0,sp,16
     85c:	00641821 	addu	v1,v1,a0
     860:	8c630090 	lw	v1,144(v1)
     864:	00000000 	nop
     868:	1043000d 	beq	v0,v1,8a0 <huft_build+0x5e8>
     86c:	00802821 	move	a1,a0
     870:	24040001 	li	a0,1
/home/mips/lx4180/fs/../lib/inflate2.c:465
      {
        h--;                    /* don't need to update q */
     874:	26b5ffff 	addiu	s5,s5,-1
/home/mips/lx4180/fs/../lib/inflate2.c:466
        w -= l;
     878:	02769823 	subu	s3,s3,s6
     87c:	02641004 	sllv	v0,a0,s3
     880:	2442ffff 	addiu	v0,v0,-1
     884:	02221024 	and	v0,s1,v0
     888:	00151880 	sll	v1,s5,0x2
     88c:	00651821 	addu	v1,v1,a1
     890:	8c630090 	lw	v1,144(v1)
     894:	00000000 	nop
     898:	1443fff6 	bne	v0,v1,874 <huft_build+0x5bc>
     89c:	00000000 	nop
     8a0:	26f7ffff 	addiu	s7,s7,-1
     8a4:	2402ffff 	li	v0,-1
     8a8:	16e2ff39 	bne	s7,v0,590 <huft_build+0x2d8>
     8ac:	02761021 	addu	v0,s3,s6
/home/mips/lx4180/fs/../lib/inflate2.c:374
     8b0:	27de0001 	addiu	s8,s8,1
     8b4:	8fa400e8 	lw	a0,232(sp)
     8b8:	00000000 	nop
     8bc:	009e102a 	slt	v0,a0,s8
     8c0:	1040ff24 	beqz	v0,554 <huft_build+0x29c>
     8c4:	001e1080 	sll	v0,s8,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:476
      }
DEBG("h6e ");
    }
DEBG("h6f ");
  }

DEBG("huft7 ");

  /* Return true (1) if we were given an incomplete table */
  return y != 0 && g != 1;
     8c8:	8fa200ec 	lw	v0,236(sp)
     8cc:	00000000 	nop
     8d0:	10400007 	beqz	v0,8f0 <huft_build+0x638>
     8d4:	00001821 	move	v1,zero
     8d8:	24020001 	li	v0,1
     8dc:	8fa400e8 	lw	a0,232(sp)
     8e0:	00000000 	nop
     8e4:	10820003 	beq	a0,v0,8f4 <huft_build+0x63c>
     8e8:	00601021 	move	v0,v1
     8ec:	24030001 	li	v1,1
     8f0:	00601021 	move	v0,v1
/home/mips/lx4180/fs/../lib/inflate2.c:477
}
     8f4:	8fbf011c 	lw	ra,284(sp)
     8f8:	8fbe0118 	lw	s8,280(sp)
     8fc:	8fb70114 	lw	s7,276(sp)
     900:	8fb60110 	lw	s6,272(sp)
     904:	8fb5010c 	lw	s5,268(sp)
     908:	8fb40108 	lw	s4,264(sp)
     90c:	8fb30104 	lw	s3,260(sp)
     910:	8fb20100 	lw	s2,256(sp)
     914:	8fb100fc 	lw	s1,252(sp)
     918:	8fb000f8 	lw	s0,248(sp)
     91c:	03e00008 	jr	ra
     920:	27bd0120 	addiu	sp,sp,288

00000924 <huft_free>:
huft_free():
/home/mips/lx4180/fs/../lib/inflate2.c:487



STATIC int huft_free(zloc, t)
struct s_zloc *zloc;
struct huft *t;         /* table to free */
/* Free the malloc'ed tables built by huft_build(), which makes a linked
   list of the tables it made, with the links in a dummy first entry of
   each table. */
{
     924:	27bdffe8 	addiu	sp,sp,-24
     928:	afbf0014 	sw	ra,20(sp)
     92c:	afb00010 	sw	s0,16(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:493
  register struct huft *p, *q;


  /* Go through linked list, freeing from the malloced (t[-1]) address. */
  p = t;
  while (p != (struct huft *)NULL)
     930:	10a00007 	beqz	a1,950 <huft_free+0x2c>
     934:	00a02021 	move	a0,a1
/home/mips/lx4180/fs/../lib/inflate2.c:495
  {
    q = (--p)->v.t;
     938:	2484fff8 	addiu	a0,a0,-8
     93c:	8c900004 	lw	s0,4(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:496
    free((char*)p);
     940:	0c000000 	jal	0 <flat_core_dump>
			940: R_MIPS_26	kfree
     944:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:497
    p = q;
     948:	1600fffb 	bnez	s0,938 <huft_free+0x14>
     94c:	02002021 	move	a0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:500
  } 
  return 0;
}
     950:	00001021 	move	v0,zero
     954:	8fbf0014 	lw	ra,20(sp)
     958:	8fb00010 	lw	s0,16(sp)
     95c:	03e00008 	jr	ra
     960:	27bd0018 	addiu	sp,sp,24

00000964 <inflate_codes>:
inflate_codes():
/home/mips/lx4180/fs/../lib/inflate2.c:509


STATIC int inflate_codes(zloc, tl, td, bl, bd)
struct s_zloc *zloc;
struct huft *tl, *td;   /* literal/length and distance decoder tables */
int bl, bd;             /* number of bits decoded by tl[] and td[] */
/* inflate (decompress) the codes in a deflated (compressed) block.
   Return an error code or zero if it all goes ok. */
{
     964:	27bdffc0 	addiu	sp,sp,-64
     968:	afbf003c 	sw	ra,60(sp)
     96c:	afbe0038 	sw	s8,56(sp)
     970:	afb70034 	sw	s7,52(sp)
     974:	afb60030 	sw	s6,48(sp)
     978:	afb5002c 	sw	s5,44(sp)
     97c:	afb40028 	sw	s4,40(sp)
     980:	afb30024 	sw	s3,36(sp)
     984:	afb20020 	sw	s2,32(sp)
     988:	afb1001c 	sw	s1,28(sp)
     98c:	afb00018 	sw	s0,24(sp)
     990:	00809821 	move	s3,a0
     994:	afa50044 	sw	a1,68(sp)
     998:	afa60048 	sw	a2,72(sp)
     99c:	00e0f021 	move	s8,a3
/home/mips/lx4180/fs/../lib/inflate2.c:520
  register unsigned e;  /* table entry flag/number of extra bits */
  unsigned n, d;        /* length and index for copy */
  unsigned w;           /* current window position */
  struct huft *t;       /* pointer to table entry */
  unsigned ml, md;      /* masks for bl and bd bits */
  register ulg b;       /* bit buffer */
  register unsigned k;  /* number of bits in bit buffer */


  /* make local copies of globals */
  b = bb;                       /* initialize bit buffer */
     9a0:	8c920038 	lw	s2,56(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:521
  k = bk;
     9a4:	8c90003c 	lw	s0,60(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:522
  w = wp;                       /* initialize window position */
     9a8:	8c950024 	lw	s5,36(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:525

  /* inflate the coded data */
  ml = mask_bits[bl];           /* precompute masks for speed */
     9ac:	00071040 	sll	v0,a3,0x1
     9b0:	3c010000 	lui	at,0x0
			9b0: R_MIPS_HI16	.data
     9b4:	00220821 	addu	at,at,v0
     9b8:	9422015c 	lhu	v0,348(at)
			9b8: R_MIPS_LO16	.data
     9bc:	00000000 	nop
     9c0:	afa20010 	sw	v0,16(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:526
  md = mask_bits[bd];
     9c4:	8fa30050 	lw	v1,80(sp)
     9c8:	00000000 	nop
     9cc:	00031040 	sll	v0,v1,0x1
     9d0:	3c010000 	lui	at,0x0
			9d0: R_MIPS_HI16	.data
     9d4:	00220821 	addu	at,at,v0
     9d8:	9422015c 	lhu	v0,348(at)
			9d8: R_MIPS_LO16	.data
     9dc:	00000000 	nop
     9e0:	afa20014 	sw	v0,20(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:529
  for (;;)                      /* do until end of block */
  {
    NEEDBITS((unsigned)bl)
     9e4:	021e102b 	sltu	v0,s0,s8
     9e8:	1040001a 	beqz	v0,a54 <inflate_codes+0xf0>
     9ec:	00000000 	nop
     9f0:	8e630020 	lw	v1,32(s3)
     9f4:	8e62001c 	lw	v0,28(s3)
     9f8:	00000000 	nop
     9fc:	0062102b 	sltu	v0,v1,v0
     a00:	1040000b 	beqz	v0,a30 <inflate_codes+0xcc>
     a04:	00000000 	nop
     a08:	8e620014 	lw	v0,20(s3)
     a0c:	00000000 	nop
     a10:	00431021 	addu	v0,v0,v1
     a14:	90420000 	lbu	v0,0(v0)
     a18:	00000000 	nop
     a1c:	02021004 	sllv	v0,v0,s0
     a20:	02429025 	or	s2,s2,v0
     a24:	24620001 	addiu	v0,v1,1
     a28:	08000291 	j	a44 <inflate_codes+0xe0>
			a28: R_MIPS_26	.text
     a2c:	ae620020 	sw	v0,32(s3)
     a30:	0c00004b 	jal	12c <fill_inbuf>
			a30: R_MIPS_26	.text
     a34:	02602021 	move	a0,s3
     a38:	304200ff 	andi	v0,v0,0xff
     a3c:	02021004 	sllv	v0,v0,s0
     a40:	02429025 	or	s2,s2,v0
     a44:	26100008 	addiu	s0,s0,8
     a48:	021e102b 	sltu	v0,s0,s8
     a4c:	1440ffe8 	bnez	v0,9f0 <inflate_codes+0x8c>
     a50:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:530
    if ((e = (t = tl + ((unsigned)b & ml))->e) > 16)
     a54:	8fa30010 	lw	v1,16(sp)
     a58:	00000000 	nop
     a5c:	02431024 	and	v0,s2,v1
     a60:	000210c0 	sll	v0,v0,0x3
     a64:	8fa30044 	lw	v1,68(sp)
     a68:	00000000 	nop
     a6c:	0062a021 	addu	s4,v1,v0
     a70:	92910000 	lbu	s1,0(s4)
     a74:	00000000 	nop
     a78:	2e220011 	sltiu	v0,s1,17
     a7c:	14400033 	bnez	v0,b4c <inflate_codes+0x1e8>
     a80:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:531
      do {
     a84:	24160063 	li	s6,99
/home/mips/lx4180/fs/../lib/inflate2.c:532
        if (e == 99)
     a88:	12360129 	beq	s1,s6,f30 <inflate_codes+0x5cc>
     a8c:	24020001 	li	v0,1
/home/mips/lx4180/fs/../lib/inflate2.c:534
          return 1;
        DUMPBITS(t->b)
     a90:	92820001 	lbu	v0,1(s4)
     a94:	00000000 	nop
     a98:	00529006 	srlv	s2,s2,v0
     a9c:	02028023 	subu	s0,s0,v0
/home/mips/lx4180/fs/../lib/inflate2.c:535
        e -= 16;
     aa0:	2631fff0 	addiu	s1,s1,-16
/home/mips/lx4180/fs/../lib/inflate2.c:536
        NEEDBITS(e)
     aa4:	0211102b 	sltu	v0,s0,s1
     aa8:	1040001a 	beqz	v0,b14 <inflate_codes+0x1b0>
     aac:	00111040 	sll	v0,s1,0x1
     ab0:	8e630020 	lw	v1,32(s3)
     ab4:	8e62001c 	lw	v0,28(s3)
     ab8:	00000000 	nop
     abc:	0062102b 	sltu	v0,v1,v0
     ac0:	1040000b 	beqz	v0,af0 <inflate_codes+0x18c>
     ac4:	00000000 	nop
     ac8:	8e620014 	lw	v0,20(s3)
     acc:	00000000 	nop
     ad0:	00431021 	addu	v0,v0,v1
     ad4:	90420000 	lbu	v0,0(v0)
     ad8:	00000000 	nop
     adc:	02021004 	sllv	v0,v0,s0
     ae0:	02429025 	or	s2,s2,v0
     ae4:	24620001 	addiu	v0,v1,1
     ae8:	080002c1 	j	b04 <inflate_codes+0x1a0>
			ae8: R_MIPS_26	.text
     aec:	ae620020 	sw	v0,32(s3)
     af0:	0c00004b 	jal	12c <fill_inbuf>
			af0: R_MIPS_26	.text
     af4:	02602021 	move	a0,s3
     af8:	304200ff 	andi	v0,v0,0xff
     afc:	02021004 	sllv	v0,v0,s0
     b00:	02429025 	or	s2,s2,v0
     b04:	26100008 	addiu	s0,s0,8
     b08:	0211102b 	sltu	v0,s0,s1
     b0c:	1440ffe8 	bnez	v0,ab0 <inflate_codes+0x14c>
     b10:	00111040 	sll	v0,s1,0x1
/home/mips/lx4180/fs/../lib/inflate2.c:537
      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
     b14:	3c010000 	lui	at,0x0
			b14: R_MIPS_HI16	.data
     b18:	00220821 	addu	at,at,v0
     b1c:	9422015c 	lhu	v0,348(at)
			b1c: R_MIPS_LO16	.data
     b20:	00000000 	nop
     b24:	02421024 	and	v0,s2,v0
     b28:	000210c0 	sll	v0,v0,0x3
     b2c:	8e830004 	lw	v1,4(s4)
     b30:	00000000 	nop
     b34:	0043a021 	addu	s4,v0,v1
     b38:	92910000 	lbu	s1,0(s4)
     b3c:	00000000 	nop
     b40:	2e220011 	sltiu	v0,s1,17
     b44:	1040ffd0 	beqz	v0,a88 <inflate_codes+0x124>
     b48:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:538
    DUMPBITS(t->b)
     b4c:	92820001 	lbu	v0,1(s4)
     b50:	00000000 	nop
     b54:	00529006 	srlv	s2,s2,v0
     b58:	02028023 	subu	s0,s0,v0
/home/mips/lx4180/fs/../lib/inflate2.c:539
    if (e == 16)                /* then it's a literal */
     b5c:	24020010 	li	v0,16
     b60:	16220010 	bne	s1,v0,ba4 <inflate_codes+0x240>
     b64:	2402000f 	li	v0,15
/home/mips/lx4180/fs/../lib/inflate2.c:541
    {
      slide[w++] = (uch)t->v.n;
     b68:	8e620018 	lw	v0,24(s3)
     b6c:	00000000 	nop
     b70:	00551021 	addu	v0,v0,s5
     b74:	92830005 	lbu	v1,5(s4)
     b78:	00000000 	nop
     b7c:	a0430000 	sb	v1,0(v0)
     b80:	26b50001 	addiu	s5,s5,1
/home/mips/lx4180/fs/../lib/inflate2.c:543
      Tracevv((stderr, "%c", slide[w-1]));
      if (w == WSIZE)
     b84:	34028000 	li	v0,0x8000
     b88:	16a2ff97 	bne	s5,v0,9e8 <inflate_codes+0x84>
     b8c:	021e102b 	sltu	v0,s0,s8
/home/mips/lx4180/fs/../lib/inflate2.c:545
      {
        flush_output(w);
     b90:	ae750024 	sw	s5,36(s3)
     b94:	0c00007f 	jal	1fc <flush_window>
			b94: R_MIPS_26	.text
     b98:	02602021 	move	a0,s3
/home/mips/lx4180/fs/../lib/inflate2.c:546
        w = 0;
     b9c:	08000279 	j	9e4 <inflate_codes+0x80>
			b9c: R_MIPS_26	.text
     ba0:	0000a821 	move	s5,zero
/home/mips/lx4180/fs/../lib/inflate2.c:552
      }
    }
    else                        /* it's an EOB or a length */
    {
      /* exit if end of block */
      if (e == 15)
     ba4:	122200de 	beq	s1,v0,f20 <inflate_codes+0x5bc>
     ba8:	0211102b 	sltu	v0,s0,s1
/home/mips/lx4180/fs/../lib/inflate2.c:556
        break;

      /* get length of block to copy */
      NEEDBITS(e)
     bac:	1040001a 	beqz	v0,c18 <inflate_codes+0x2b4>
     bb0:	00000000 	nop
     bb4:	8e630020 	lw	v1,32(s3)
     bb8:	8e62001c 	lw	v0,28(s3)
     bbc:	00000000 	nop
     bc0:	0062102b 	sltu	v0,v1,v0
     bc4:	1040000b 	beqz	v0,bf4 <inflate_codes+0x290>
     bc8:	00000000 	nop
     bcc:	8e620014 	lw	v0,20(s3)
     bd0:	00000000 	nop
     bd4:	00431021 	addu	v0,v0,v1
     bd8:	90420000 	lbu	v0,0(v0)
     bdc:	00000000 	nop
     be0:	02021004 	sllv	v0,v0,s0
     be4:	02429025 	or	s2,s2,v0
     be8:	24620001 	addiu	v0,v1,1
     bec:	08000302 	j	c08 <inflate_codes+0x2a4>
			bec: R_MIPS_26	.text
     bf0:	ae620020 	sw	v0,32(s3)
     bf4:	0c00004b 	jal	12c <fill_inbuf>
			bf4: R_MIPS_26	.text
     bf8:	02602021 	move	a0,s3
     bfc:	304200ff 	andi	v0,v0,0xff
     c00:	02021004 	sllv	v0,v0,s0
     c04:	02429025 	or	s2,s2,v0
     c08:	26100008 	addiu	s0,s0,8
     c0c:	0211102b 	sltu	v0,s0,s1
     c10:	1440ffe8 	bnez	v0,bb4 <inflate_codes+0x250>
     c14:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:557
      n = t->v.n + ((unsigned)b & mask_bits[e]);
     c18:	96960004 	lhu	s6,4(s4)
     c1c:	00111040 	sll	v0,s1,0x1
     c20:	3c010000 	lui	at,0x0
			c20: R_MIPS_HI16	.data
     c24:	00220821 	addu	at,at,v0
     c28:	9422015c 	lhu	v0,348(at)
			c28: R_MIPS_LO16	.data
     c2c:	00000000 	nop
     c30:	02421024 	and	v0,s2,v0
     c34:	02c2b021 	addu	s6,s6,v0
/home/mips/lx4180/fs/../lib/inflate2.c:558
      DUMPBITS(e);
     c38:	02118023 	subu	s0,s0,s1
/home/mips/lx4180/fs/../lib/inflate2.c:561

      /* decode distance of block to copy */
      NEEDBITS((unsigned)bd)
     c3c:	8fa30050 	lw	v1,80(sp)
     c40:	00000000 	nop
     c44:	0203102b 	sltu	v0,s0,v1
     c48:	1040001c 	beqz	v0,cbc <inflate_codes+0x358>
     c4c:	02329006 	srlv	s2,s2,s1
     c50:	8e630020 	lw	v1,32(s3)
     c54:	8e62001c 	lw	v0,28(s3)
     c58:	00000000 	nop
     c5c:	0062102b 	sltu	v0,v1,v0
     c60:	1040000b 	beqz	v0,c90 <inflate_codes+0x32c>
     c64:	00000000 	nop
     c68:	8e620014 	lw	v0,20(s3)
     c6c:	00000000 	nop
     c70:	00431021 	addu	v0,v0,v1
     c74:	90420000 	lbu	v0,0(v0)
     c78:	00000000 	nop
     c7c:	02021004 	sllv	v0,v0,s0
     c80:	02429025 	or	s2,s2,v0
     c84:	24620001 	addiu	v0,v1,1
     c88:	08000329 	j	ca4 <inflate_codes+0x340>
			c88: R_MIPS_26	.text
     c8c:	ae620020 	sw	v0,32(s3)
     c90:	0c00004b 	jal	12c <fill_inbuf>
			c90: R_MIPS_26	.text
     c94:	02602021 	move	a0,s3
     c98:	304200ff 	andi	v0,v0,0xff
     c9c:	02021004 	sllv	v0,v0,s0
     ca0:	02429025 	or	s2,s2,v0
     ca4:	26100008 	addiu	s0,s0,8
     ca8:	8fa30050 	lw	v1,80(sp)
     cac:	00000000 	nop
     cb0:	0203102b 	sltu	v0,s0,v1
     cb4:	1440ffe6 	bnez	v0,c50 <inflate_codes+0x2ec>
     cb8:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:562
      if ((e = (t = td + ((unsigned)b & md))->e) > 16)
     cbc:	8fa30014 	lw	v1,20(sp)
     cc0:	00000000 	nop
     cc4:	02431024 	and	v0,s2,v1
     cc8:	000210c0 	sll	v0,v0,0x3
     ccc:	8fa30048 	lw	v1,72(sp)
     cd0:	00000000 	nop
     cd4:	0062a021 	addu	s4,v1,v0
     cd8:	92910000 	lbu	s1,0(s4)
     cdc:	00000000 	nop
     ce0:	2e220011 	sltiu	v0,s1,17
     ce4:	14400033 	bnez	v0,db4 <inflate_codes+0x450>
     ce8:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:563
        do {
     cec:	24170063 	li	s7,99
/home/mips/lx4180/fs/../lib/inflate2.c:564
          if (e == 99)
     cf0:	1237008f 	beq	s1,s7,f30 <inflate_codes+0x5cc>
     cf4:	24020001 	li	v0,1
/home/mips/lx4180/fs/../lib/inflate2.c:566
            return 1;
          DUMPBITS(t->b)
     cf8:	92820001 	lbu	v0,1(s4)
     cfc:	00000000 	nop
     d00:	00529006 	srlv	s2,s2,v0
     d04:	02028023 	subu	s0,s0,v0
/home/mips/lx4180/fs/../lib/inflate2.c:567
          e -= 16;
     d08:	2631fff0 	addiu	s1,s1,-16
/home/mips/lx4180/fs/../lib/inflate2.c:568
          NEEDBITS(e)
     d0c:	0211102b 	sltu	v0,s0,s1
     d10:	1040001a 	beqz	v0,d7c <inflate_codes+0x418>
     d14:	00111040 	sll	v0,s1,0x1
     d18:	8e630020 	lw	v1,32(s3)
     d1c:	8e62001c 	lw	v0,28(s3)
     d20:	00000000 	nop
     d24:	0062102b 	sltu	v0,v1,v0
     d28:	1040000b 	beqz	v0,d58 <inflate_codes+0x3f4>
     d2c:	00000000 	nop
     d30:	8e620014 	lw	v0,20(s3)
     d34:	00000000 	nop
     d38:	00431021 	addu	v0,v0,v1
     d3c:	90420000 	lbu	v0,0(v0)
     d40:	00000000 	nop
     d44:	02021004 	sllv	v0,v0,s0
     d48:	02429025 	or	s2,s2,v0
     d4c:	24620001 	addiu	v0,v1,1
     d50:	0800035b 	j	d6c <inflate_codes+0x408>
			d50: R_MIPS_26	.text
     d54:	ae620020 	sw	v0,32(s3)
     d58:	0c00004b 	jal	12c <fill_inbuf>
			d58: R_MIPS_26	.text
     d5c:	02602021 	move	a0,s3
     d60:	304200ff 	andi	v0,v0,0xff
     d64:	02021004 	sllv	v0,v0,s0
     d68:	02429025 	or	s2,s2,v0
     d6c:	26100008 	addiu	s0,s0,8
     d70:	0211102b 	sltu	v0,s0,s1
     d74:	1440ffe8 	bnez	v0,d18 <inflate_codes+0x3b4>
     d78:	00111040 	sll	v0,s1,0x1
/home/mips/lx4180/fs/../lib/inflate2.c:569
        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
     d7c:	3c010000 	lui	at,0x0
			d7c: R_MIPS_HI16	.data
     d80:	00220821 	addu	at,at,v0
     d84:	9422015c 	lhu	v0,348(at)
			d84: R_MIPS_LO16	.data
     d88:	00000000 	nop
     d8c:	02421024 	and	v0,s2,v0
     d90:	000210c0 	sll	v0,v0,0x3
     d94:	8e830004 	lw	v1,4(s4)
     d98:	00000000 	nop
     d9c:	0043a021 	addu	s4,v0,v1
     da0:	92910000 	lbu	s1,0(s4)
     da4:	00000000 	nop
     da8:	2e220011 	sltiu	v0,s1,17
     dac:	1040ffd0 	beqz	v0,cf0 <inflate_codes+0x38c>
     db0:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:570
      DUMPBITS(t->b)
     db4:	92820001 	lbu	v0,1(s4)
     db8:	00000000 	nop
     dbc:	00529006 	srlv	s2,s2,v0
     dc0:	02028023 	subu	s0,s0,v0
/home/mips/lx4180/fs/../lib/inflate2.c:571
      NEEDBITS(e)
     dc4:	0211102b 	sltu	v0,s0,s1
     dc8:	1040001a 	beqz	v0,e34 <inflate_codes+0x4d0>
     dcc:	00000000 	nop
     dd0:	8e630020 	lw	v1,32(s3)
     dd4:	8e62001c 	lw	v0,28(s3)
     dd8:	00000000 	nop
     ddc:	0062102b 	sltu	v0,v1,v0
     de0:	1040000b 	beqz	v0,e10 <inflate_codes+0x4ac>
     de4:	00000000 	nop
     de8:	8e620014 	lw	v0,20(s3)
     dec:	00000000 	nop
     df0:	00431021 	addu	v0,v0,v1
     df4:	90420000 	lbu	v0,0(v0)
     df8:	00000000 	nop
     dfc:	02021004 	sllv	v0,v0,s0
     e00:	02429025 	or	s2,s2,v0
     e04:	24620001 	addiu	v0,v1,1
     e08:	08000389 	j	e24 <inflate_codes+0x4c0>
			e08: R_MIPS_26	.text
     e0c:	ae620020 	sw	v0,32(s3)
     e10:	0c00004b 	jal	12c <fill_inbuf>
			e10: R_MIPS_26	.text
     e14:	02602021 	move	a0,s3
     e18:	304200ff 	andi	v0,v0,0xff
     e1c:	02021004 	sllv	v0,v0,s0
     e20:	02429025 	or	s2,s2,v0
     e24:	26100008 	addiu	s0,s0,8
     e28:	0211102b 	sltu	v0,s0,s1
     e2c:	1440ffe8 	bnez	v0,dd0 <inflate_codes+0x46c>
     e30:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:572
      d = w - t->v.n - ((unsigned)b & mask_bits[e]);
     e34:	96820004 	lhu	v0,4(s4)
     e38:	00000000 	nop
     e3c:	02a2a023 	subu	s4,s5,v0
     e40:	00111040 	sll	v0,s1,0x1
     e44:	3c010000 	lui	at,0x0
			e44: R_MIPS_HI16	.data
     e48:	00220821 	addu	at,at,v0
     e4c:	9422015c 	lhu	v0,348(at)
			e4c: R_MIPS_LO16	.data
     e50:	00000000 	nop
     e54:	02421024 	and	v0,s2,v0
     e58:	0282a023 	subu	s4,s4,v0
/home/mips/lx4180/fs/../lib/inflate2.c:573
      DUMPBITS(e)
     e5c:	02329006 	srlv	s2,s2,s1
     e60:	02118023 	subu	s0,s0,s1
/home/mips/lx4180/fs/../lib/inflate2.c:577
      Tracevv((stderr,"\\[%d,%d]", w-d, n));

      /* do the copy */
      do {
     e64:	34178000 	li	s7,0x8000
/home/mips/lx4180/fs/../lib/inflate2.c:578
        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) > n ? n : e);
     e68:	32947fff 	andi	s4,s4,0x7fff
     e6c:	02b4102b 	sltu	v0,s5,s4
     e70:	34038000 	li	v1,0x8000
     e74:	14400003 	bnez	v0,e84 <inflate_codes+0x520>
     e78:	00748823 	subu	s1,v1,s4
     e7c:	34028000 	li	v0,0x8000
     e80:	00558823 	subu	s1,v0,s5
     e84:	02d1102b 	sltu	v0,s6,s1
     e88:	14400002 	bnez	v0,e94 <inflate_codes+0x530>
     e8c:	02c01821 	move	v1,s6
     e90:	02201821 	move	v1,s1
     e94:	00608821 	move	s1,v1
/home/mips/lx4180/fs/../lib/inflate2.c:580
#if !defined(NOMEMCPY) && !defined(INFDEBUG)
        if (w - d >= e)         /* (this test assumes unsigned comparison) */
     e98:	02b41023 	subu	v0,s5,s4
     e9c:	0043102b 	sltu	v0,v0,v1
     ea0:	1440000a 	bnez	v0,ecc <inflate_codes+0x568>
     ea4:	02c3b023 	subu	s6,s6,v1
/home/mips/lx4180/fs/../lib/inflate2.c:582
        {
          memcpy(slide + w, slide + d, e);
     ea8:	8e650018 	lw	a1,24(s3)
     eac:	00000000 	nop
     eb0:	00b52021 	addu	a0,a1,s5
     eb4:	00b42821 	addu	a1,a1,s4
     eb8:	0c000000 	jal	0 <flat_core_dump>
			eb8: R_MIPS_26	memcpy
     ebc:	00603021 	move	a2,v1
/home/mips/lx4180/fs/../lib/inflate2.c:583
          w += e;
     ec0:	02b1a821 	addu	s5,s5,s1
/home/mips/lx4180/fs/../lib/inflate2.c:584
          d += e;
     ec4:	080003be 	j	ef8 <inflate_codes+0x594>
			ec4: R_MIPS_26	.text
     ec8:	0291a021 	addu	s4,s4,s1
/home/mips/lx4180/fs/../lib/inflate2.c:589
        }
        else                      /* do it slow to avoid memcpy() overlap */
#endif /* !NOMEMCPY */
          do {
            slide[w++] = slide[d++];
     ecc:	8e620018 	lw	v0,24(s3)
     ed0:	00000000 	nop
     ed4:	00551821 	addu	v1,v0,s5
     ed8:	00541021 	addu	v0,v0,s4
     edc:	90420000 	lbu	v0,0(v0)
     ee0:	00000000 	nop
     ee4:	a0620000 	sb	v0,0(v1)
     ee8:	26940001 	addiu	s4,s4,1
/home/mips/lx4180/fs/../lib/inflate2.c:591
	    Tracevv((stderr, "%c", slide[w-1]));
          } while (--e);
     eec:	2631ffff 	addiu	s1,s1,-1
     ef0:	1620fff6 	bnez	s1,ecc <inflate_codes+0x568>
     ef4:	26b50001 	addiu	s5,s5,1
/home/mips/lx4180/fs/../lib/inflate2.c:592
        if (w == WSIZE)
     ef8:	16b70005 	bne	s5,s7,f10 <inflate_codes+0x5ac>
     efc:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:594
        {
          flush_output(w);
     f00:	ae750024 	sw	s5,36(s3)
     f04:	0c00007f 	jal	1fc <flush_window>
			f04: R_MIPS_26	.text
     f08:	02602021 	move	a0,s3
/home/mips/lx4180/fs/../lib/inflate2.c:595
          w = 0;
     f0c:	0000a821 	move	s5,zero
/home/mips/lx4180/fs/../lib/inflate2.c:597
        }
      } while (n);
     f10:	12c0feb5 	beqz	s6,9e8 <inflate_codes+0x84>
     f14:	021e102b 	sltu	v0,s0,s8
     f18:	0800039b 	j	e6c <inflate_codes+0x508>
			f18: R_MIPS_26	.text
     f1c:	32947fff 	andi	s4,s4,0x7fff
/home/mips/lx4180/fs/../lib/inflate2.c:603
    }
  }


  /* restore the globals from the locals */
  wp = w;                       /* restore global window pointer */
     f20:	ae750024 	sw	s5,36(s3)
/home/mips/lx4180/fs/../lib/inflate2.c:604
  bb = b;                       /* restore global bit buffer */
     f24:	ae720038 	sw	s2,56(s3)
/home/mips/lx4180/fs/../lib/inflate2.c:605
  bk = k;
     f28:	ae70003c 	sw	s0,60(s3)
/home/mips/lx4180/fs/../lib/inflate2.c:608

  /* done */
  return 0;
     f2c:	00001021 	move	v0,zero
/home/mips/lx4180/fs/../lib/inflate2.c:609
}
     f30:	8fbf003c 	lw	ra,60(sp)
     f34:	8fbe0038 	lw	s8,56(sp)
     f38:	8fb70034 	lw	s7,52(sp)
     f3c:	8fb60030 	lw	s6,48(sp)
     f40:	8fb5002c 	lw	s5,44(sp)
     f44:	8fb40028 	lw	s4,40(sp)
     f48:	8fb30024 	lw	s3,36(sp)
     f4c:	8fb20020 	lw	s2,32(sp)
     f50:	8fb1001c 	lw	s1,28(sp)
     f54:	8fb00018 	lw	s0,24(sp)
     f58:	03e00008 	jr	ra
     f5c:	27bd0040 	addiu	sp,sp,64

00000f60 <inflate_stored>:
inflate_stored():
/home/mips/lx4180/fs/../lib/inflate2.c:616



STATIC int inflate_stored(zloc)
struct s_zloc *zloc;
/* "decompress" an inflated type 0 (stored) block. */
{
     f60:	27bdffd0 	addiu	sp,sp,-48
     f64:	afbf002c 	sw	ra,44(sp)
     f68:	afb60028 	sw	s6,40(sp)
     f6c:	afb50024 	sw	s5,36(sp)
     f70:	afb40020 	sw	s4,32(sp)
     f74:	afb3001c 	sw	s3,28(sp)
     f78:	afb20018 	sw	s2,24(sp)
     f7c:	afb10014 	sw	s1,20(sp)
     f80:	afb00010 	sw	s0,16(sp)
     f84:	00809021 	move	s2,a0
/home/mips/lx4180/fs/../lib/inflate2.c:625
  unsigned n;           /* number of bytes in block */
  unsigned w;           /* current window position */
  register ulg b;       /* bit buffer */
  register unsigned k;  /* number of bits in bit buffer */

DEBG("<stor");

  /* make local copies of globals */
  b = bb;                       /* initialize bit buffer */
     f88:	8c910038 	lw	s1,56(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:626
  k = bk;
     f8c:	8c90003c 	lw	s0,60(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:627
  w = wp;                       /* initialize window position */
     f90:	8c940024 	lw	s4,36(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:631


  /* go to byte boundary */
  n = k & 7;
     f94:	32130007 	andi	s3,s0,0x7
/home/mips/lx4180/fs/../lib/inflate2.c:632
  DUMPBITS(n);
     f98:	02138023 	subu	s0,s0,s3
/home/mips/lx4180/fs/../lib/inflate2.c:636


  /* get the length and its complement */
  NEEDBITS(16)
     f9c:	2e020010 	sltiu	v0,s0,16
     fa0:	1040001a 	beqz	v0,100c <inflate_stored+0xac>
     fa4:	02718806 	srlv	s1,s1,s3
     fa8:	8e430020 	lw	v1,32(s2)
     fac:	8e42001c 	lw	v0,28(s2)
     fb0:	00000000 	nop
     fb4:	0062102b 	sltu	v0,v1,v0
     fb8:	1040000b 	beqz	v0,fe8 <inflate_stored+0x88>
     fbc:	00000000 	nop
     fc0:	8e420014 	lw	v0,20(s2)
     fc4:	00000000 	nop
     fc8:	00431021 	addu	v0,v0,v1
     fcc:	90420000 	lbu	v0,0(v0)
     fd0:	00000000 	nop
     fd4:	02021004 	sllv	v0,v0,s0
     fd8:	02228825 	or	s1,s1,v0
     fdc:	24620001 	addiu	v0,v1,1
     fe0:	080003ff 	j	ffc <inflate_stored+0x9c>
			fe0: R_MIPS_26	.text
     fe4:	ae420020 	sw	v0,32(s2)
     fe8:	0c00004b 	jal	12c <fill_inbuf>
			fe8: R_MIPS_26	.text
     fec:	02402021 	move	a0,s2
     ff0:	304200ff 	andi	v0,v0,0xff
     ff4:	02021004 	sllv	v0,v0,s0
     ff8:	02228825 	or	s1,s1,v0
     ffc:	26100008 	addiu	s0,s0,8
    1000:	2e020010 	sltiu	v0,s0,16
    1004:	1440ffe8 	bnez	v0,fa8 <inflate_stored+0x48>
    1008:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:637
  n = ((unsigned)b & 0xffff);
    100c:	3233ffff 	andi	s3,s1,0xffff
/home/mips/lx4180/fs/../lib/inflate2.c:638
  DUMPBITS(16)
    1010:	2610fff0 	addiu	s0,s0,-16
/home/mips/lx4180/fs/../lib/inflate2.c:639
  NEEDBITS(16)
    1014:	2e020010 	sltiu	v0,s0,16
    1018:	1040001a 	beqz	v0,1084 <inflate_stored+0x124>
    101c:	00118c02 	srl	s1,s1,0x10
    1020:	8e430020 	lw	v1,32(s2)
    1024:	8e42001c 	lw	v0,28(s2)
    1028:	00000000 	nop
    102c:	0062102b 	sltu	v0,v1,v0
    1030:	1040000b 	beqz	v0,1060 <inflate_stored+0x100>
    1034:	00000000 	nop
    1038:	8e420014 	lw	v0,20(s2)
    103c:	00000000 	nop
    1040:	00431021 	addu	v0,v0,v1
    1044:	90420000 	lbu	v0,0(v0)
    1048:	00000000 	nop
    104c:	02021004 	sllv	v0,v0,s0
    1050:	02228825 	or	s1,s1,v0
    1054:	24620001 	addiu	v0,v1,1
    1058:	0800041d 	j	1074 <inflate_stored+0x114>
			1058: R_MIPS_26	.text
    105c:	ae420020 	sw	v0,32(s2)
    1060:	0c00004b 	jal	12c <fill_inbuf>
			1060: R_MIPS_26	.text
    1064:	02402021 	move	a0,s2
    1068:	304200ff 	andi	v0,v0,0xff
    106c:	02021004 	sllv	v0,v0,s0
    1070:	02228825 	or	s1,s1,v0
    1074:	26100008 	addiu	s0,s0,8
    1078:	2e020010 	sltiu	v0,s0,16
    107c:	1440ffe8 	bnez	v0,1020 <inflate_stored+0xc0>
    1080:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:640
  if (n != (unsigned)((~b) & 0xffff))
    1084:	00111027 	nor	v0,zero,s1
    1088:	3042ffff 	andi	v0,v0,0xffff
    108c:	16620036 	bne	s3,v0,1168 <inflate_stored+0x208>
    1090:	24030001 	li	v1,1
/home/mips/lx4180/fs/../lib/inflate2.c:642
    return 1;                   /* error in compressed data */
  DUMPBITS(16)
    1094:	00118c02 	srl	s1,s1,0x10
/home/mips/lx4180/fs/../lib/inflate2.c:646


  /* read and output the compressed data */
  while (n--)
    1098:	2673ffff 	addiu	s3,s3,-1
    109c:	2402ffff 	li	v0,-1
    10a0:	1262002d 	beq	s3,v0,1158 <inflate_stored+0x1f8>
    10a4:	2610fff0 	addiu	s0,s0,-16
    10a8:	34168000 	li	s6,0x8000
    10ac:	2415ffff 	li	s5,-1
/home/mips/lx4180/fs/../lib/inflate2.c:648
  {
    NEEDBITS(8)
    10b0:	2e020008 	sltiu	v0,s0,8
    10b4:	1040001a 	beqz	v0,1120 <inflate_stored+0x1c0>
    10b8:	00000000 	nop
    10bc:	8e430020 	lw	v1,32(s2)
    10c0:	8e42001c 	lw	v0,28(s2)
    10c4:	00000000 	nop
    10c8:	0062102b 	sltu	v0,v1,v0
    10cc:	1040000b 	beqz	v0,10fc <inflate_stored+0x19c>
    10d0:	00000000 	nop
    10d4:	8e420014 	lw	v0,20(s2)
    10d8:	00000000 	nop
    10dc:	00431021 	addu	v0,v0,v1
    10e0:	90420000 	lbu	v0,0(v0)
    10e4:	00000000 	nop
    10e8:	02021004 	sllv	v0,v0,s0
    10ec:	02228825 	or	s1,s1,v0
    10f0:	24620001 	addiu	v0,v1,1
    10f4:	08000444 	j	1110 <inflate_stored+0x1b0>
			10f4: R_MIPS_26	.text
    10f8:	ae420020 	sw	v0,32(s2)
    10fc:	0c00004b 	jal	12c <fill_inbuf>
			10fc: R_MIPS_26	.text
    1100:	02402021 	move	a0,s2
    1104:	304200ff 	andi	v0,v0,0xff
    1108:	02021004 	sllv	v0,v0,s0
    110c:	02228825 	or	s1,s1,v0
    1110:	26100008 	addiu	s0,s0,8
    1114:	2e020008 	sltiu	v0,s0,8
    1118:	1440ffe8 	bnez	v0,10bc <inflate_stored+0x15c>
    111c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:649
    slide[w++] = (uch)b;
    1120:	8e420018 	lw	v0,24(s2)
    1124:	00000000 	nop
    1128:	00541021 	addu	v0,v0,s4
    112c:	26940001 	addiu	s4,s4,1
/home/mips/lx4180/fs/../lib/inflate2.c:650
    if (w == WSIZE)
    1130:	16960005 	bne	s4,s6,1148 <inflate_stored+0x1e8>
    1134:	a0510000 	sb	s1,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:652
    {
      flush_output(w);
    1138:	ae540024 	sw	s4,36(s2)
    113c:	0c00007f 	jal	1fc <flush_window>
			113c: R_MIPS_26	.text
    1140:	02402021 	move	a0,s2
/home/mips/lx4180/fs/../lib/inflate2.c:653
      w = 0;
    1144:	0000a021 	move	s4,zero
/home/mips/lx4180/fs/../lib/inflate2.c:655
    }
    DUMPBITS(8)
    1148:	00118a02 	srl	s1,s1,0x8
    114c:	2673ffff 	addiu	s3,s3,-1
    1150:	1675ffd7 	bne	s3,s5,10b0 <inflate_stored+0x150>
    1154:	2610fff8 	addiu	s0,s0,-8
/home/mips/lx4180/fs/../lib/inflate2.c:660
  }


  /* restore the globals from the locals */
  wp = w;                       /* restore global window pointer */
    1158:	ae540024 	sw	s4,36(s2)
/home/mips/lx4180/fs/../lib/inflate2.c:661
  bb = b;                       /* restore global bit buffer */
    115c:	ae510038 	sw	s1,56(s2)
/home/mips/lx4180/fs/../lib/inflate2.c:662
  bk = k;
    1160:	ae50003c 	sw	s0,60(s2)
/home/mips/lx4180/fs/../lib/inflate2.c:665

  DEBG(">");
  return 0;
    1164:	00001821 	move	v1,zero
/home/mips/lx4180/fs/../lib/inflate2.c:666
}
    1168:	00601021 	move	v0,v1
    116c:	8fbf002c 	lw	ra,44(sp)
    1170:	8fb60028 	lw	s6,40(sp)
    1174:	8fb50024 	lw	s5,36(sp)
    1178:	8fb40020 	lw	s4,32(sp)
    117c:	8fb3001c 	lw	s3,28(sp)
    1180:	8fb20018 	lw	s2,24(sp)
    1184:	8fb10014 	lw	s1,20(sp)
    1188:	8fb00010 	lw	s0,16(sp)
    118c:	03e00008 	jr	ra
    1190:	27bd0030 	addiu	sp,sp,48

00001194 <inflate_fixed>:
inflate_fixed():
/home/mips/lx4180/fs/../lib/inflate2.c:675



STATIC int inflate_fixed(zloc)
struct s_zloc *zloc;
/* decompress an inflated type 1 (fixed Huffman codes) block.  We should
   either replace this with a custom decoder, or at least precompute the
   Huffman tables. */
{
    1194:	27bdffc0 	addiu	sp,sp,-64
    1198:	afbf0038 	sw	ra,56(sp)
    119c:	afb10034 	sw	s1,52(sp)
    11a0:	afb00030 	sw	s0,48(sp)
    11a4:	00808821 	move	s1,a0
/home/mips/lx4180/fs/../lib/inflate2.c:686
  int i;                  /* temporary variable */
  struct huft *tl;        /* literal/length code table */
  struct huft *td;        /* distance code table */
  int bl;                 /* lookup bits for tl */
  int bd;                 /* lookup bits for td */
  static unsigned l[288]; /* length list for huft_build */

DEBG("<fix");

  /* set up literal table */
  for (i = 0; i < 144; i++)
    11a8:	00008021 	move	s0,zero
    11ac:	3c040000 	lui	a0,0x0
			11ac: R_MIPS_HI16	.bss
    11b0:	24840480 	addiu	a0,a0,1152
			11b0: R_MIPS_LO16	.bss
    11b4:	24030008 	li	v1,8
/home/mips/lx4180/fs/../lib/inflate2.c:687
    l[i] = 8;
    11b8:	00101080 	sll	v0,s0,0x2
    11bc:	00441021 	addu	v0,v0,a0
    11c0:	ac430000 	sw	v1,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:686
    11c4:	26100001 	addiu	s0,s0,1
    11c8:	2a020090 	slti	v0,s0,144
    11cc:	1440fffb 	bnez	v0,11bc <inflate_fixed+0x28>
    11d0:	00101080 	sll	v0,s0,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:688
  for (; i < 256; i++)
    11d4:	2a020100 	slti	v0,s0,256
    11d8:	1040000c 	beqz	v0,120c <inflate_fixed+0x78>
    11dc:	2a020118 	slti	v0,s0,280
    11e0:	3c040000 	lui	a0,0x0
			11e0: R_MIPS_HI16	.bss
    11e4:	24840480 	addiu	a0,a0,1152
			11e4: R_MIPS_LO16	.bss
    11e8:	24030009 	li	v1,9
/home/mips/lx4180/fs/../lib/inflate2.c:689
    l[i] = 9;
    11ec:	00101080 	sll	v0,s0,0x2
    11f0:	00441021 	addu	v0,v0,a0
    11f4:	ac430000 	sw	v1,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:688
    11f8:	26100001 	addiu	s0,s0,1
    11fc:	2a020100 	slti	v0,s0,256
    1200:	1440fffb 	bnez	v0,11f0 <inflate_fixed+0x5c>
    1204:	00101080 	sll	v0,s0,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:690
  for (; i < 280; i++)
    1208:	2a020118 	slti	v0,s0,280
    120c:	1040000c 	beqz	v0,1240 <inflate_fixed+0xac>
    1210:	2a020120 	slti	v0,s0,288
    1214:	3c040000 	lui	a0,0x0
			1214: R_MIPS_HI16	.bss
    1218:	24840480 	addiu	a0,a0,1152
			1218: R_MIPS_LO16	.bss
    121c:	24030007 	li	v1,7
/home/mips/lx4180/fs/../lib/inflate2.c:691
    l[i] = 7;
    1220:	00101080 	sll	v0,s0,0x2
    1224:	00441021 	addu	v0,v0,a0
    1228:	ac430000 	sw	v1,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:690
    122c:	26100001 	addiu	s0,s0,1
    1230:	2a020118 	slti	v0,s0,280
    1234:	1440fffb 	bnez	v0,1224 <inflate_fixed+0x90>
    1238:	00101080 	sll	v0,s0,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:692
  for (; i < 288; i++)          /* make a complete, but wrong code set */
    123c:	2a020120 	slti	v0,s0,288
    1240:	1040000a 	beqz	v0,126c <inflate_fixed+0xd8>
    1244:	24030008 	li	v1,8
    1248:	3c040000 	lui	a0,0x0
			1248: R_MIPS_HI16	.bss
    124c:	24840480 	addiu	a0,a0,1152
			124c: R_MIPS_LO16	.bss
/home/mips/lx4180/fs/../lib/inflate2.c:693
    l[i] = 8;
    1250:	00101080 	sll	v0,s0,0x2
    1254:	00441021 	addu	v0,v0,a0
    1258:	ac430000 	sw	v1,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:692
    125c:	26100001 	addiu	s0,s0,1
    1260:	2a020120 	slti	v0,s0,288
    1264:	1440fffb 	bnez	v0,1254 <inflate_fixed+0xc0>
    1268:	00101080 	sll	v0,s0,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:694
  bl = 7;
    126c:	24020007 	li	v0,7
    1270:	afa20024 	sw	v0,36(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:695
  if ((i = huft_build(zloc, l, 288, 257, cplens, cplext, &tl, &bl)) != 0)
    1274:	3c020000 	lui	v0,0x0
			1274: R_MIPS_HI16	.data
    1278:	24420064 	addiu	v0,v0,100
			1278: R_MIPS_LO16	.data
    127c:	afa20010 	sw	v0,16(sp)
    1280:	3c020000 	lui	v0,0x0
			1280: R_MIPS_HI16	.data
    1284:	244200a4 	addiu	v0,v0,164
			1284: R_MIPS_LO16	.data
    1288:	afa20014 	sw	v0,20(sp)
    128c:	27a20020 	addiu	v0,sp,32
    1290:	afa20018 	sw	v0,24(sp)
    1294:	27a20024 	addiu	v0,sp,36
    1298:	afa2001c 	sw	v0,28(sp)
    129c:	02202021 	move	a0,s1
    12a0:	3c050000 	lui	a1,0x0
			12a0: R_MIPS_HI16	.bss
    12a4:	24a50480 	addiu	a1,a1,1152
			12a4: R_MIPS_LO16	.bss
    12a8:	24060120 	li	a2,288
    12ac:	0c0000ae 	jal	2b8 <huft_build>
			12ac: R_MIPS_26	.text
    12b0:	24070101 	li	a3,257
    12b4:	14400038 	bnez	v0,1398 <inflate_fixed+0x204>
    12b8:	00401821 	move	v1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:700
    return i;


  /* set up distance table */
  for (i = 0; i < 30; i++)      /* make an incomplete code set */
    12bc:	00008021 	move	s0,zero
    12c0:	3c040000 	lui	a0,0x0
			12c0: R_MIPS_HI16	.bss
    12c4:	24840480 	addiu	a0,a0,1152
			12c4: R_MIPS_LO16	.bss
    12c8:	24030005 	li	v1,5
/home/mips/lx4180/fs/../lib/inflate2.c:701
    l[i] = 5;
    12cc:	00101080 	sll	v0,s0,0x2
    12d0:	00441021 	addu	v0,v0,a0
    12d4:	ac430000 	sw	v1,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:700
    12d8:	26100001 	addiu	s0,s0,1
    12dc:	2a02001e 	slti	v0,s0,30
    12e0:	1440fffb 	bnez	v0,12d0 <inflate_fixed+0x13c>
    12e4:	00101080 	sll	v0,s0,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:702
  bd = 5;
    12e8:	24020005 	li	v0,5
    12ec:	afa2002c 	sw	v0,44(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:703
  if ((i = huft_build(zloc, l, 30, 0, cpdist, cpdext, &td, &bd)) > 1)
    12f0:	3c020000 	lui	v0,0x0
			12f0: R_MIPS_HI16	.data
    12f4:	244200e4 	addiu	v0,v0,228
			12f4: R_MIPS_LO16	.data
    12f8:	afa20010 	sw	v0,16(sp)
    12fc:	3c020000 	lui	v0,0x0
			12fc: R_MIPS_HI16	.data
    1300:	24420120 	addiu	v0,v0,288
			1300: R_MIPS_LO16	.data
    1304:	afa20014 	sw	v0,20(sp)
    1308:	27a20028 	addiu	v0,sp,40
    130c:	afa20018 	sw	v0,24(sp)
    1310:	27a2002c 	addiu	v0,sp,44
    1314:	afa2001c 	sw	v0,28(sp)
    1318:	02202021 	move	a0,s1
    131c:	3c050000 	lui	a1,0x0
			131c: R_MIPS_HI16	.bss
    1320:	24a50480 	addiu	a1,a1,1152
			1320: R_MIPS_LO16	.bss
    1324:	2406001e 	li	a2,30
    1328:	0c0000ae 	jal	2b8 <huft_build>
			1328: R_MIPS_26	.text
    132c:	00003821 	move	a3,zero
    1330:	00408021 	move	s0,v0
    1334:	28420002 	slti	v0,v0,2
    1338:	14400006 	bnez	v0,1354 <inflate_fixed+0x1c0>
    133c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:705
  {
    huft_free(zloc, tl);
    1340:	8fa50020 	lw	a1,32(sp)
    1344:	0c000249 	jal	924 <huft_free>
			1344: R_MIPS_26	.text
    1348:	02202021 	move	a0,s1
/home/mips/lx4180/fs/../lib/inflate2.c:708

    DEBG(">");
    return i;
    134c:	080004e6 	j	1398 <inflate_fixed+0x204>
			134c: R_MIPS_26	.text
    1350:	02001821 	move	v1,s0
/home/mips/lx4180/fs/../lib/inflate2.c:713
  }


  /* decompress until an end-of-block code */
  if (inflate_codes(zloc, tl, td, bl, bd))
    1354:	8fa2002c 	lw	v0,44(sp)
    1358:	00000000 	nop
    135c:	afa20010 	sw	v0,16(sp)
    1360:	8fa50020 	lw	a1,32(sp)
    1364:	8fa60028 	lw	a2,40(sp)
    1368:	8fa70024 	lw	a3,36(sp)
    136c:	0c000259 	jal	964 <inflate_codes>
			136c: R_MIPS_26	.text
    1370:	02202021 	move	a0,s1
    1374:	14400008 	bnez	v0,1398 <inflate_fixed+0x204>
    1378:	24030001 	li	v1,1
/home/mips/lx4180/fs/../lib/inflate2.c:718
    return 1;


  /* free the decoding tables, return */
  huft_free(zloc, tl);
    137c:	8fa50020 	lw	a1,32(sp)
    1380:	0c000249 	jal	924 <huft_free>
			1380: R_MIPS_26	.text
    1384:	02202021 	move	a0,s1
/home/mips/lx4180/fs/../lib/inflate2.c:719
  huft_free(zloc, td);
    1388:	8fa50028 	lw	a1,40(sp)
    138c:	0c000249 	jal	924 <huft_free>
			138c: R_MIPS_26	.text
    1390:	02202021 	move	a0,s1
/home/mips/lx4180/fs/../lib/inflate2.c:720
  return 0;
    1394:	00001821 	move	v1,zero
/home/mips/lx4180/fs/../lib/inflate2.c:721
}
    1398:	00601021 	move	v0,v1
    139c:	8fbf0038 	lw	ra,56(sp)
    13a0:	8fb10034 	lw	s1,52(sp)
    13a4:	8fb00030 	lw	s0,48(sp)
    13a8:	03e00008 	jr	ra
    13ac:	27bd0040 	addiu	sp,sp,64

000013b0 <inflate_dynamic>:
inflate_dynamic():
/home/mips/lx4180/fs/../lib/inflate2.c:728



STATIC int inflate_dynamic(zloc)
struct s_zloc *zloc;
/* decompress an inflated type 2 (dynamic Huffman codes) block. */
{
    13b0:	27bdffa0 	addiu	sp,sp,-96
    13b4:	afbf005c 	sw	ra,92(sp)
    13b8:	afbe0058 	sw	s8,88(sp)
    13bc:	afb70054 	sw	s7,84(sp)
    13c0:	afb60050 	sw	s6,80(sp)
    13c4:	afb5004c 	sw	s5,76(sp)
    13c8:	afb40048 	sw	s4,72(sp)
    13cc:	afb30044 	sw	s3,68(sp)
    13d0:	afb20040 	sw	s2,64(sp)
    13d4:	afb1003c 	sw	s1,60(sp)
    13d8:	afb00038 	sw	s0,56(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:752
  int i;                /* temporary variables */
  unsigned j;
  unsigned l;           /* last length */
  unsigned m;           /* mask for bit lengths table */
  unsigned n;           /* number of lengths to get */
  struct huft *tl;      /* literal/length code table */
  struct huft *td;      /* distance code table */
  int bl;               /* lookup bits for tl */
  int bd;               /* lookup bits for td */
  unsigned nb;          /* number of bit length codes */
  unsigned nl;          /* number of literal/length codes */
  unsigned nd;          /* number of distance codes */
#ifdef PKZIP_BUG_WORKAROUND
  static unsigned ll[288+32];  /* literal/length and distance code lengths */
#else
  static unsigned ll[286+30];  /* literal/length and distance code lengths */
#endif
  register ulg b;       /* bit buffer */
  register unsigned k;  /* number of bits in bit buffer */

DEBG("<dyn");

  /* make local bit buffer */
  b = bb;
    13dc:	8c910038 	lw	s1,56(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:753
  k = bk;
    13e0:	8c90003c 	lw	s0,60(a0)
    13e4:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:757


  /* read in table lengths */
  NEEDBITS(5)
    13e8:	2e020005 	sltiu	v0,s0,5
    13ec:	1040001a 	beqz	v0,1458 <inflate_dynamic+0xa8>
    13f0:	00809021 	move	s2,a0
    13f4:	8e430020 	lw	v1,32(s2)
    13f8:	8e42001c 	lw	v0,28(s2)
    13fc:	00000000 	nop
    1400:	0062102b 	sltu	v0,v1,v0
    1404:	1040000b 	beqz	v0,1434 <inflate_dynamic+0x84>
    1408:	00000000 	nop
    140c:	8e420014 	lw	v0,20(s2)
    1410:	00000000 	nop
    1414:	00431021 	addu	v0,v0,v1
    1418:	90420000 	lbu	v0,0(v0)
    141c:	00000000 	nop
    1420:	02021004 	sllv	v0,v0,s0
    1424:	02228825 	or	s1,s1,v0
    1428:	24620001 	addiu	v0,v1,1
    142c:	08000512 	j	1448 <inflate_dynamic+0x98>
			142c: R_MIPS_26	.text
    1430:	ae420020 	sw	v0,32(s2)
    1434:	0c00004b 	jal	12c <fill_inbuf>
			1434: R_MIPS_26	.text
    1438:	02402021 	move	a0,s2
    143c:	304200ff 	andi	v0,v0,0xff
    1440:	02021004 	sllv	v0,v0,s0
    1444:	02228825 	or	s1,s1,v0
    1448:	26100008 	addiu	s0,s0,8
    144c:	2e020005 	sltiu	v0,s0,5
    1450:	1440ffe8 	bnez	v0,13f4 <inflate_dynamic+0x44>
    1454:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:758
  nl = 257 + ((unsigned)b & 0x1f);      /* number of literal/length codes */
    1458:	3235001f 	andi	s5,s1,0x1f
    145c:	26b50101 	addiu	s5,s5,257
/home/mips/lx4180/fs/../lib/inflate2.c:759
  DUMPBITS(5)
    1460:	2610fffb 	addiu	s0,s0,-5
/home/mips/lx4180/fs/../lib/inflate2.c:760
  NEEDBITS(5)
    1464:	2e020005 	sltiu	v0,s0,5
    1468:	1040001a 	beqz	v0,14d4 <inflate_dynamic+0x124>
    146c:	00118942 	srl	s1,s1,0x5
    1470:	8e430020 	lw	v1,32(s2)
    1474:	8e42001c 	lw	v0,28(s2)
    1478:	00000000 	nop
    147c:	0062102b 	sltu	v0,v1,v0
    1480:	1040000b 	beqz	v0,14b0 <inflate_dynamic+0x100>
    1484:	00000000 	nop
    1488:	8e420014 	lw	v0,20(s2)
    148c:	00000000 	nop
    1490:	00431021 	addu	v0,v0,v1
    1494:	90420000 	lbu	v0,0(v0)
    1498:	00000000 	nop
    149c:	02021004 	sllv	v0,v0,s0
    14a0:	02228825 	or	s1,s1,v0
    14a4:	24620001 	addiu	v0,v1,1
    14a8:	08000531 	j	14c4 <inflate_dynamic+0x114>
			14a8: R_MIPS_26	.text
    14ac:	ae420020 	sw	v0,32(s2)
    14b0:	0c00004b 	jal	12c <fill_inbuf>
			14b0: R_MIPS_26	.text
    14b4:	02402021 	move	a0,s2
    14b8:	304200ff 	andi	v0,v0,0xff
    14bc:	02021004 	sllv	v0,v0,s0
    14c0:	02228825 	or	s1,s1,v0
    14c4:	26100008 	addiu	s0,s0,8
    14c8:	2e020005 	sltiu	v0,s0,5
    14cc:	1440ffe8 	bnez	v0,1470 <inflate_dynamic+0xc0>
    14d0:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:761
  nd = 1 + ((unsigned)b & 0x1f);        /* number of distance codes */
    14d4:	3237001f 	andi	s7,s1,0x1f
    14d8:	26f70001 	addiu	s7,s7,1
/home/mips/lx4180/fs/../lib/inflate2.c:762
  DUMPBITS(5)
    14dc:	2610fffb 	addiu	s0,s0,-5
/home/mips/lx4180/fs/../lib/inflate2.c:763
  NEEDBITS(4)
    14e0:	2e020004 	sltiu	v0,s0,4
    14e4:	1040001a 	beqz	v0,1550 <inflate_dynamic+0x1a0>
    14e8:	00118942 	srl	s1,s1,0x5
    14ec:	8e430020 	lw	v1,32(s2)
    14f0:	8e42001c 	lw	v0,28(s2)
    14f4:	00000000 	nop
    14f8:	0062102b 	sltu	v0,v1,v0
    14fc:	1040000b 	beqz	v0,152c <inflate_dynamic+0x17c>
    1500:	00000000 	nop
    1504:	8e420014 	lw	v0,20(s2)
    1508:	00000000 	nop
    150c:	00431021 	addu	v0,v0,v1
    1510:	90420000 	lbu	v0,0(v0)
    1514:	00000000 	nop
    1518:	02021004 	sllv	v0,v0,s0
    151c:	02228825 	or	s1,s1,v0
    1520:	24620001 	addiu	v0,v1,1
    1524:	08000550 	j	1540 <inflate_dynamic+0x190>
			1524: R_MIPS_26	.text
    1528:	ae420020 	sw	v0,32(s2)
    152c:	0c00004b 	jal	12c <fill_inbuf>
			152c: R_MIPS_26	.text
    1530:	02402021 	move	a0,s2
    1534:	304200ff 	andi	v0,v0,0xff
    1538:	02021004 	sllv	v0,v0,s0
    153c:	02228825 	or	s1,s1,v0
    1540:	26100008 	addiu	s0,s0,8
    1544:	2e020004 	sltiu	v0,s0,4
    1548:	1440ffe8 	bnez	v0,14ec <inflate_dynamic+0x13c>
    154c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:764
  nb = 4 + ((unsigned)b & 0xf);         /* number of bit length codes */
    1550:	3234000f 	andi	s4,s1,0xf
    1554:	26940004 	addiu	s4,s4,4
/home/mips/lx4180/fs/../lib/inflate2.c:765
  DUMPBITS(4)
    1558:	00118902 	srl	s1,s1,0x4
/home/mips/lx4180/fs/../lib/inflate2.c:769
#ifdef PKZIP_BUG_WORKAROUND
  if (nl > 288 || nd > 32)
#else
  if (nl > 286 || nd > 30)
    155c:	2ea2011f 	sltiu	v0,s5,287
    1560:	10400188 	beqz	v0,1b84 <inflate_dynamic+0x7d4>
    1564:	2610fffc 	addiu	s0,s0,-4
    1568:	2ee2001f 	sltiu	v0,s7,31
    156c:	1040018e 	beqz	v0,1ba8 <inflate_dynamic+0x7f8>
    1570:	24030001 	li	v1,1
/home/mips/lx4180/fs/../lib/inflate2.c:776
#endif
    return 1;                   /* bad lengths */

DEBG("dyn1 ");

  /* read in bit-length-code lengths */
  for (j = 0; j < nb; j++)
    1574:	1280002b 	beqz	s4,1624 <inflate_dynamic+0x274>
    1578:	00009821 	move	s3,zero
/home/mips/lx4180/fs/../lib/inflate2.c:778
  {
    NEEDBITS(3)
    157c:	2e020003 	sltiu	v0,s0,3
    1580:	1040001a 	beqz	v0,15ec <inflate_dynamic+0x23c>
    1584:	00131080 	sll	v0,s3,0x2
    1588:	8e430020 	lw	v1,32(s2)
    158c:	8e42001c 	lw	v0,28(s2)
    1590:	00000000 	nop
    1594:	0062102b 	sltu	v0,v1,v0
    1598:	1040000b 	beqz	v0,15c8 <inflate_dynamic+0x218>
    159c:	00000000 	nop
    15a0:	8e420014 	lw	v0,20(s2)
    15a4:	00000000 	nop
    15a8:	00431021 	addu	v0,v0,v1
    15ac:	90420000 	lbu	v0,0(v0)
    15b0:	00000000 	nop
    15b4:	02021004 	sllv	v0,v0,s0
    15b8:	02228825 	or	s1,s1,v0
    15bc:	24620001 	addiu	v0,v1,1
    15c0:	08000577 	j	15dc <inflate_dynamic+0x22c>
			15c0: R_MIPS_26	.text
    15c4:	ae420020 	sw	v0,32(s2)
    15c8:	0c00004b 	jal	12c <fill_inbuf>
			15c8: R_MIPS_26	.text
    15cc:	02402021 	move	a0,s2
    15d0:	304200ff 	andi	v0,v0,0xff
    15d4:	02021004 	sllv	v0,v0,s0
    15d8:	02228825 	or	s1,s1,v0
    15dc:	26100008 	addiu	s0,s0,8
    15e0:	2e020003 	sltiu	v0,s0,3
    15e4:	1440ffe8 	bnez	v0,1588 <inflate_dynamic+0x1d8>
    15e8:	00131080 	sll	v0,s3,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:779
    ll[border[j]] = (unsigned)b & 7;
    15ec:	3c010000 	lui	at,0x0
			15ec: R_MIPS_HI16	.data
    15f0:	00220821 	addu	at,at,v0
    15f4:	8c220018 	lw	v0,24(at)
			15f4: R_MIPS_LO16	.data
    15f8:	00000000 	nop
    15fc:	00021080 	sll	v0,v0,0x2
    1600:	32230007 	andi	v1,s1,0x7
    1604:	3c010000 	lui	at,0x0
			1604: R_MIPS_HI16	.bss
    1608:	00220821 	addu	at,at,v0
    160c:	ac230900 	sw	v1,2304(at)
			160c: R_MIPS_LO16	.bss
/home/mips/lx4180/fs/../lib/inflate2.c:780
    DUMPBITS(3)
    1610:	001188c2 	srl	s1,s1,0x3
/home/mips/lx4180/fs/../lib/inflate2.c:776
    1614:	26730001 	addiu	s3,s3,1
    1618:	0274102b 	sltu	v0,s3,s4
    161c:	1440ffd7 	bnez	v0,157c <inflate_dynamic+0x1cc>
    1620:	2610fffd 	addiu	s0,s0,-3
/home/mips/lx4180/fs/../lib/inflate2.c:782
  }
  for (; j < 19; j++)
    1624:	2e620013 	sltiu	v0,s3,19
    1628:	10400011 	beqz	v0,1670 <inflate_dynamic+0x2c0>
    162c:	24020007 	li	v0,7
    1630:	3c040000 	lui	a0,0x0
			1630: R_MIPS_HI16	.data
    1634:	24840018 	addiu	a0,a0,24
			1634: R_MIPS_LO16	.data
    1638:	3c030000 	lui	v1,0x0
			1638: R_MIPS_HI16	.bss
    163c:	24630900 	addiu	v1,v1,2304
			163c: R_MIPS_LO16	.bss
/home/mips/lx4180/fs/../lib/inflate2.c:783
    ll[border[j]] = 0;
    1640:	00131080 	sll	v0,s3,0x2
    1644:	00441021 	addu	v0,v0,a0
    1648:	8c420000 	lw	v0,0(v0)
    164c:	00000000 	nop
    1650:	00021080 	sll	v0,v0,0x2
    1654:	00431021 	addu	v0,v0,v1
    1658:	ac400000 	sw	zero,0(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:782
    165c:	26730001 	addiu	s3,s3,1
    1660:	2e620013 	sltiu	v0,s3,19
    1664:	1440fff7 	bnez	v0,1644 <inflate_dynamic+0x294>
    1668:	00131080 	sll	v0,s3,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:788

DEBG("dyn2 ");

  /* build decoding table for trees--single level, 7 bit lookup */
  bl = 7;
    166c:	24020007 	li	v0,7
    1670:	afa20024 	sw	v0,36(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:789
  if ((i = huft_build(zloc, ll, 19, 19, NULL, NULL, &tl, &bl)) != 0)
    1674:	afa00010 	sw	zero,16(sp)
    1678:	afa00014 	sw	zero,20(sp)
    167c:	27a20020 	addiu	v0,sp,32
    1680:	afa20018 	sw	v0,24(sp)
    1684:	27a20024 	addiu	v0,sp,36
    1688:	afa2001c 	sw	v0,28(sp)
    168c:	02402021 	move	a0,s2
    1690:	3c050000 	lui	a1,0x0
			1690: R_MIPS_HI16	.bss
    1694:	24a50900 	addiu	a1,a1,2304
			1694: R_MIPS_LO16	.bss
    1698:	24060013 	li	a2,19
    169c:	0c0000ae 	jal	2b8 <huft_build>
			169c: R_MIPS_26	.text
    16a0:	24070013 	li	a3,19
    16a4:	10400006 	beqz	v0,16c0 <inflate_dynamic+0x310>
    16a8:	0040a021 	move	s4,v0
/home/mips/lx4180/fs/../lib/inflate2.c:791
  {
    if (i == 1)
    16ac:	24020001 	li	v0,1
    16b0:	16820126 	bne	s4,v0,1b4c <inflate_dynamic+0x79c>
    16b4:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:793
      huft_free(zloc, tl);
    return i;                   /* incomplete code set */
    16b8:	080006d0 	j	1b40 <inflate_dynamic+0x790>
			16b8: R_MIPS_26	.text
    16bc:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:799
  }

DEBG("dyn3 ");

  /* read in literal and distance code lengths */
  n = nl + nd;
    16c0:	02b7f021 	addu	s8,s5,s7
/home/mips/lx4180/fs/../lib/inflate2.c:800
  m = mask_bits[bl];
    16c4:	8fa20024 	lw	v0,36(sp)
    16c8:	00000000 	nop
    16cc:	00021040 	sll	v0,v0,0x1
    16d0:	3c010000 	lui	at,0x0
			16d0: R_MIPS_HI16	.data
    16d4:	00220821 	addu	at,at,v0
    16d8:	9422015c 	lhu	v0,348(at)
			16d8: R_MIPS_LO16	.data
    16dc:	00000000 	nop
    16e0:	afa20030 	sw	v0,48(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:801
  i = l = 0;
    16e4:	0000b021 	move	s6,zero
/home/mips/lx4180/fs/../lib/inflate2.c:802
  while ((unsigned)i < n)
    16e8:	13c000d1 	beqz	s8,1a30 <inflate_dynamic+0x680>
    16ec:	0000a021 	move	s4,zero
/home/mips/lx4180/fs/../lib/inflate2.c:804
  {
    NEEDBITS((unsigned)bl)
    16f0:	8fa20024 	lw	v0,36(sp)
    16f4:	00000000 	nop
    16f8:	0202102b 	sltu	v0,s0,v0
    16fc:	1040001c 	beqz	v0,1770 <inflate_dynamic+0x3c0>
    1700:	00000000 	nop
    1704:	8e430020 	lw	v1,32(s2)
    1708:	8e42001c 	lw	v0,28(s2)
    170c:	00000000 	nop
    1710:	0062102b 	sltu	v0,v1,v0
    1714:	1040000b 	beqz	v0,1744 <inflate_dynamic+0x394>
    1718:	00000000 	nop
    171c:	8e420014 	lw	v0,20(s2)
    1720:	00000000 	nop
    1724:	00431021 	addu	v0,v0,v1
    1728:	90420000 	lbu	v0,0(v0)
    172c:	00000000 	nop
    1730:	02021004 	sllv	v0,v0,s0
    1734:	02228825 	or	s1,s1,v0
    1738:	24620001 	addiu	v0,v1,1
    173c:	080005d6 	j	1758 <inflate_dynamic+0x3a8>
			173c: R_MIPS_26	.text
    1740:	ae420020 	sw	v0,32(s2)
    1744:	0c00004b 	jal	12c <fill_inbuf>
			1744: R_MIPS_26	.text
    1748:	02402021 	move	a0,s2
    174c:	304200ff 	andi	v0,v0,0xff
    1750:	02021004 	sllv	v0,v0,s0
    1754:	02228825 	or	s1,s1,v0
    1758:	26100008 	addiu	s0,s0,8
    175c:	8fa20024 	lw	v0,36(sp)
    1760:	00000000 	nop
    1764:	0202102b 	sltu	v0,s0,v0
    1768:	1440ffe6 	bnez	v0,1704 <inflate_dynamic+0x354>
    176c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:805
    j = (td = tl + ((unsigned)b & m))->b;
    1770:	8fa30030 	lw	v1,48(sp)
    1774:	00000000 	nop
    1778:	02231024 	and	v0,s1,v1
    177c:	000210c0 	sll	v0,v0,0x3
    1780:	8fa30020 	lw	v1,32(sp)
    1784:	00000000 	nop
    1788:	00431021 	addu	v0,v0,v1
    178c:	afa20028 	sw	v0,40(sp)
    1790:	90530001 	lbu	s3,1(v0)
    1794:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:806
    DUMPBITS(j)
    1798:	02718806 	srlv	s1,s1,s3
    179c:	02138023 	subu	s0,s0,s3
/home/mips/lx4180/fs/../lib/inflate2.c:807
    j = td->v.n;
    17a0:	94530004 	lhu	s3,4(v0)
    17a4:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:808
    if (j < 16)                 /* length of code in bits (0..15) */
    17a8:	2e620010 	sltiu	v0,s3,16
    17ac:	10400008 	beqz	v0,17d0 <inflate_dynamic+0x420>
    17b0:	24020010 	li	v0,16
/home/mips/lx4180/fs/../lib/inflate2.c:809
      ll[i++] = l = j;          /* save last length in l */
    17b4:	00141080 	sll	v0,s4,0x2
    17b8:	0260b021 	move	s6,s3
    17bc:	3c010000 	lui	at,0x0
			17bc: R_MIPS_HI16	.bss
    17c0:	00220821 	addu	at,at,v0
    17c4:	ac330900 	sw	s3,2304(at)
			17c4: R_MIPS_LO16	.bss
    17c8:	08000689 	j	1a24 <inflate_dynamic+0x674>
			17c8: R_MIPS_26	.text
    17cc:	26940001 	addiu	s4,s4,1
/home/mips/lx4180/fs/../lib/inflate2.c:810
    else if (j == 16)           /* repeat last length 3 to 6 times */
    17d0:	16620032 	bne	s3,v0,189c <inflate_dynamic+0x4ec>
    17d4:	24020011 	li	v0,17
/home/mips/lx4180/fs/../lib/inflate2.c:812
    {
      NEEDBITS(2)
    17d8:	2e020002 	sltiu	v0,s0,2
    17dc:	1040001a 	beqz	v0,1848 <inflate_dynamic+0x498>
    17e0:	00000000 	nop
    17e4:	8e430020 	lw	v1,32(s2)
    17e8:	8e42001c 	lw	v0,28(s2)
    17ec:	00000000 	nop
    17f0:	0062102b 	sltu	v0,v1,v0
    17f4:	1040000b 	beqz	v0,1824 <inflate_dynamic+0x474>
    17f8:	00000000 	nop
    17fc:	8e420014 	lw	v0,20(s2)
    1800:	00000000 	nop
    1804:	00431021 	addu	v0,v0,v1
    1808:	90420000 	lbu	v0,0(v0)
    180c:	00000000 	nop
    1810:	02021004 	sllv	v0,v0,s0
    1814:	02228825 	or	s1,s1,v0
    1818:	24620001 	addiu	v0,v1,1
    181c:	0800060e 	j	1838 <inflate_dynamic+0x488>
			181c: R_MIPS_26	.text
    1820:	ae420020 	sw	v0,32(s2)
    1824:	0c00004b 	jal	12c <fill_inbuf>
			1824: R_MIPS_26	.text
    1828:	02402021 	move	a0,s2
    182c:	304200ff 	andi	v0,v0,0xff
    1830:	02021004 	sllv	v0,v0,s0
    1834:	02228825 	or	s1,s1,v0
    1838:	26100008 	addiu	s0,s0,8
    183c:	2e020002 	sltiu	v0,s0,2
    1840:	1440ffe8 	bnez	v0,17e4 <inflate_dynamic+0x434>
    1844:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:813
      j = 3 + ((unsigned)b & 3);
    1848:	32330003 	andi	s3,s1,0x3
    184c:	26730003 	addiu	s3,s3,3
/home/mips/lx4180/fs/../lib/inflate2.c:814
      DUMPBITS(2)
    1850:	00118882 	srl	s1,s1,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:815
      if ((unsigned)i + j > n)
    1854:	02931021 	addu	v0,s4,s3
    1858:	03c2102b 	sltu	v0,s8,v0
    185c:	144000c9 	bnez	v0,1b84 <inflate_dynamic+0x7d4>
    1860:	2610fffe 	addiu	s0,s0,-2
/home/mips/lx4180/fs/../lib/inflate2.c:817
        return 1;
      while (j--)
    1864:	2673ffff 	addiu	s3,s3,-1
    1868:	2402ffff 	li	v0,-1
    186c:	1262006d 	beq	s3,v0,1a24 <inflate_dynamic+0x674>
    1870:	00141080 	sll	v0,s4,0x2
    1874:	3c040000 	lui	a0,0x0
			1874: R_MIPS_HI16	.bss
    1878:	24840900 	addiu	a0,a0,2304
			1878: R_MIPS_LO16	.bss
    187c:	2403ffff 	li	v1,-1
/home/mips/lx4180/fs/../lib/inflate2.c:818
        ll[i++] = l;
    1880:	00441021 	addu	v0,v0,a0
    1884:	ac560000 	sw	s6,0(v0)
    1888:	2673ffff 	addiu	s3,s3,-1
    188c:	12630065 	beq	s3,v1,1a24 <inflate_dynamic+0x674>
    1890:	26940001 	addiu	s4,s4,1
    1894:	08000620 	j	1880 <inflate_dynamic+0x4d0>
			1894: R_MIPS_26	.text
    1898:	00141080 	sll	v0,s4,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:820
    }
    else if (j == 17)           /* 3 to 10 zero length codes */
    189c:	16620032 	bne	s3,v0,1968 <inflate_dynamic+0x5b8>
    18a0:	2e020007 	sltiu	v0,s0,7
/home/mips/lx4180/fs/../lib/inflate2.c:822
    {
      NEEDBITS(3)
    18a4:	2e020003 	sltiu	v0,s0,3
    18a8:	1040001a 	beqz	v0,1914 <inflate_dynamic+0x564>
    18ac:	32330007 	andi	s3,s1,0x7
    18b0:	8e430020 	lw	v1,32(s2)
    18b4:	8e42001c 	lw	v0,28(s2)
    18b8:	00000000 	nop
    18bc:	0062102b 	sltu	v0,v1,v0
    18c0:	1040000b 	beqz	v0,18f0 <inflate_dynamic+0x540>
    18c4:	00000000 	nop
    18c8:	8e420014 	lw	v0,20(s2)
    18cc:	00000000 	nop
    18d0:	00431021 	addu	v0,v0,v1
    18d4:	90420000 	lbu	v0,0(v0)
    18d8:	00000000 	nop
    18dc:	02021004 	sllv	v0,v0,s0
    18e0:	02228825 	or	s1,s1,v0
    18e4:	24620001 	addiu	v0,v1,1
    18e8:	08000641 	j	1904 <inflate_dynamic+0x554>
			18e8: R_MIPS_26	.text
    18ec:	ae420020 	sw	v0,32(s2)
    18f0:	0c00004b 	jal	12c <fill_inbuf>
			18f0: R_MIPS_26	.text
    18f4:	02402021 	move	a0,s2
    18f8:	304200ff 	andi	v0,v0,0xff
    18fc:	02021004 	sllv	v0,v0,s0
    1900:	02228825 	or	s1,s1,v0
    1904:	26100008 	addiu	s0,s0,8
    1908:	2e020003 	sltiu	v0,s0,3
    190c:	1440ffe8 	bnez	v0,18b0 <inflate_dynamic+0x500>
    1910:	32330007 	andi	s3,s1,0x7
/home/mips/lx4180/fs/../lib/inflate2.c:823
      j = 3 + ((unsigned)b & 7);
    1914:	26730003 	addiu	s3,s3,3
/home/mips/lx4180/fs/../lib/inflate2.c:824
      DUMPBITS(3)
    1918:	001188c2 	srl	s1,s1,0x3
/home/mips/lx4180/fs/../lib/inflate2.c:825
      if ((unsigned)i + j > n)
    191c:	02931021 	addu	v0,s4,s3
    1920:	03c2102b 	sltu	v0,s8,v0
    1924:	14400097 	bnez	v0,1b84 <inflate_dynamic+0x7d4>
    1928:	2610fffd 	addiu	s0,s0,-3
/home/mips/lx4180/fs/../lib/inflate2.c:827
        return 1;
      while (j--)
    192c:	2673ffff 	addiu	s3,s3,-1
    1930:	2402ffff 	li	v0,-1
    1934:	1262003b 	beq	s3,v0,1a24 <inflate_dynamic+0x674>
    1938:	0000b021 	move	s6,zero
    193c:	3c040000 	lui	a0,0x0
			193c: R_MIPS_HI16	.bss
    1940:	24840900 	addiu	a0,a0,2304
			1940: R_MIPS_LO16	.bss
    1944:	2403ffff 	li	v1,-1
/home/mips/lx4180/fs/../lib/inflate2.c:828
        ll[i++] = 0;
    1948:	00141080 	sll	v0,s4,0x2
    194c:	00441021 	addu	v0,v0,a0
    1950:	ac400000 	sw	zero,0(v0)
    1954:	2673ffff 	addiu	s3,s3,-1
    1958:	1663fffb 	bne	s3,v1,1948 <inflate_dynamic+0x598>
    195c:	26940001 	addiu	s4,s4,1
/home/mips/lx4180/fs/../lib/inflate2.c:829
      l = 0;
    1960:	08000689 	j	1a24 <inflate_dynamic+0x674>
			1960: R_MIPS_26	.text
    1964:	0000b021 	move	s6,zero
/home/mips/lx4180/fs/../lib/inflate2.c:833
    }
    else                        /* j == 18: 11 to 138 zero length codes */
    {
      NEEDBITS(7)
    1968:	1040001a 	beqz	v0,19d4 <inflate_dynamic+0x624>
    196c:	3233007f 	andi	s3,s1,0x7f
    1970:	8e430020 	lw	v1,32(s2)
    1974:	8e42001c 	lw	v0,28(s2)
    1978:	00000000 	nop
    197c:	0062102b 	sltu	v0,v1,v0
    1980:	1040000b 	beqz	v0,19b0 <inflate_dynamic+0x600>
    1984:	00000000 	nop
    1988:	8e420014 	lw	v0,20(s2)
    198c:	00000000 	nop
    1990:	00431021 	addu	v0,v0,v1
    1994:	90420000 	lbu	v0,0(v0)
    1998:	00000000 	nop
    199c:	02021004 	sllv	v0,v0,s0
    19a0:	02228825 	or	s1,s1,v0
    19a4:	24620001 	addiu	v0,v1,1
    19a8:	08000671 	j	19c4 <inflate_dynamic+0x614>
			19a8: R_MIPS_26	.text
    19ac:	ae420020 	sw	v0,32(s2)
    19b0:	0c00004b 	jal	12c <fill_inbuf>
			19b0: R_MIPS_26	.text
    19b4:	02402021 	move	a0,s2
    19b8:	304200ff 	andi	v0,v0,0xff
    19bc:	02021004 	sllv	v0,v0,s0
    19c0:	02228825 	or	s1,s1,v0
    19c4:	26100008 	addiu	s0,s0,8
    19c8:	2e020007 	sltiu	v0,s0,7
    19cc:	1440ffe8 	bnez	v0,1970 <inflate_dynamic+0x5c0>
    19d0:	3233007f 	andi	s3,s1,0x7f
/home/mips/lx4180/fs/../lib/inflate2.c:834
      j = 11 + ((unsigned)b & 0x7f);
    19d4:	2673000b 	addiu	s3,s3,11
/home/mips/lx4180/fs/../lib/inflate2.c:835
      DUMPBITS(7)
    19d8:	001189c2 	srl	s1,s1,0x7
/home/mips/lx4180/fs/../lib/inflate2.c:836
      if ((unsigned)i + j > n)
    19dc:	02931021 	addu	v0,s4,s3
    19e0:	03c2102b 	sltu	v0,s8,v0
    19e4:	14400067 	bnez	v0,1b84 <inflate_dynamic+0x7d4>
    19e8:	2610fff9 	addiu	s0,s0,-7
/home/mips/lx4180/fs/../lib/inflate2.c:838
        return 1;
      while (j--)
    19ec:	2673ffff 	addiu	s3,s3,-1
    19f0:	2402ffff 	li	v0,-1
    19f4:	1262000b 	beq	s3,v0,1a24 <inflate_dynamic+0x674>
    19f8:	0000b021 	move	s6,zero
    19fc:	3c040000 	lui	a0,0x0
			19fc: R_MIPS_HI16	.bss
    1a00:	24840900 	addiu	a0,a0,2304
			1a00: R_MIPS_LO16	.bss
    1a04:	2403ffff 	li	v1,-1
/home/mips/lx4180/fs/../lib/inflate2.c:839
        ll[i++] = 0;
    1a08:	00141080 	sll	v0,s4,0x2
    1a0c:	00441021 	addu	v0,v0,a0
    1a10:	ac400000 	sw	zero,0(v0)
    1a14:	2673ffff 	addiu	s3,s3,-1
    1a18:	1663fffb 	bne	s3,v1,1a08 <inflate_dynamic+0x658>
    1a1c:	26940001 	addiu	s4,s4,1
/home/mips/lx4180/fs/../lib/inflate2.c:840
      l = 0;
    1a20:	0000b021 	move	s6,zero
    1a24:	029e102b 	sltu	v0,s4,s8
    1a28:	1440ff31 	bnez	v0,16f0 <inflate_dynamic+0x340>
    1a2c:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:847
    }
  }

DEBG("dyn4 ");

  /* free decoding table for trees */
  huft_free(zloc, tl);
    1a30:	8fa50020 	lw	a1,32(sp)
    1a34:	0c000249 	jal	924 <huft_free>
			1a34: R_MIPS_26	.text
    1a38:	02402021 	move	a0,s2
/home/mips/lx4180/fs/../lib/inflate2.c:852

DEBG("dyn5 ");

  /* restore the global bit buffer */
  bb = b;
    1a3c:	ae510038 	sw	s1,56(s2)
/home/mips/lx4180/fs/../lib/inflate2.c:853
  bk = k;
    1a40:	ae50003c 	sw	s0,60(s2)
/home/mips/lx4180/fs/../lib/inflate2.c:858

DEBG("dyn5a ");

  /* build the decoding tables for literal/length and distance codes */
  bl = lbits;
    1a44:	3c020000 	lui	v0,0x0
			1a44: R_MIPS_HI16	.data
    1a48:	8c420180 	lw	v0,384(v0)
			1a48: R_MIPS_LO16	.data
    1a4c:	00000000 	nop
    1a50:	afa20024 	sw	v0,36(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:859
  if ((i = huft_build(zloc, ll, nl, 257, cplens, cplext, &tl, &bl)) != 0)
    1a54:	3c020000 	lui	v0,0x0
			1a54: R_MIPS_HI16	.data
    1a58:	24420064 	addiu	v0,v0,100
			1a58: R_MIPS_LO16	.data
    1a5c:	afa20010 	sw	v0,16(sp)
    1a60:	3c020000 	lui	v0,0x0
			1a60: R_MIPS_HI16	.data
    1a64:	244200a4 	addiu	v0,v0,164
			1a64: R_MIPS_LO16	.data
    1a68:	afa20014 	sw	v0,20(sp)
    1a6c:	27a20020 	addiu	v0,sp,32
    1a70:	afa20018 	sw	v0,24(sp)
    1a74:	27a20024 	addiu	v0,sp,36
    1a78:	afa2001c 	sw	v0,28(sp)
    1a7c:	02402021 	move	a0,s2
    1a80:	3c050000 	lui	a1,0x0
			1a80: R_MIPS_HI16	.bss
    1a84:	24a50900 	addiu	a1,a1,2304
			1a84: R_MIPS_LO16	.bss
    1a88:	02a03021 	move	a2,s5
    1a8c:	0c0000ae 	jal	2b8 <huft_build>
			1a8c: R_MIPS_26	.text
    1a90:	24070101 	li	a3,257
    1a94:	10400009 	beqz	v0,1abc <inflate_dynamic+0x70c>
    1a98:	0040a021 	move	s4,v0
/home/mips/lx4180/fs/../lib/inflate2.c:862
  {
DEBG("dyn5b ");
    if (i == 1) {
    1a9c:	24020001 	li	v0,1
    1aa0:	1682002a 	bne	s4,v0,1b4c <inflate_dynamic+0x79c>
    1aa4:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:863
      error(" incomplete literal tree");
    1aa8:	3c040000 	lui	a0,0x0
			1aa8: R_MIPS_HI16	.rodata
    1aac:	0c000000 	jal	0 <flat_core_dump>
			1aac: R_MIPS_26	printk
    1ab0:	24840040 	addiu	a0,a0,64
			1ab0: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:866
      huft_free(zloc, tl);
    }
    return i;                   /* incomplete code set */
    1ab4:	080006d0 	j	1b40 <inflate_dynamic+0x790>
			1ab4: R_MIPS_26	.text
    1ab8:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:869
  }
DEBG("dyn5c ");
  bd = dbits;
    1abc:	3c020000 	lui	v0,0x0
			1abc: R_MIPS_HI16	.data
    1ac0:	8c420184 	lw	v0,388(v0)
			1ac0: R_MIPS_LO16	.data
    1ac4:	00000000 	nop
    1ac8:	afa2002c 	sw	v0,44(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:870
  if ((i = huft_build(zloc, ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0)
    1acc:	00152880 	sll	a1,s5,0x2
    1ad0:	3c010000 	lui	at,0x0
			1ad0: R_MIPS_HI16	.bss
    1ad4:	24210900 	addiu	at,at,2304
			1ad4: R_MIPS_LO16	.bss
    1ad8:	00252821 	addu	a1,at,a1
    1adc:	3c020000 	lui	v0,0x0
			1adc: R_MIPS_HI16	.data
    1ae0:	244200e4 	addiu	v0,v0,228
			1ae0: R_MIPS_LO16	.data
    1ae4:	afa20010 	sw	v0,16(sp)
    1ae8:	3c020000 	lui	v0,0x0
			1ae8: R_MIPS_HI16	.data
    1aec:	24420120 	addiu	v0,v0,288
			1aec: R_MIPS_LO16	.data
    1af0:	afa20014 	sw	v0,20(sp)
    1af4:	27a20028 	addiu	v0,sp,40
    1af8:	afa20018 	sw	v0,24(sp)
    1afc:	27a2002c 	addiu	v0,sp,44
    1b00:	afa2001c 	sw	v0,28(sp)
    1b04:	02402021 	move	a0,s2
    1b08:	02e03021 	move	a2,s7
    1b0c:	0c0000ae 	jal	2b8 <huft_build>
			1b0c: R_MIPS_26	.text
    1b10:	00003821 	move	a3,zero
    1b14:	1040000f 	beqz	v0,1b54 <inflate_dynamic+0x7a4>
    1b18:	0040a021 	move	s4,v0
/home/mips/lx4180/fs/../lib/inflate2.c:873
  {
DEBG("dyn5d ");
    if (i == 1) {
    1b1c:	24020001 	li	v0,1
    1b20:	16820007 	bne	s4,v0,1b40 <inflate_dynamic+0x790>
    1b24:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:874
      error(" incomplete distance tree");
    1b28:	3c040000 	lui	a0,0x0
			1b28: R_MIPS_HI16	.rodata
    1b2c:	0c000000 	jal	0 <flat_core_dump>
			1b2c: R_MIPS_26	printk
    1b30:	24840060 	addiu	a0,a0,96
			1b30: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:879
#ifdef PKZIP_BUG_WORKAROUND
      i = 0;
    }
#else
      huft_free(zloc, td);
    1b34:	8fa50028 	lw	a1,40(sp)
    1b38:	0c000249 	jal	924 <huft_free>
			1b38: R_MIPS_26	.text
    1b3c:	02402021 	move	a0,s2
/home/mips/lx4180/fs/../lib/inflate2.c:881
    }
    huft_free(zloc, tl);
    1b40:	8fa50020 	lw	a1,32(sp)
    1b44:	0c000249 	jal	924 <huft_free>
			1b44: R_MIPS_26	.text
    1b48:	02402021 	move	a0,s2
/home/mips/lx4180/fs/../lib/inflate2.c:882
    return i;                   /* incomplete code set */
    1b4c:	080006ea 	j	1ba8 <inflate_dynamic+0x7f8>
			1b4c: R_MIPS_26	.text
    1b50:	02801821 	move	v1,s4
/home/mips/lx4180/fs/../lib/inflate2.c:889
#endif
  }

DEBG("dyn6 ");

  /* decompress until an end-of-block code */
  if (inflate_codes(zloc, tl, td, bl, bd))
    1b54:	8fa2002c 	lw	v0,44(sp)
    1b58:	00000000 	nop
    1b5c:	afa20010 	sw	v0,16(sp)
    1b60:	8fa50020 	lw	a1,32(sp)
    1b64:	8fa60028 	lw	a2,40(sp)
    1b68:	8fa70024 	lw	a3,36(sp)
    1b6c:	0c000259 	jal	964 <inflate_codes>
			1b6c: R_MIPS_26	.text
    1b70:	02402021 	move	a0,s2
    1b74:	1440000c 	bnez	v0,1ba8 <inflate_dynamic+0x7f8>
    1b78:	24030001 	li	v1,1
    1b7c:	080006e3 	j	1b8c <inflate_dynamic+0x7dc>
			1b7c: R_MIPS_26	.text
    1b80:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:837
    1b84:	080006ea 	j	1ba8 <inflate_dynamic+0x7f8>
			1b84: R_MIPS_26	.text
    1b88:	24030001 	li	v1,1
/home/mips/lx4180/fs/../lib/inflate2.c:895
    return 1;

DEBG("dyn7 ");

  /* free the decoding tables, return */
  huft_free(zloc, tl);
    1b8c:	8fa50020 	lw	a1,32(sp)
    1b90:	0c000249 	jal	924 <huft_free>
			1b90: R_MIPS_26	.text
    1b94:	02402021 	move	a0,s2
/home/mips/lx4180/fs/../lib/inflate2.c:896
  huft_free(zloc, td);
    1b98:	8fa50028 	lw	a1,40(sp)
    1b9c:	0c000249 	jal	924 <huft_free>
			1b9c: R_MIPS_26	.text
    1ba0:	02402021 	move	a0,s2
/home/mips/lx4180/fs/../lib/inflate2.c:899

  DEBG(">");
  return 0;
    1ba4:	00001821 	move	v1,zero
/home/mips/lx4180/fs/../lib/inflate2.c:900
}
    1ba8:	00601021 	move	v0,v1
    1bac:	8fbf005c 	lw	ra,92(sp)
    1bb0:	8fbe0058 	lw	s8,88(sp)
    1bb4:	8fb70054 	lw	s7,84(sp)
    1bb8:	8fb60050 	lw	s6,80(sp)
    1bbc:	8fb5004c 	lw	s5,76(sp)
    1bc0:	8fb40048 	lw	s4,72(sp)
    1bc4:	8fb30044 	lw	s3,68(sp)
    1bc8:	8fb20040 	lw	s2,64(sp)
    1bcc:	8fb1003c 	lw	s1,60(sp)
    1bd0:	8fb00038 	lw	s0,56(sp)
    1bd4:	03e00008 	jr	ra
    1bd8:	27bd0060 	addiu	sp,sp,96

00001bdc <inflate_block>:
inflate_block():
/home/mips/lx4180/fs/../lib/inflate2.c:908



STATIC int inflate_block(zloc, e)
struct s_zloc *zloc;
int *e;                 /* last block flag */
/* decompress an inflated block */
{
    1bdc:	27bdffd8 	addiu	sp,sp,-40
    1be0:	afbf0020 	sw	ra,32(sp)
    1be4:	afb3001c 	sw	s3,28(sp)
    1be8:	afb20018 	sw	s2,24(sp)
    1bec:	afb10014 	sw	s1,20(sp)
    1bf0:	afb00010 	sw	s0,16(sp)
    1bf4:	00809021 	move	s2,a0
/home/mips/lx4180/fs/../lib/inflate2.c:916
  unsigned t;           /* block type */
  register ulg b;       /* bit buffer */
  register unsigned k;  /* number of bits in bit buffer */

  DEBG("<blk");

  /* make local bit buffer */
  b = bb;
    1bf8:	8c910038 	lw	s1,56(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:917
  k = bk;
    1bfc:	8c90003c 	lw	s0,60(a0)
    1c00:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:921


  /* read in last block bit */
  NEEDBITS(1)
    1c04:	16000019 	bnez	s0,1c6c <inflate_block+0x90>
    1c08:	00a09821 	move	s3,a1
    1c0c:	8e430020 	lw	v1,32(s2)
    1c10:	8e42001c 	lw	v0,28(s2)
    1c14:	00000000 	nop
    1c18:	0062102b 	sltu	v0,v1,v0
    1c1c:	1040000b 	beqz	v0,1c4c <inflate_block+0x70>
    1c20:	00000000 	nop
    1c24:	8e420014 	lw	v0,20(s2)
    1c28:	00000000 	nop
    1c2c:	00431021 	addu	v0,v0,v1
    1c30:	90420000 	lbu	v0,0(v0)
    1c34:	00000000 	nop
    1c38:	02021004 	sllv	v0,v0,s0
    1c3c:	02228825 	or	s1,s1,v0
    1c40:	24620001 	addiu	v0,v1,1
    1c44:	08000718 	j	1c60 <inflate_block+0x84>
			1c44: R_MIPS_26	.text
    1c48:	ae420020 	sw	v0,32(s2)
    1c4c:	0c00004b 	jal	12c <fill_inbuf>
			1c4c: R_MIPS_26	.text
    1c50:	02402021 	move	a0,s2
    1c54:	304200ff 	andi	v0,v0,0xff
    1c58:	02021004 	sllv	v0,v0,s0
    1c5c:	02228825 	or	s1,s1,v0
    1c60:	26100008 	addiu	s0,s0,8
    1c64:	1200ffe9 	beqz	s0,1c0c <inflate_block+0x30>
    1c68:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:922
  *e = (int)b & 1;
    1c6c:	32220001 	andi	v0,s1,0x1
    1c70:	ae620000 	sw	v0,0(s3)
/home/mips/lx4180/fs/../lib/inflate2.c:923
  DUMPBITS(1)
    1c74:	2610ffff 	addiu	s0,s0,-1
/home/mips/lx4180/fs/../lib/inflate2.c:927


  /* read in block type */
  NEEDBITS(2)
    1c78:	2e020002 	sltiu	v0,s0,2
    1c7c:	1040001a 	beqz	v0,1ce8 <inflate_block+0x10c>
    1c80:	00118842 	srl	s1,s1,0x1
    1c84:	8e430020 	lw	v1,32(s2)
    1c88:	8e42001c 	lw	v0,28(s2)
    1c8c:	00000000 	nop
    1c90:	0062102b 	sltu	v0,v1,v0
    1c94:	1040000b 	beqz	v0,1cc4 <inflate_block+0xe8>
    1c98:	00000000 	nop
    1c9c:	8e420014 	lw	v0,20(s2)
    1ca0:	00000000 	nop
    1ca4:	00431021 	addu	v0,v0,v1
    1ca8:	90420000 	lbu	v0,0(v0)
    1cac:	00000000 	nop
    1cb0:	02021004 	sllv	v0,v0,s0
    1cb4:	02228825 	or	s1,s1,v0
    1cb8:	24620001 	addiu	v0,v1,1
    1cbc:	08000736 	j	1cd8 <inflate_block+0xfc>
			1cbc: R_MIPS_26	.text
    1cc0:	ae420020 	sw	v0,32(s2)
    1cc4:	0c00004b 	jal	12c <fill_inbuf>
			1cc4: R_MIPS_26	.text
    1cc8:	02402021 	move	a0,s2
    1ccc:	304200ff 	andi	v0,v0,0xff
    1cd0:	02021004 	sllv	v0,v0,s0
    1cd4:	02228825 	or	s1,s1,v0
    1cd8:	26100008 	addiu	s0,s0,8
    1cdc:	2e020002 	sltiu	v0,s0,2
    1ce0:	1440ffe8 	bnez	v0,1c84 <inflate_block+0xa8>
    1ce4:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:928
  t = (unsigned)b & 3;
    1ce8:	32230003 	andi	v1,s1,0x3
/home/mips/lx4180/fs/../lib/inflate2.c:929
  DUMPBITS(2)
    1cec:	00118882 	srl	s1,s1,0x2
    1cf0:	2610fffe 	addiu	s0,s0,-2
/home/mips/lx4180/fs/../lib/inflate2.c:933


  /* restore the global bit buffer */
  bb = b;
    1cf4:	ae510038 	sw	s1,56(s2)
/home/mips/lx4180/fs/../lib/inflate2.c:937
  bk = k;

  /* inflate that block type */
  if (t == 2)
    1cf8:	24020002 	li	v0,2
    1cfc:	14620005 	bne	v1,v0,1d14 <inflate_block+0x138>
    1d00:	ae50003c 	sw	s0,60(s2)
/home/mips/lx4180/fs/../lib/inflate2.c:938
    return inflate_dynamic(zloc);
    1d04:	0c0004ec 	jal	13b0 <inflate_dynamic>
			1d04: R_MIPS_26	.text
    1d08:	02402021 	move	a0,s2
    1d0c:	08000753 	j	1d4c <inflate_block+0x170>
			1d0c: R_MIPS_26	.text
    1d10:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:939
  if (t == 0)
    1d14:	14600005 	bnez	v1,1d2c <inflate_block+0x150>
    1d18:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:940
    return inflate_stored(zloc);
    1d1c:	0c0003d8 	jal	f60 <inflate_stored>
			1d1c: R_MIPS_26	.text
    1d20:	02402021 	move	a0,s2
    1d24:	08000753 	j	1d4c <inflate_block+0x170>
			1d24: R_MIPS_26	.text
    1d28:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:941
  if (t == 1)
    1d2c:	24020001 	li	v0,1
    1d30:	14620005 	bne	v1,v0,1d48 <inflate_block+0x16c>
    1d34:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:942
    return inflate_fixed(zloc);
    1d38:	0c000465 	jal	1194 <inflate_fixed>
			1d38: R_MIPS_26	.text
    1d3c:	02402021 	move	a0,s2
    1d40:	08000753 	j	1d4c <inflate_block+0x170>
			1d40: R_MIPS_26	.text
    1d44:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:947

  DEBG(">");

  /* bad block type */
  return 2;
    1d48:	24020002 	li	v0,2
/home/mips/lx4180/fs/../lib/inflate2.c:948
}
    1d4c:	8fbf0020 	lw	ra,32(sp)
    1d50:	8fb3001c 	lw	s3,28(sp)
    1d54:	8fb20018 	lw	s2,24(sp)
    1d58:	8fb10014 	lw	s1,20(sp)
    1d5c:	8fb00010 	lw	s0,16(sp)
    1d60:	03e00008 	jr	ra
    1d64:	27bd0028 	addiu	sp,sp,40

00001d68 <inflate>:
inflate():
/home/mips/lx4180/fs/../lib/inflate2.c:955



STATIC int inflate(zloc)
struct s_zloc *zloc;
/* decompress an inflated entry */
{
    1d68:	27bdffd8 	addiu	sp,sp,-40
    1d6c:	afbf0020 	sw	ra,32(sp)
    1d70:	afb1001c 	sw	s1,28(sp)
    1d74:	afb00018 	sw	s0,24(sp)
    1d78:	00808021 	move	s0,a0
/home/mips/lx4180/fs/../lib/inflate2.c:961
  int e;                /* last block flag */
  int r;                /* result code */
  unsigned h;           /* maximum struct huft's malloc'ed */

  /* initialize window, bit buffer */
  wp = 0;
    1d7c:	ac800024 	sw	zero,36(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:962
  bk = 0;
    1d80:	ac80003c 	sw	zero,60(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:963
  bb = 0;
    1d84:	ac800038 	sw	zero,56(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:967


  /* decompress until the last block */
  h = 0;
    1d88:	00008821 	move	s1,zero
/home/mips/lx4180/fs/../lib/inflate2.c:969
  do {
    hufts = 0;
    1d8c:	ae000444 	sw	zero,1092(s0)
/home/mips/lx4180/fs/../lib/inflate2.c:970
    if ((r = inflate_block(zloc, &e)) != 0) {
    1d90:	02002021 	move	a0,s0
    1d94:	0c0006f7 	jal	1bdc <inflate_block>
			1d94: R_MIPS_26	.text
    1d98:	27a50010 	addiu	a1,sp,16
    1d9c:	1440001d 	bnez	v0,1e14 <inflate+0xac>
    1da0:	00401821 	move	v1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:973
      return r;
    }
    if (hufts > h)
    1da4:	8e030444 	lw	v1,1092(s0)
    1da8:	00000000 	nop
    1dac:	0223102b 	sltu	v0,s1,v1
    1db0:	10400002 	beqz	v0,1dbc <inflate+0x54>
    1db4:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:974
      h = hufts;
    1db8:	00608821 	move	s1,v1
/home/mips/lx4180/fs/../lib/inflate2.c:975
  } while (!e);
    1dbc:	8fa20010 	lw	v0,16(sp)
    1dc0:	00000000 	nop
    1dc4:	1040fff1 	beqz	v0,1d8c <inflate+0x24>
    1dc8:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:980

  /* Undo too much lookahead. The next read will be byte aligned so we
   * can discard unused bits in the last meaningful byte.
   */
  while (bk >= 8) {
    1dcc:	8e02003c 	lw	v0,60(s0)
    1dd0:	00000000 	nop
    1dd4:	00402021 	move	a0,v0
    1dd8:	2c420008 	sltiu	v0,v0,8
    1ddc:	1440000a 	bnez	v0,1e08 <inflate+0xa0>
    1de0:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:981
    bk -= 8;
    1de4:	2483fff8 	addiu	v1,a0,-8
/home/mips/lx4180/fs/../lib/inflate2.c:982
    inptr--;
    1de8:	8e020020 	lw	v0,32(s0)
    1dec:	00000000 	nop
    1df0:	2442ffff 	addiu	v0,v0,-1
    1df4:	ae020020 	sw	v0,32(s0)
    1df8:	2c620008 	sltiu	v0,v1,8
    1dfc:	1040fff9 	beqz	v0,1de4 <inflate+0x7c>
    1e00:	00602021 	move	a0,v1
    1e04:	ae03003c 	sw	v1,60(s0)
/home/mips/lx4180/fs/../lib/inflate2.c:986
  }

  /* flush out slide */
  flush_output(wp);
    1e08:	0c00007f 	jal	1fc <flush_window>
			1e08: R_MIPS_26	.text
    1e0c:	02002021 	move	a0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:993


  /* return success */
#ifdef INFDEBUG
  fprintf(stderr, "<%u> ", h);
#endif /* INFDEBUG */
  return 0;
    1e10:	00001821 	move	v1,zero
/home/mips/lx4180/fs/../lib/inflate2.c:994
}
    1e14:	00601021 	move	v0,v1
    1e18:	8fbf0020 	lw	ra,32(sp)
    1e1c:	8fb1001c 	lw	s1,28(sp)
    1e20:	8fb00018 	lw	s0,24(sp)
    1e24:	03e00008 	jr	ra
    1e28:	27bd0028 	addiu	sp,sp,40

00001e2c <makecrc>:
makecrc():
/home/mips/lx4180/fs/../lib/inflate2.c:1023

/**********************************************************************
 *
 * The following are support routines for inflate.c
 *
 **********************************************************************/

#define CRC_VALUE (crc ^ 0xffffffffL)

/*
 * Code to compute the CRC-32 table. Borrowed from 
 * gzip-1.0.3/makecrc.c.
 */

static void
makecrc(struct s_zloc *zloc)
{
/* Not copyrighted 1990 Mark Adler	*/

  unsigned long c;      /* crc shift register */
  unsigned long e;      /* polynomial exclusive-or pattern */
  int i;                /* counter for all possible eight bit values */
  int k;                /* byte being shifted into crc apparatus */

  /* terms of polynomial defining this crc (except x^32): */
  static int p[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26};

  /* Make exclusive-or pattern from polynomial */
  e = 0;
    1e2c:	00004821 	move	t1,zero
/home/mips/lx4180/fs/../lib/inflate2.c:1024
  for (i = 0; i < sizeof(p)/sizeof(int); i++)
    1e30:	00004021 	move	t0,zero
    1e34:	3c060000 	lui	a2,0x0
			1e34: R_MIPS_HI16	.data
    1e38:	24c60188 	addiu	a2,a2,392
			1e38: R_MIPS_LO16	.data
    1e3c:	2405001f 	li	a1,31
    1e40:	24030001 	li	v1,1
/home/mips/lx4180/fs/../lib/inflate2.c:1025
    e |= 1L << (31 - p[i]);
    1e44:	00081080 	sll	v0,t0,0x2
    1e48:	00461021 	addu	v0,v0,a2
    1e4c:	8c420000 	lw	v0,0(v0)
    1e50:	00000000 	nop
    1e54:	00a21023 	subu	v0,a1,v0
    1e58:	00431004 	sllv	v0,v1,v0
    1e5c:	01224825 	or	t1,t1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1024
    1e60:	25080001 	addiu	t0,t0,1
    1e64:	2d02000e 	sltiu	v0,t0,14
    1e68:	1440fff7 	bnez	v0,1e48 <makecrc+0x1c>
    1e6c:	00081080 	sll	v0,t0,0x2
/home/mips/lx4180/fs/../lib/inflate2.c:1027

  crc_32_tab[0] = 0;
    1e70:	ac800040 	sw	zero,64(a0)
/home/mips/lx4180/fs/../lib/inflate2.c:1029

  for (i = 1; i < 256; i++)
    1e74:	24080001 	li	t0,1
    1e78:	240a0001 	li	t2,1
/home/mips/lx4180/fs/../lib/inflate2.c:1032
  {
    c = 0;
    for (k = i | 256; k != 1; k >>= 1)
    1e7c:	35050100 	ori	a1,t0,0x100
    1e80:	10aa000d 	beq	a1,t2,1eb8 <makecrc+0x8c>
    1e84:	00003021 	move	a2,zero
    1e88:	24070001 	li	a3,1
/home/mips/lx4180/fs/../lib/inflate2.c:1034
    {
      c = c & 1 ? (c >> 1) ^ e : c >> 1;
    1e8c:	30c20001 	andi	v0,a2,0x1
    1e90:	10400002 	beqz	v0,1e9c <makecrc+0x70>
    1e94:	00061842 	srl	v1,a2,0x1
    1e98:	00691826 	xor	v1,v1,t1
/home/mips/lx4180/fs/../lib/inflate2.c:1035
      if (k & 1)
    1e9c:	30a20001 	andi	v0,a1,0x1
    1ea0:	10400002 	beqz	v0,1eac <makecrc+0x80>
    1ea4:	00603021 	move	a2,v1
/home/mips/lx4180/fs/../lib/inflate2.c:1036
        c ^= e;
    1ea8:	00693026 	xor	a2,v1,t1
/home/mips/lx4180/fs/../lib/inflate2.c:1032
    1eac:	00052843 	sra	a1,a1,0x1
    1eb0:	14a7fff7 	bne	a1,a3,1e90 <makecrc+0x64>
    1eb4:	30c20001 	andi	v0,a2,0x1
/home/mips/lx4180/fs/../lib/inflate2.c:1038
    }
    crc_32_tab[i] = c;
    1eb8:	00081080 	sll	v0,t0,0x2
    1ebc:	00441021 	addu	v0,v0,a0
    1ec0:	ac460040 	sw	a2,64(v0)
/home/mips/lx4180/fs/../lib/inflate2.c:1029
    1ec4:	25080001 	addiu	t0,t0,1
    1ec8:	29020100 	slti	v0,t0,256
    1ecc:	1440ffeb 	bnez	v0,1e7c <makecrc+0x50>
    1ed0:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1040
  }
}
    1ed4:	03e00008 	jr	ra
    1ed8:	00000000 	nop

00001edc <gunzip>:
gunzip():
/home/mips/lx4180/fs/../lib/inflate2.c:1055

/* gzip flag byte */
#define ASCII_FLAG   0x01 /* bit 0 set: file probably ascii text */
#define CONTINUATION 0x02 /* bit 1 set: continuation of multi-part gzip file */
#define EXTRA_FIELD  0x04 /* bit 2 set: extra field present */
#define ORIG_NAME    0x08 /* bit 3 set: original file name present */
#define COMMENT      0x10 /* bit 4 set: file comment present */
#define ENCRYPTED    0x20 /* bit 5 set: file is encrypted */
#define RESERVED     0xC0 /* bit 6,7:   reserved */

/*
 * Do the uncompression!
 */
static int gunzip(struct s_zloc *zloc)
{
    1edc:	27bdffd0 	addiu	sp,sp,-48
    1ee0:	afbf0028 	sw	ra,40(sp)
    1ee4:	afb30024 	sw	s3,36(sp)
    1ee8:	afb20020 	sw	s2,32(sp)
    1eec:	afb1001c 	sw	s1,28(sp)
    1ef0:	afb00018 	sw	s0,24(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:1063
    uch flags;
    unsigned char magic[2]; /* magic header */
    char method;
    ulg orig_crc = 0;       /* original crc */
    ulg orig_len = 0;       /* original uncompressed length */
    int res;
#if 1
    magic[0] = (unsigned char)get_byte();
    1ef4:	8c830020 	lw	v1,32(a0)
    1ef8:	8c82001c 	lw	v0,28(a0)
    1efc:	00000000 	nop
    1f00:	0062102b 	sltu	v0,v1,v0
    1f04:	10400008 	beqz	v0,1f28 <gunzip+0x4c>
    1f08:	00808021 	move	s0,a0
    1f0c:	8c820014 	lw	v0,20(a0)
    1f10:	00000000 	nop
    1f14:	00431021 	addu	v0,v0,v1
    1f18:	90440000 	lbu	a0,0(v0)
    1f1c:	24620001 	addiu	v0,v1,1
    1f20:	080007cd 	j	1f34 <gunzip+0x58>
			1f20: R_MIPS_26	.text
    1f24:	ae020020 	sw	v0,32(s0)
    1f28:	0c00004b 	jal	12c <fill_inbuf>
			1f28: R_MIPS_26	.text
    1f2c:	00000000 	nop
    1f30:	00402021 	move	a0,v0
    1f34:	a3a40010 	sb	a0,16(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:1064
    magic[1] = (unsigned char)get_byte();
    1f38:	8e030020 	lw	v1,32(s0)
    1f3c:	8e02001c 	lw	v0,28(s0)
    1f40:	00000000 	nop
    1f44:	0062102b 	sltu	v0,v1,v0
    1f48:	10400008 	beqz	v0,1f6c <gunzip+0x90>
    1f4c:	00000000 	nop
    1f50:	8e020014 	lw	v0,20(s0)
    1f54:	00000000 	nop
    1f58:	00431021 	addu	v0,v0,v1
    1f5c:	90440000 	lbu	a0,0(v0)
    1f60:	24620001 	addiu	v0,v1,1
    1f64:	080007de 	j	1f78 <gunzip+0x9c>
			1f64: R_MIPS_26	.text
    1f68:	ae020020 	sw	v0,32(s0)
    1f6c:	0c00004b 	jal	12c <fill_inbuf>
			1f6c: R_MIPS_26	.text
    1f70:	02002021 	move	a0,s0
    1f74:	00402021 	move	a0,v0
    1f78:	a3a40011 	sb	a0,17(sp)
/home/mips/lx4180/fs/../lib/inflate2.c:1065
    method = (unsigned char)get_byte();
    1f7c:	8e030020 	lw	v1,32(s0)
    1f80:	8e02001c 	lw	v0,28(s0)
    1f84:	00000000 	nop
    1f88:	0062102b 	sltu	v0,v1,v0
    1f8c:	10400008 	beqz	v0,1fb0 <gunzip+0xd4>
    1f90:	00000000 	nop
    1f94:	8e020014 	lw	v0,20(s0)
    1f98:	00000000 	nop
    1f9c:	00431021 	addu	v0,v0,v1
    1fa0:	80440000 	lb	a0,0(v0)
    1fa4:	24620001 	addiu	v0,v1,1
    1fa8:	080007f0 	j	1fc0 <gunzip+0xe4>
			1fa8: R_MIPS_26	.text
    1fac:	ae020020 	sw	v0,32(s0)
    1fb0:	0c00004b 	jal	12c <fill_inbuf>
			1fb0: R_MIPS_26	.text
    1fb4:	02002021 	move	a0,s0
    1fb8:	00021600 	sll	v0,v0,0x18
    1fbc:	00022603 	sra	a0,v0,0x18
/home/mips/lx4180/fs/../lib/inflate2.c:1067

    if (magic[0] != 037 ||
    1fc0:	93a30010 	lbu	v1,16(sp)
    1fc4:	2402001f 	li	v0,31
    1fc8:	14620007 	bne	v1,v0,1fe8 <gunzip+0x10c>
    1fcc:	00000000 	nop
    1fd0:	93a30011 	lbu	v1,17(sp)
    1fd4:	2402008b 	li	v0,139
    1fd8:	10620006 	beq	v1,v0,1ff4 <gunzip+0x118>
    1fdc:	2402009e 	li	v0,158
    1fe0:	10620004 	beq	v1,v0,1ff4 <gunzip+0x118>
    1fe4:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1069
	((magic[1] != 0213) && (magic[1] != 0236))) {
	    error("bad gzip magic numbers");
    1fe8:	3c040000 	lui	a0,0x0
			1fe8: R_MIPS_HI16	.rodata
    1fec:	0800097d 	j	25f4 <gunzip+0x718>
			1fec: R_MIPS_26	.text
/home/mips/lx4180/fs/../lib/inflate2.c:1070
	    return -1;
    1ff0:	24840084 	addiu	a0,a0,132
			1ff0: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:1074
    }

    /* We only support method #8, DEFLATED */
    if (method != 8)  {
    1ff4:	24020008 	li	v0,8
    1ff8:	10820004 	beq	a0,v0,200c <gunzip+0x130>
    1ffc:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1075
	    error("internal error, invalid method");
    2000:	3c040000 	lui	a0,0x0
			2000: R_MIPS_HI16	.rodata
    2004:	0800097d 	j	25f4 <gunzip+0x718>
			2004: R_MIPS_26	.text
/home/mips/lx4180/fs/../lib/inflate2.c:1076
	    return -1;
    2008:	248400a4 	addiu	a0,a0,164
			2008: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:1079
    }

    flags  = (uch)get_byte();
    200c:	8e030020 	lw	v1,32(s0)
    2010:	8e02001c 	lw	v0,28(s0)
    2014:	00000000 	nop
    2018:	0062102b 	sltu	v0,v1,v0
    201c:	10400008 	beqz	v0,2040 <gunzip+0x164>
    2020:	00000000 	nop
    2024:	8e020014 	lw	v0,20(s0)
    2028:	00000000 	nop
    202c:	00431021 	addu	v0,v0,v1
    2030:	90520000 	lbu	s2,0(v0)
    2034:	24620001 	addiu	v0,v1,1
    2038:	08000813 	j	204c <gunzip+0x170>
			2038: R_MIPS_26	.text
    203c:	ae020020 	sw	v0,32(s0)
    2040:	0c00004b 	jal	12c <fill_inbuf>
			2040: R_MIPS_26	.text
    2044:	02002021 	move	a0,s0
    2048:	305200ff 	andi	s2,v0,0xff
/home/mips/lx4180/fs/../lib/inflate2.c:1080
    if ((flags & ENCRYPTED) != 0) {
    204c:	32420020 	andi	v0,s2,0x20
    2050:	3c040000 	lui	a0,0x0
			2050: R_MIPS_HI16	.rodata
    2054:	14400167 	bnez	v0,25f4 <gunzip+0x718>
/home/mips/lx4180/fs/../lib/inflate2.c:1082
	    error("Input is encrypted");
	    return -1;
    2058:	248400cc 	addiu	a0,a0,204
			2058: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:1084
    }
    if ((flags & CONTINUATION) != 0) {
    205c:	32420002 	andi	v0,s2,0x2
    2060:	3c040000 	lui	a0,0x0
			2060: R_MIPS_HI16	.rodata
    2064:	14400163 	bnez	v0,25f4 <gunzip+0x718>
/home/mips/lx4180/fs/../lib/inflate2.c:1086
	    error("Multi part input");
	    return -1;
    2068:	248400e8 	addiu	a0,a0,232
			2068: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:1088
    }
    if ((flags & RESERVED) != 0) {
    206c:	324200c0 	andi	v0,s2,0xc0
    2070:	3c040000 	lui	a0,0x0
			2070: R_MIPS_HI16	.rodata
    2074:	1440015f 	bnez	v0,25f4 <gunzip+0x718>
/home/mips/lx4180/fs/../lib/inflate2.c:1090
	    error("Input has invalid flags");
	    return -1;
    2078:	24840100 	addiu	a0,a0,256
			2078: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:1092
    }
    (ulg)get_byte();	/* Get timestamp */
    207c:	8e030020 	lw	v1,32(s0)
    2080:	8e02001c 	lw	v0,28(s0)
    2084:	00000000 	nop
    2088:	0062102b 	sltu	v0,v1,v0
    208c:	10400003 	beqz	v0,209c <gunzip+0x1c0>
    2090:	24620001 	addiu	v0,v1,1
    2094:	08000829 	j	20a4 <gunzip+0x1c8>
			2094: R_MIPS_26	.text
    2098:	ae020020 	sw	v0,32(s0)
    209c:	0c00004b 	jal	12c <fill_inbuf>
			209c: R_MIPS_26	.text
    20a0:	02002021 	move	a0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:1093
    ((ulg)get_byte()) << 8;
    20a4:	8e030020 	lw	v1,32(s0)
    20a8:	8e02001c 	lw	v0,28(s0)
    20ac:	00000000 	nop
    20b0:	0062102b 	sltu	v0,v1,v0
    20b4:	10400003 	beqz	v0,20c4 <gunzip+0x1e8>
    20b8:	24620001 	addiu	v0,v1,1
    20bc:	08000833 	j	20cc <gunzip+0x1f0>
			20bc: R_MIPS_26	.text
    20c0:	ae020020 	sw	v0,32(s0)
    20c4:	0c00004b 	jal	12c <fill_inbuf>
			20c4: R_MIPS_26	.text
    20c8:	02002021 	move	a0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:1094
    ((ulg)get_byte()) << 16;
    20cc:	8e030020 	lw	v1,32(s0)
    20d0:	8e02001c 	lw	v0,28(s0)
    20d4:	00000000 	nop
    20d8:	0062102b 	sltu	v0,v1,v0
    20dc:	10400003 	beqz	v0,20ec <gunzip+0x210>
    20e0:	24620001 	addiu	v0,v1,1
    20e4:	0800083d 	j	20f4 <gunzip+0x218>
			20e4: R_MIPS_26	.text
    20e8:	ae020020 	sw	v0,32(s0)
    20ec:	0c00004b 	jal	12c <fill_inbuf>
			20ec: R_MIPS_26	.text
    20f0:	02002021 	move	a0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:1095
    ((ulg)get_byte()) << 24;
    20f4:	8e030020 	lw	v1,32(s0)
    20f8:	8e02001c 	lw	v0,28(s0)
    20fc:	00000000 	nop
    2100:	0062102b 	sltu	v0,v1,v0
    2104:	10400003 	beqz	v0,2114 <gunzip+0x238>
    2108:	24620001 	addiu	v0,v1,1
    210c:	08000847 	j	211c <gunzip+0x240>
			210c: R_MIPS_26	.text
    2110:	ae020020 	sw	v0,32(s0)
    2114:	0c00004b 	jal	12c <fill_inbuf>
			2114: R_MIPS_26	.text
    2118:	02002021 	move	a0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:1097

    (void)get_byte();  /* Ignore extra flags for the moment */
    211c:	8e030020 	lw	v1,32(s0)
    2120:	8e02001c 	lw	v0,28(s0)
    2124:	00000000 	nop
    2128:	0062102b 	sltu	v0,v1,v0
    212c:	10400003 	beqz	v0,213c <gunzip+0x260>
    2130:	24620001 	addiu	v0,v1,1
    2134:	08000851 	j	2144 <gunzip+0x268>
			2134: R_MIPS_26	.text
    2138:	ae020020 	sw	v0,32(s0)
    213c:	0c00004b 	jal	12c <fill_inbuf>
			213c: R_MIPS_26	.text
    2140:	02002021 	move	a0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:1098
    (void)get_byte();  /* Ignore OS type for the moment */
    2144:	8e030020 	lw	v1,32(s0)
    2148:	8e02001c 	lw	v0,28(s0)
    214c:	00000000 	nop
    2150:	0062102b 	sltu	v0,v1,v0
    2154:	10400003 	beqz	v0,2164 <gunzip+0x288>
    2158:	24620001 	addiu	v0,v1,1
    215c:	0800085b 	j	216c <gunzip+0x290>
			215c: R_MIPS_26	.text
    2160:	ae020020 	sw	v0,32(s0)
    2164:	0c00004b 	jal	12c <fill_inbuf>
			2164: R_MIPS_26	.text
    2168:	02002021 	move	a0,s0
/home/mips/lx4180/fs/../lib/inflate2.c:1100

    if ((flags & EXTRA_FIELD) != 0) {
    216c:	32420004 	andi	v0,s2,0x4
    2170:	10400037 	beqz	v0,2250 <gunzip+0x374>
    2174:	32420008 	andi	v0,s2,0x8
/home/mips/lx4180/fs/../lib/inflate2.c:1101
	    unsigned len = (unsigned)get_byte();
    2178:	8e030020 	lw	v1,32(s0)
    217c:	8e02001c 	lw	v0,28(s0)
    2180:	00000000 	nop
    2184:	0062102b 	sltu	v0,v1,v0
    2188:	10400008 	beqz	v0,21ac <gunzip+0x2d0>
    218c:	00000000 	nop
    2190:	8e020014 	lw	v0,20(s0)
    2194:	00000000 	nop
    2198:	00431021 	addu	v0,v0,v1
    219c:	90510000 	lbu	s1,0(v0)
    21a0:	24620001 	addiu	v0,v1,1
    21a4:	0800086e 	j	21b8 <gunzip+0x2dc>
			21a4: R_MIPS_26	.text
    21a8:	ae020020 	sw	v0,32(s0)
    21ac:	0c00004b 	jal	12c <fill_inbuf>
			21ac: R_MIPS_26	.text
    21b0:	02002021 	move	a0,s0
    21b4:	00408821 	move	s1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1102
	    len |= ((unsigned)get_byte())<<8;
    21b8:	8e030020 	lw	v1,32(s0)
    21bc:	8e02001c 	lw	v0,28(s0)
    21c0:	00000000 	nop
    21c4:	0062102b 	sltu	v0,v1,v0
    21c8:	1040000b 	beqz	v0,21f8 <gunzip+0x31c>
    21cc:	00000000 	nop
    21d0:	8e020014 	lw	v0,20(s0)
    21d4:	00000000 	nop
    21d8:	00431021 	addu	v0,v0,v1
    21dc:	90420000 	lbu	v0,0(v0)
    21e0:	00000000 	nop
    21e4:	00021200 	sll	v0,v0,0x8
    21e8:	02228825 	or	s1,s1,v0
    21ec:	24620001 	addiu	v0,v1,1
    21f0:	08000882 	j	2208 <gunzip+0x32c>
			21f0: R_MIPS_26	.text
    21f4:	ae020020 	sw	v0,32(s0)
    21f8:	0c00004b 	jal	12c <fill_inbuf>
			21f8: R_MIPS_26	.text
    21fc:	02002021 	move	a0,s0
    2200:	00021200 	sll	v0,v0,0x8
    2204:	02228825 	or	s1,s1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1103
	    while (len--) (void)get_byte();
    2208:	2631ffff 	addiu	s1,s1,-1
    220c:	2402ffff 	li	v0,-1
    2210:	1222000f 	beq	s1,v0,2250 <gunzip+0x374>
    2214:	32420008 	andi	v0,s2,0x8
    2218:	2413ffff 	li	s3,-1
    221c:	8e030020 	lw	v1,32(s0)
    2220:	8e02001c 	lw	v0,28(s0)
    2224:	00000000 	nop
    2228:	0062102b 	sltu	v0,v1,v0
    222c:	10400003 	beqz	v0,223c <gunzip+0x360>
    2230:	24620001 	addiu	v0,v1,1
    2234:	08000891 	j	2244 <gunzip+0x368>
			2234: R_MIPS_26	.text
    2238:	ae020020 	sw	v0,32(s0)
    223c:	0c00004b 	jal	12c <fill_inbuf>
			223c: R_MIPS_26	.text
    2240:	02002021 	move	a0,s0
    2244:	2631ffff 	addiu	s1,s1,-1
    2248:	1633fff4 	bne	s1,s3,221c <gunzip+0x340>
    224c:	32420008 	andi	v0,s2,0x8
/home/mips/lx4180/fs/../lib/inflate2.c:1107
    }

    /* Get original file name if it was truncated */
    if ((flags & ORIG_NAME) != 0) {
    2250:	10400013 	beqz	v0,22a0 <gunzip+0x3c4>
    2254:	32420010 	andi	v0,s2,0x10
/home/mips/lx4180/fs/../lib/inflate2.c:1109
	    /* Discard the old name */
	    while (get_byte() != 0) /* null */ ;
    2258:	8e030020 	lw	v1,32(s0)
    225c:	8e02001c 	lw	v0,28(s0)
    2260:	00000000 	nop
    2264:	0062102b 	sltu	v0,v1,v0
    2268:	10400009 	beqz	v0,2290 <gunzip+0x3b4>
    226c:	00000000 	nop
    2270:	8e020014 	lw	v0,20(s0)
    2274:	00000000 	nop
    2278:	00431021 	addu	v0,v0,v1
    227c:	24630001 	addiu	v1,v1,1
    2280:	ae030020 	sw	v1,32(s0)
    2284:	90420000 	lbu	v0,0(v0)
    2288:	080008a6 	j	2298 <gunzip+0x3bc>
			2288: R_MIPS_26	.text
    228c:	00000000 	nop
    2290:	0c00004b 	jal	12c <fill_inbuf>
			2290: R_MIPS_26	.text
    2294:	02002021 	move	a0,s0
    2298:	1440ffef 	bnez	v0,2258 <gunzip+0x37c>
    229c:	32420010 	andi	v0,s2,0x10
/home/mips/lx4180/fs/../lib/inflate2.c:1113
    } 

    /* Discard file comment if any */
    if ((flags & COMMENT) != 0) {
    22a0:	10400013 	beqz	v0,22f0 <gunzip+0x414>
    22a4:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1114
	    while (get_byte() != 0) /* null */ ;
    22a8:	8e030020 	lw	v1,32(s0)
    22ac:	8e02001c 	lw	v0,28(s0)
    22b0:	00000000 	nop
    22b4:	0062102b 	sltu	v0,v1,v0
    22b8:	10400009 	beqz	v0,22e0 <gunzip+0x404>
    22bc:	00000000 	nop
    22c0:	8e020014 	lw	v0,20(s0)
    22c4:	00000000 	nop
    22c8:	00431021 	addu	v0,v0,v1
    22cc:	24630001 	addiu	v1,v1,1
    22d0:	ae030020 	sw	v1,32(s0)
    22d4:	90420000 	lbu	v0,0(v0)
    22d8:	080008ba 	j	22e8 <gunzip+0x40c>
			22d8: R_MIPS_26	.text
    22dc:	00000000 	nop
    22e0:	0c00004b 	jal	12c <fill_inbuf>
			22e0: R_MIPS_26	.text
    22e4:	02002021 	move	a0,s0
    22e8:	1440ffef 	bnez	v0,22a8 <gunzip+0x3cc>
    22ec:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1118
    }
#endif
    /* Decompress */
    if ((res = inflate(zloc))) {
    22f0:	0c00075a 	jal	1d68 <inflate>
			22f0: R_MIPS_26	.text
    22f4:	02002021 	move	a0,s0
    22f8:	1040001a 	beqz	v0,2364 <gunzip+0x488>
    22fc:	00401821 	move	v1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1119
	    switch (res) {
    2300:	24020001 	li	v0,1
    2304:	10620011 	beq	v1,v0,234c <gunzip+0x470>
    2308:	00000000 	nop
    230c:	28620002 	slti	v0,v1,2
    2310:	10400005 	beqz	v0,2328 <gunzip+0x44c>
    2314:	24020002 	li	v0,2
    2318:	106000b8 	beqz	v1,25fc <gunzip+0x720>
    231c:	00000000 	nop
    2320:	080008d6 	j	2358 <gunzip+0x47c>
			2320: R_MIPS_26	.text
    2324:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1126
	    case 0:
		    break;
	    case 1:
		    error("invalid compressed format (err=1)");
		    break;
	    case 2:
		    error("invalid compressed format (err=2)");
    2328:	3c040000 	lui	a0,0x0
			2328: R_MIPS_HI16	.rodata
    232c:	106200b1 	beq	v1,v0,25f4 <gunzip+0x718>
/home/mips/lx4180/fs/../lib/inflate2.c:1127
		    break;
    2330:	24840120 	addiu	a0,a0,288
			2330: R_MIPS_LO16	.rodata
    2334:	24020003 	li	v0,3
/home/mips/lx4180/fs/../lib/inflate2.c:1129
	    case 3:
		    error("out of memory");
    2338:	3c040000 	lui	a0,0x0
			2338: R_MIPS_HI16	.rodata
    233c:	106200ad 	beq	v1,v0,25f4 <gunzip+0x718>
/home/mips/lx4180/fs/../lib/inflate2.c:1130
		    break;
    2340:	2484014c 	addiu	a0,a0,332
			2340: R_MIPS_LO16	.rodata
    2344:	080008d6 	j	2358 <gunzip+0x47c>
			2344: R_MIPS_26	.text
    2348:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1123
    234c:	3c040000 	lui	a0,0x0
			234c: R_MIPS_HI16	.rodata
    2350:	0800097d 	j	25f4 <gunzip+0x718>
			2350: R_MIPS_26	.text
/home/mips/lx4180/fs/../lib/inflate2.c:1124
    2354:	24840164 	addiu	a0,a0,356
			2354: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:1132
	    default:
		    error("invalid compressed format (other)");
    2358:	3c040000 	lui	a0,0x0
			2358: R_MIPS_HI16	.rodata
    235c:	0800097d 	j	25f4 <gunzip+0x718>
			235c: R_MIPS_26	.text
    2360:	24840190 	addiu	a0,a0,400
			2360: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:1142
	    }
	    return -1;
    }
	    
    /* Get the crc and original length */
    /* crc32  (see algorithm.doc)
     * uncompressed input size modulo 2^32
     */
#if 1
    orig_crc = (ulg) get_byte();
    2364:	8e030020 	lw	v1,32(s0)
    2368:	8e02001c 	lw	v0,28(s0)
    236c:	00000000 	nop
    2370:	0062102b 	sltu	v0,v1,v0
    2374:	10400008 	beqz	v0,2398 <gunzip+0x4bc>
    2378:	00000000 	nop
    237c:	8e020014 	lw	v0,20(s0)
    2380:	00000000 	nop
    2384:	00431021 	addu	v0,v0,v1
    2388:	90520000 	lbu	s2,0(v0)
    238c:	24620001 	addiu	v0,v1,1
    2390:	080008e9 	j	23a4 <gunzip+0x4c8>
			2390: R_MIPS_26	.text
    2394:	ae020020 	sw	v0,32(s0)
    2398:	0c00004b 	jal	12c <fill_inbuf>
			2398: R_MIPS_26	.text
    239c:	02002021 	move	a0,s0
    23a0:	00409021 	move	s2,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1143
    orig_crc |= (ulg) get_byte() << 8;
    23a4:	8e030020 	lw	v1,32(s0)
    23a8:	8e02001c 	lw	v0,28(s0)
    23ac:	00000000 	nop
    23b0:	0062102b 	sltu	v0,v1,v0
    23b4:	1040000b 	beqz	v0,23e4 <gunzip+0x508>
    23b8:	00000000 	nop
    23bc:	8e020014 	lw	v0,20(s0)
    23c0:	00000000 	nop
    23c4:	00431021 	addu	v0,v0,v1
    23c8:	90420000 	lbu	v0,0(v0)
    23cc:	00000000 	nop
    23d0:	00021200 	sll	v0,v0,0x8
    23d4:	02429025 	or	s2,s2,v0
    23d8:	24620001 	addiu	v0,v1,1
    23dc:	080008fd 	j	23f4 <gunzip+0x518>
			23dc: R_MIPS_26	.text
    23e0:	ae020020 	sw	v0,32(s0)
    23e4:	0c00004b 	jal	12c <fill_inbuf>
			23e4: R_MIPS_26	.text
    23e8:	02002021 	move	a0,s0
    23ec:	00021200 	sll	v0,v0,0x8
    23f0:	02429025 	or	s2,s2,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1144
    orig_crc |= (ulg) get_byte() << 16;
    23f4:	8e030020 	lw	v1,32(s0)
    23f8:	8e02001c 	lw	v0,28(s0)
    23fc:	00000000 	nop
    2400:	0062102b 	sltu	v0,v1,v0
    2404:	1040000b 	beqz	v0,2434 <gunzip+0x558>
    2408:	00000000 	nop
    240c:	8e020014 	lw	v0,20(s0)
    2410:	00000000 	nop
    2414:	00431021 	addu	v0,v0,v1
    2418:	90420000 	lbu	v0,0(v0)
    241c:	00000000 	nop
    2420:	00021400 	sll	v0,v0,0x10
    2424:	02429025 	or	s2,s2,v0
    2428:	24620001 	addiu	v0,v1,1
    242c:	08000911 	j	2444 <gunzip+0x568>
			242c: R_MIPS_26	.text
    2430:	ae020020 	sw	v0,32(s0)
    2434:	0c00004b 	jal	12c <fill_inbuf>
			2434: R_MIPS_26	.text
    2438:	02002021 	move	a0,s0
    243c:	00021400 	sll	v0,v0,0x10
    2440:	02429025 	or	s2,s2,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1145
    orig_crc |= (ulg) get_byte() << 24;
    2444:	8e030020 	lw	v1,32(s0)
    2448:	8e02001c 	lw	v0,28(s0)
    244c:	00000000 	nop
    2450:	0062102b 	sltu	v0,v1,v0
    2454:	1040000b 	beqz	v0,2484 <gunzip+0x5a8>
    2458:	00000000 	nop
    245c:	8e020014 	lw	v0,20(s0)
    2460:	00000000 	nop
    2464:	00431021 	addu	v0,v0,v1
    2468:	90420000 	lbu	v0,0(v0)
    246c:	00000000 	nop
    2470:	00021600 	sll	v0,v0,0x18
    2474:	02429025 	or	s2,s2,v0
    2478:	24620001 	addiu	v0,v1,1
    247c:	08000925 	j	2494 <gunzip+0x5b8>
			247c: R_MIPS_26	.text
    2480:	ae020020 	sw	v0,32(s0)
    2484:	0c00004b 	jal	12c <fill_inbuf>
			2484: R_MIPS_26	.text
    2488:	02002021 	move	a0,s0
    248c:	00021600 	sll	v0,v0,0x18
    2490:	02429025 	or	s2,s2,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1147
    
    orig_len = (ulg) get_byte();
    2494:	8e030020 	lw	v1,32(s0)
    2498:	8e02001c 	lw	v0,28(s0)
    249c:	00000000 	nop
    24a0:	0062102b 	sltu	v0,v1,v0
    24a4:	10400008 	beqz	v0,24c8 <gunzip+0x5ec>
    24a8:	00000000 	nop
    24ac:	8e020014 	lw	v0,20(s0)
    24b0:	00000000 	nop
    24b4:	00431021 	addu	v0,v0,v1
    24b8:	90510000 	lbu	s1,0(v0)
    24bc:	24620001 	addiu	v0,v1,1
    24c0:	08000935 	j	24d4 <gunzip+0x5f8>
			24c0: R_MIPS_26	.text
    24c4:	ae020020 	sw	v0,32(s0)
    24c8:	0c00004b 	jal	12c <fill_inbuf>
			24c8: R_MIPS_26	.text
    24cc:	02002021 	move	a0,s0
    24d0:	00408821 	move	s1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1148
    orig_len |= (ulg) get_byte() << 8;
    24d4:	8e030020 	lw	v1,32(s0)
    24d8:	8e02001c 	lw	v0,28(s0)
    24dc:	00000000 	nop
    24e0:	0062102b 	sltu	v0,v1,v0
    24e4:	1040000b 	beqz	v0,2514 <gunzip+0x638>
    24e8:	00000000 	nop
    24ec:	8e020014 	lw	v0,20(s0)
    24f0:	00000000 	nop
    24f4:	00431021 	addu	v0,v0,v1
    24f8:	90420000 	lbu	v0,0(v0)
    24fc:	00000000 	nop
    2500:	00021200 	sll	v0,v0,0x8
    2504:	02228825 	or	s1,s1,v0
    2508:	24620001 	addiu	v0,v1,1
    250c:	08000949 	j	2524 <gunzip+0x648>
			250c: R_MIPS_26	.text
    2510:	ae020020 	sw	v0,32(s0)
    2514:	0c00004b 	jal	12c <fill_inbuf>
			2514: R_MIPS_26	.text
    2518:	02002021 	move	a0,s0
    251c:	00021200 	sll	v0,v0,0x8
    2520:	02228825 	or	s1,s1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1149
    orig_len |= (ulg) get_byte() << 16;
    2524:	8e030020 	lw	v1,32(s0)
    2528:	8e02001c 	lw	v0,28(s0)
    252c:	00000000 	nop
    2530:	0062102b 	sltu	v0,v1,v0
    2534:	1040000b 	beqz	v0,2564 <gunzip+0x688>
    2538:	00000000 	nop
    253c:	8e020014 	lw	v0,20(s0)
    2540:	00000000 	nop
    2544:	00431021 	addu	v0,v0,v1
    2548:	90420000 	lbu	v0,0(v0)
    254c:	00000000 	nop
    2550:	00021400 	sll	v0,v0,0x10
    2554:	02228825 	or	s1,s1,v0
    2558:	24620001 	addiu	v0,v1,1
    255c:	0800095d 	j	2574 <gunzip+0x698>
			255c: R_MIPS_26	.text
    2560:	ae020020 	sw	v0,32(s0)
    2564:	0c00004b 	jal	12c <fill_inbuf>
			2564: R_MIPS_26	.text
    2568:	02002021 	move	a0,s0
    256c:	00021400 	sll	v0,v0,0x10
    2570:	02228825 	or	s1,s1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1150
    orig_len |= (ulg) get_byte() << 24;
    2574:	8e030020 	lw	v1,32(s0)
    2578:	8e02001c 	lw	v0,28(s0)
    257c:	00000000 	nop
    2580:	0062102b 	sltu	v0,v1,v0
    2584:	1040000b 	beqz	v0,25b4 <gunzip+0x6d8>
    2588:	00000000 	nop
    258c:	8e020014 	lw	v0,20(s0)
    2590:	00000000 	nop
    2594:	00431021 	addu	v0,v0,v1
    2598:	90420000 	lbu	v0,0(v0)
    259c:	00000000 	nop
    25a0:	00021600 	sll	v0,v0,0x18
    25a4:	02228825 	or	s1,s1,v0
    25a8:	24620001 	addiu	v0,v1,1
    25ac:	08000971 	j	25c4 <gunzip+0x6e8>
			25ac: R_MIPS_26	.text
    25b0:	ae020020 	sw	v0,32(s0)
    25b4:	0c00004b 	jal	12c <fill_inbuf>
			25b4: R_MIPS_26	.text
    25b8:	02002021 	move	a0,s0
    25bc:	00021600 	sll	v0,v0,0x18
    25c0:	02228825 	or	s1,s1,v0
/home/mips/lx4180/fs/../lib/inflate2.c:1153
    
    /* Validate decompression */
    if (orig_crc != CRC_VALUE) {
    25c4:	8e020440 	lw	v0,1088(s0)
    25c8:	00000000 	nop
    25cc:	00021027 	nor	v0,zero,v0
    25d0:	3c040000 	lui	a0,0x0
			25d0: R_MIPS_HI16	.rodata
    25d4:	16420007 	bne	s2,v0,25f4 <gunzip+0x718>
/home/mips/lx4180/fs/../lib/inflate2.c:1155
	    error("crc error");
	    return -1;
    25d8:	248401bc 	addiu	a0,a0,444
			25d8: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/../lib/inflate2.c:1157
    }
    if (orig_len != bytes_out) {
    25dc:	8e02002c 	lw	v0,44(s0)
    25e0:	00000000 	nop
    25e4:	12220007 	beq	s1,v0,2604 <gunzip+0x728>
    25e8:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1158
	    error("length error");
    25ec:	3c040000 	lui	a0,0x0
			25ec: R_MIPS_HI16	.rodata
    25f0:	248401d0 	addiu	a0,a0,464
			25f0: R_MIPS_LO16	.rodata
    25f4:	0c000000 	jal	0 <flat_core_dump>
			25f4: R_MIPS_26	printk
    25f8:	00000000 	nop
/home/mips/lx4180/fs/../lib/inflate2.c:1159
	    return -1;
    25fc:	08000982 	j	2608 <gunzip+0x72c>
			25fc: R_MIPS_26	.text
    2600:	2402ffff 	li	v0,-1
/home/mips/lx4180/fs/../lib/inflate2.c:1162
    }
#endif
    return 0;
    2604:	00001021 	move	v0,zero
/home/mips/lx4180/fs/../lib/inflate2.c:1163
}
    2608:	8fbf0028 	lw	ra,40(sp)
    260c:	8fb30024 	lw	s3,36(sp)
    2610:	8fb20020 	lw	s2,32(sp)
    2614:	8fb1001c 	lw	s1,28(sp)
    2618:	8fb00018 	lw	s0,24(sp)
    261c:	03e00008 	jr	ra
    2620:	27bd0030 	addiu	sp,sp,48

00002624 <decompress_exec>:
decompress_exec():
/home/mips/lx4180/fs/binfmt_flat.c:300
    2624:	27bdffd8 	addiu	sp,sp,-40
    2628:	afbf0024 	sw	ra,36(sp)
    262c:	afb40020 	sw	s4,32(sp)
    2630:	afb3001c 	sw	s3,28(sp)
    2634:	afb20018 	sw	s2,24(sp)
    2638:	afb10014 	sw	s1,20(sp)
    263c:	afb00010 	sw	s0,16(sp)
    2640:	00809021 	move	s2,a0
    2644:	00a0a021 	move	s4,a1
    2648:	00c08021 	move	s0,a2
    264c:	00e09821 	move	s3,a3
/home/mips/lx4180/fs/binfmt_flat.c:303
    2650:	24040448 	li	a0,1096
    2654:	0c000000 	jal	0 <flat_core_dump>
			2654: R_MIPS_26	kmalloc
    2658:	240501f0 	li	a1,496
    265c:	00408821 	move	s1,v0
/home/mips/lx4180/fs/binfmt_flat.c:304
    2660:	1220002e 	beqz	s1,271c <decompress_exec+0xf8>
    2664:	2402fff4 	li	v0,-12
/home/mips/lx4180/fs/binfmt_flat.c:308
    2668:	02202021 	move	a0,s1
    266c:	00002821 	move	a1,zero
    2670:	0c000000 	jal	0 <flat_core_dump>
			2670: R_MIPS_26	memset
    2674:	24060448 	li	a2,1096
/home/mips/lx4180/fs/binfmt_flat.c:309
    2678:	ae320000 	sw	s2,0(s1)
/home/mips/lx4180/fs/binfmt_flat.c:310
    267c:	ae300010 	sw	s0,16(s1)
/home/mips/lx4180/fs/binfmt_flat.c:311
    2680:	24041000 	li	a0,4096
    2684:	0c000000 	jal	0 <flat_core_dump>
			2684: R_MIPS_26	kmalloc
    2688:	240501f0 	li	a1,496
/home/mips/lx4180/fs/binfmt_flat.c:312
    268c:	10400009 	beqz	v0,26b4 <decompress_exec+0x90>
    2690:	ae220014 	sw	v0,20(s1)
/home/mips/lx4180/fs/binfmt_flat.c:317
    2694:	34048000 	li	a0,0x8000
    2698:	0c000000 	jal	0 <flat_core_dump>
			2698: R_MIPS_26	kmalloc
    269c:	240501f0 	li	a1,496
/home/mips/lx4180/fs/binfmt_flat.c:318
    26a0:	14400008 	bnez	v0,26c4 <decompress_exec+0xa0>
    26a4:	ae220018 	sw	v0,24(s1)
/home/mips/lx4180/fs/binfmt_flat.c:320
    26a8:	8e240014 	lw	a0,20(s1)
    26ac:	0c000000 	jal	0 <flat_core_dump>
			26ac: R_MIPS_26	kfree
    26b0:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:321
    26b4:	0c000000 	jal	0 <flat_core_dump>
			26b4: R_MIPS_26	kfree
    26b8:	02202021 	move	a0,s1
/home/mips/lx4180/fs/binfmt_flat.c:322
    26bc:	080009c7 	j	271c <decompress_exec+0xf8>
			26bc: R_MIPS_26	.text
    26c0:	2402fff4 	li	v0,-12
/home/mips/lx4180/fs/binfmt_flat.c:324
    26c4:	8e220014 	lw	v0,20(s1)
    26c8:	00000000 	nop
    26cc:	ae22000c 	sw	v0,12(s1)
/home/mips/lx4180/fs/binfmt_flat.c:325
    26d0:	ae330008 	sw	s3,8(s1)
/home/mips/lx4180/fs/binfmt_flat.c:326
    26d4:	ae340004 	sw	s4,4(s1)
/home/mips/lx4180/fs/binfmt_flat.c:327
    26d8:	2402ffff 	li	v0,-1
    26dc:	ae220440 	sw	v0,1088(s1)
/home/mips/lx4180/fs/binfmt_flat.c:328
    26e0:	0c00078b 	jal	1e2c <makecrc>
			26e0: R_MIPS_26	.text
    26e4:	02202021 	move	a0,s1
/home/mips/lx4180/fs/binfmt_flat.c:329
    26e8:	0c0007b7 	jal	1edc <gunzip>
			26e8: R_MIPS_26	.text
    26ec:	02202021 	move	a0,s1
/home/mips/lx4180/fs/binfmt_flat.c:330
    26f0:	8e240018 	lw	a0,24(s1)
    26f4:	0c000000 	jal	0 <flat_core_dump>
			26f4: R_MIPS_26	kfree
    26f8:	00408021 	move	s0,v0
/home/mips/lx4180/fs/binfmt_flat.c:331
    26fc:	8e240014 	lw	a0,20(s1)
    2700:	0c000000 	jal	0 <flat_core_dump>
			2700: R_MIPS_26	kfree
    2704:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:332
    2708:	0c000000 	jal	0 <flat_core_dump>
			2708: R_MIPS_26	kfree
    270c:	02202021 	move	a0,s1
/home/mips/lx4180/fs/binfmt_flat.c:333
    2710:	16000002 	bnez	s0,271c <decompress_exec+0xf8>
    2714:	2402fff4 	li	v0,-12
    2718:	00001021 	move	v0,zero
/home/mips/lx4180/fs/binfmt_flat.c:334
    271c:	8fbf0024 	lw	ra,36(sp)
    2720:	8fb40020 	lw	s4,32(sp)
    2724:	8fb3001c 	lw	s3,28(sp)
    2728:	8fb20018 	lw	s2,24(sp)
    272c:	8fb10014 	lw	s1,20(sp)
    2730:	8fb00010 	lw	s0,16(sp)
    2734:	03e00008 	jr	ra
    2738:	27bd0028 	addiu	sp,sp,40

0000273c <calc_reloc>:
calc_reloc():
/home/mips/lx4180/fs/binfmt_flat.c:340
    273c:	27bdffe8 	addiu	sp,sp,-24
    2740:	afbf0010 	sw	ra,16(sp)
    2744:	00801821 	move	v1,a0
/home/mips/lx4180/fs/binfmt_flat.c:382
    2748:	8ca60008 	lw	a2,8(a1)
/home/mips/lx4180/fs/binfmt_flat.c:383
    274c:	8ca80004 	lw	t0,4(a1)
/home/mips/lx4180/fs/binfmt_flat.c:384
    2750:	8ca40000 	lw	a0,0(a1)
/home/mips/lx4180/fs/binfmt_flat.c:385
    2754:	8ca7000c 	lw	a3,12(a1)
/home/mips/lx4180/fs/binfmt_flat.c:388
    2758:	3c01ffc0 	lui	at,0xffc0
    275c:	00231821 	addu	v1,at,v1
/home/mips/lx4180/fs/binfmt_flat.c:392
    2760:	34028000 	li	v0,0x8000
    2764:	00461021 	addu	v0,v0,a2
    2768:	0043102b 	sltu	v0,v0,v1
    276c:	14400007 	bnez	v0,278c <calc_reloc+0x50>
    2770:	0067102b 	sltu	v0,v1,a3
/home/mips/lx4180/fs/binfmt_flat.c:401
    2774:	14400003 	bnez	v0,2784 <calc_reloc+0x48>
    2778:	00642821 	addu	a1,v1,a0
/home/mips/lx4180/fs/binfmt_flat.c:404
    277c:	00672823 	subu	a1,v1,a3
    2780:	00a82821 	addu	a1,a1,t0
/home/mips/lx4180/fs/binfmt_flat.c:407
    2784:	080009f2 	j	27c8 <calc_reloc+0x8c>
			2784: R_MIPS_26	.text
    2788:	00a01021 	move	v0,a1
    278c:	00c43023 	subu	a2,a2,a0
    2790:	3c040000 	lui	a0,0x0
			2790: R_MIPS_HI16	.rodata
    2794:	248401e4 	addiu	a0,a0,484
			2794: R_MIPS_LO16	.rodata
    2798:	0c000000 	jal	0 <flat_core_dump>
			2798: R_MIPS_26	printk
    279c:	00602821 	move	a1,v1
/home/mips/lx4180/fs/binfmt_flat.c:410
    27a0:	3c040000 	lui	a0,0x0
			27a0: R_MIPS_HI16	.rodata
    27a4:	2484021c 	addiu	a0,a0,540
			27a4: R_MIPS_LO16	.rodata
    27a8:	0c000000 	jal	0 <flat_core_dump>
			27a8: R_MIPS_26	printk
    27ac:	2785023e 	addiu	a1,gp,574
/home/mips/lx4180/fs/binfmt_flat.c:411
    27b0:	2404000b 	li	a0,11
    27b4:	03802821 	move	a1,gp
    27b8:	0c000000 	jal	0 <flat_core_dump>
			27b8: R_MIPS_26	send_sig
    27bc:	00003021 	move	a2,zero
/home/mips/lx4180/fs/binfmt_flat.c:413
    27c0:	3c02ff00 	lui	v0,0xff00
    27c4:	3442ff01 	ori	v0,v0,0xff01
/home/mips/lx4180/fs/binfmt_flat.c:414
    27c8:	8fbf0010 	lw	ra,16(sp)
    27cc:	00000000 	nop
    27d0:	03e00008 	jr	ra
    27d4:	27bd0018 	addiu	sp,sp,24

000027d8 <old_reloc>:
old_reloc():
/home/mips/lx4180/fs/binfmt_flat.c:418
    27d8:	27bdffc8 	addiu	sp,sp,-56
    27dc:	afbf0034 	sw	ra,52(sp)
    27e0:	afb20030 	sw	s2,48(sp)
    27e4:	afb1002c 	sw	s1,44(sp)
    27e8:	afb00028 	sw	s0,40(sp)
/home/mips/lx4180/fs/binfmt_flat.c:420
    27ec:	3c030000 	lui	v1,0x0
			27ec: R_MIPS_HI16	.rodata
    27f0:	2463024c 	addiu	v1,v1,588
			27f0: R_MIPS_LO16	.rodata
    27f4:	8c620000 	lw	v0,0(v1)
    27f8:	00000000 	nop
    27fc:	afa20018 	sw	v0,24(sp)
    2800:	8c620004 	lw	v0,4(v1)
    2804:	00000000 	nop
    2808:	afa2001c 	sw	v0,28(sp)
    280c:	8c620008 	lw	v0,8(v1)
    2810:	00000000 	nop
    2814:	afa20020 	sw	v0,32(sp)
    2818:	8c62000c 	lw	v0,12(v1)
    281c:	00000000 	nop
    2820:	afa20024 	sw	v0,36(sp)
/home/mips/lx4180/fs/binfmt_flat.c:425
    2824:	00809021 	move	s2,a0
/home/mips/lx4180/fs/binfmt_flat.c:429
    2828:	8f82002c 	lw	v0,44(gp)
    282c:	00042880 	sll	a1,a0,0x2
    2830:	00052883 	sra	a1,a1,0x2
    2834:	8c420028 	lw	v0,40(v0)
    2838:	00000000 	nop
    283c:	00a28821 	addu	s1,a1,v0
/home/mips/lx4180/fs/binfmt_flat.c:433
    2840:	00048782 	srl	s0,a0,0x1e
    2844:	00101080 	sll	v0,s0,0x2
    2848:	03a21021 	addu	v0,sp,v0
    284c:	8c420018 	lw	v0,24(v0)
    2850:	00000000 	nop
    2854:	afa20010 	sw	v0,16(sp)
    2858:	3c040000 	lui	a0,0x0
			2858: R_MIPS_HI16	.rodata
    285c:	2484025c 	addiu	a0,a0,604
			285c: R_MIPS_LO16	.rodata
    2860:	8e270000 	lw	a3,0(s1)
    2864:	0c000000 	jal	0 <flat_core_dump>
			2864: R_MIPS_26	printk
    2868:	02203021 	move	a2,s1
/home/mips/lx4180/fs/binfmt_flat.c:438
    286c:	24020001 	li	v0,1
    2870:	12020010 	beq	s0,v0,28b4 <old_reloc+0xdc>
    2874:	2a020002 	slti	v0,s0,2
    2878:	10400005 	beqz	v0,2890 <old_reloc+0xb8>
    287c:	24020002 	li	v0,2
    2880:	12000007 	beqz	s0,28a0 <old_reloc+0xc8>
    2884:	00000000 	nop
    2888:	08000a39 	j	28e4 <old_reloc+0x10c>
			2888: R_MIPS_26	.text
    288c:	00000000 	nop
    2890:	1202000d 	beq	s0,v0,28c8 <old_reloc+0xf0>
    2894:	00000000 	nop
    2898:	08000a39 	j	28e4 <old_reloc+0x10c>
			2898: R_MIPS_26	.text
    289c:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:440
    28a0:	8f82002c 	lw	v0,44(gp)
    28a4:	8e230000 	lw	v1,0(s1)
    28a8:	8c420020 	lw	v0,32(v0)
/home/mips/lx4180/fs/binfmt_flat.c:441
    28ac:	08000a37 	j	28dc <old_reloc+0x104>
			28ac: R_MIPS_26	.text
    28b0:	00621821 	addu	v1,v1,v0
/home/mips/lx4180/fs/binfmt_flat.c:443
    28b4:	8f82002c 	lw	v0,44(gp)
    28b8:	8e230000 	lw	v1,0(s1)
    28bc:	8c420028 	lw	v0,40(v0)
/home/mips/lx4180/fs/binfmt_flat.c:444
    28c0:	08000a37 	j	28dc <old_reloc+0x104>
			28c0: R_MIPS_26	.text
    28c4:	00621821 	addu	v1,v1,v0
/home/mips/lx4180/fs/binfmt_flat.c:446
    28c8:	8f82002c 	lw	v0,44(gp)
    28cc:	8e230000 	lw	v1,0(s1)
    28d0:	8c42002c 	lw	v0,44(v0)
    28d4:	00000000 	nop
    28d8:	00621821 	addu	v1,v1,v0
/home/mips/lx4180/fs/binfmt_flat.c:447
    28dc:	08000a3d 	j	28f4 <old_reloc+0x11c>
			28dc: R_MIPS_26	.text
    28e0:	ae230000 	sw	v1,0(s1)
/home/mips/lx4180/fs/binfmt_flat.c:449
    28e4:	3c040000 	lui	a0,0x0
			28e4: R_MIPS_HI16	.rodata
    28e8:	248402b0 	addiu	a0,a0,688
			28e8: R_MIPS_LO16	.rodata
    28ec:	0c000000 	jal	0 <flat_core_dump>
			28ec: R_MIPS_26	printk
    28f0:	00122f82 	srl	a1,s2,0x1e
/home/mips/lx4180/fs/binfmt_flat.c:454
    28f4:	3c040000 	lui	a0,0x0
			28f4: R_MIPS_HI16	.rodata
    28f8:	248402dc 	addiu	a0,a0,732
			28f8: R_MIPS_LO16	.rodata
    28fc:	8e250000 	lw	a1,0(s1)
    2900:	0c000000 	jal	0 <flat_core_dump>
			2900: R_MIPS_26	printk
    2904:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:456
    2908:	8fbf0034 	lw	ra,52(sp)
    290c:	8fb20030 	lw	s2,48(sp)
    2910:	8fb1002c 	lw	s1,44(sp)
    2914:	8fb00028 	lw	s0,40(sp)
    2918:	03e00008 	jr	ra
    291c:	27bd0038 	addiu	sp,sp,56

00002920 <load_flat_file>:
load_flat_file():
/home/mips/lx4180/fs/binfmt_flat.c:461
    2920:	27bdff80 	addiu	sp,sp,-128
    2924:	afbf007c 	sw	ra,124(sp)
    2928:	afbe0078 	sw	s8,120(sp)
    292c:	afb70074 	sw	s7,116(sp)
    2930:	afb60070 	sw	s6,112(sp)
    2934:	afb5006c 	sw	s5,108(sp)
    2938:	afb40068 	sw	s4,104(sp)
    293c:	afb30064 	sw	s3,100(sp)
    2940:	afb20060 	sw	s2,96(sp)
    2944:	afb1005c 	sw	s1,92(sp)
    2948:	afb00058 	sw	s0,88(sp)
    294c:	0080a821 	move	s5,a0
    2950:	afa50084 	sw	a1,132(sp)
    2954:	afa60088 	sw	a2,136(sp)
/home/mips/lx4180/fs/binfmt_flat.c:463
    2958:	afa00034 	sw	zero,52(sp)
/home/mips/lx4180/fs/binfmt_flat.c:474
    295c:	3c040000 	lui	a0,0x0
			295c: R_MIPS_HI16	.rodata
    2960:	248402f4 	addiu	a0,a0,756
			2960: R_MIPS_LO16	.rodata
    2964:	8ea50128 	lw	a1,296(s5)
    2968:	0c000000 	jal	0 <flat_core_dump>
			2968: R_MIPS_26	printk
    296c:	00e08021 	move	s0,a3
/home/mips/lx4180/fs/binfmt_flat.c:476
    2970:	02a08821 	move	s1,s5
/home/mips/lx4180/fs/binfmt_flat.c:479
    2974:	8eb2000c 	lw	s2,12(s5)
/home/mips/lx4180/fs/binfmt_flat.c:480
    2978:	8ea30010 	lw	v1,16(s5)
    297c:	00000000 	nop
    2980:	00721023 	subu	v0,v1,s2
    2984:	afa2003c 	sw	v0,60(sp)
/home/mips/lx4180/fs/binfmt_flat.c:481
    2988:	8ea20014 	lw	v0,20(s5)
/home/mips/lx4180/fs/binfmt_flat.c:482
    298c:	8eb30018 	lw	s3,24(s5)
/home/mips/lx4180/fs/binfmt_flat.c:483
    2990:	12000005 	beqz	s0,29a8 <load_flat_file+0x88>
    2994:	0043b823 	subu	s7,v0,v1
/home/mips/lx4180/fs/binfmt_flat.c:484
    2998:	8e020000 	lw	v0,0(s0)
    299c:	00000000 	nop
    29a0:	02629821 	addu	s3,s3,v0
/home/mips/lx4180/fs/binfmt_flat.c:485
    29a4:	ae130000 	sw	s3,0(s0)
/home/mips/lx4180/fs/binfmt_flat.c:487
    29a8:	8e3e0020 	lw	s8,32(s1)
/home/mips/lx4180/fs/binfmt_flat.c:488
    29ac:	8e360024 	lw	s6,36(s1)
/home/mips/lx4180/fs/binfmt_flat.c:489
    29b0:	8e340004 	lw	s4,4(s1)
/home/mips/lx4180/include/asm/string.h:95

#define __HAVE_ARCH_STRNCMP
extern __inline__ int
strncmp(__const__ char *__cs, __const__ char *__ct, size_t __count)
{
    29b4:	3c030000 	lui	v1,0x0
			29b4: R_MIPS_HI16	.rodata
    29b8:	24630314 	addiu	v1,v1,788
			29b8: R_MIPS_LO16	.rodata
    29bc:	24020004 	li	v0,4
/home/mips/lx4180/include/asm/string.h:98
	int __res;

	__asm__ __volatile__(
    29c0:	02202821 	move	a1,s1
    29c4:	90a40000 	lbu	a0,0(a1)
    29c8:	10400006 	beqz	v0,29e4 <load_flat_file+0xc4>
    29cc:	90610000 	lbu	at,0(v1)
    29d0:	2442ffff 	addiu	v0,v0,-1
    29d4:	14240005 	bne	at,a0,29ec <load_flat_file+0xcc>
    29d8:	24a50001 	addiu	a1,a1,1
    29dc:	1480fff9 	bnez	a0,29c4 <load_flat_file+0xa4>
    29e0:	24630001 	addiu	v1,v1,1
    29e4:	00000000 	nop
    29e8:	00202021 	move	a0,at
    29ec:	00812023 	subu	a0,a0,at
/home/mips/lx4180/include/asm/string.h:95
    29f0:	14800005 	bnez	a0,2a08 <load_flat_file+0xe8>
    29f4:	24020004 	li	v0,4
    29f8:	1282001a 	beq	s4,v0,2a64 <load_flat_file+0x144>
    29fc:	24020002 	li	v0,2
    2a00:	12820018 	beq	s4,v0,2a64 <load_flat_file+0x144>
    2a04:	00000000 	nop
    2a08:	3c030000 	lui	v1,0x0
			2a08: R_MIPS_HI16	.rodata
    2a0c:	2463031c 	addiu	v1,v1,796
			2a0c: R_MIPS_LO16	.rodata
    2a10:	24020002 	li	v0,2
/home/mips/lx4180/include/asm/string.h:98
    2a14:	92240000 	lbu	a0,0(s1)
    2a18:	10400006 	beqz	v0,2a34 <load_flat_file+0x114>
    2a1c:	90610000 	lbu	at,0(v1)
    2a20:	2442ffff 	addiu	v0,v0,-1
    2a24:	14240005 	bne	at,a0,2a3c <load_flat_file+0x11c>
    2a28:	26310001 	addiu	s1,s1,1
    2a2c:	1480fff9 	bnez	a0,2a14 <load_flat_file+0xf4>
    2a30:	24630001 	addiu	v1,v1,1
    2a34:	00000000 	nop
    2a38:	00202021 	move	a0,at
    2a3c:	00812023 	subu	a0,a0,at
/home/mips/lx4180/include/asm/string.h:95
    2a40:	10800181 	beqz	a0,3048 <load_flat_file+0x728>
    2a44:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:499
    2a48:	3c040000 	lui	a0,0x0
			2a48: R_MIPS_HI16	.rodata
    2a4c:	24840320 	addiu	a0,a0,800
			2a4c: R_MIPS_LO16	.rodata
    2a50:	02802821 	move	a1,s4
    2a54:	0c000000 	jal	0 <flat_core_dump>
			2a54: R_MIPS_26	printk
    2a58:	24060004 	li	a2,4
/home/mips/lx4180/fs/binfmt_flat.c:501
    2a5c:	08000cf0 	j	33c0 <load_flat_file+0xaa0>
			2a5c: R_MIPS_26	.text
    2a60:	2405fff8 	li	a1,-8
/home/mips/lx4180/fs/binfmt_flat.c:505
    2a64:	16820008 	bne	s4,v0,2a88 <load_flat_file+0x168>
    2a68:	24020002 	li	v0,2
    2a6c:	8fa30088 	lw	v1,136(sp)
    2a70:	00000000 	nop
    2a74:	10600004 	beqz	v1,2a88 <load_flat_file+0x168>
    2a78:	24050004 	li	a1,4
/home/mips/lx4180/fs/binfmt_flat.c:506
    2a7c:	3c040000 	lui	a0,0x0
			2a7c: R_MIPS_HI16	.rodata
    2a80:	08000c10 	j	3040 <load_flat_file+0x720>
			2a80: R_MIPS_26	.text
/home/mips/lx4180/fs/binfmt_flat.c:508
    2a84:	24840350 	addiu	a0,a0,848
			2a84: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/binfmt_flat.c:515
    2a88:	16820004 	bne	s4,v0,2a9c <load_flat_file+0x17c>
    2a8c:	00000000 	nop
    2a90:	12c00002 	beqz	s6,2a9c <load_flat_file+0x17c>
    2a94:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:516
    2a98:	24160001 	li	s6,1
/home/mips/lx4180/fs/binfmt_flat.c:530
    2a9c:	8f8301f4 	lw	v1,500(gp)
/home/mips/lx4180/fs/binfmt_flat.c:531
    2aa0:	3c027fff 	lui	v0,0x7fff
    2aa4:	3442fffe 	ori	v0,v0,0xfffe
    2aa8:	0043102b 	sltu	v0,v0,v1
    2aac:	10400002 	beqz	v0,2ab8 <load_flat_file+0x198>
    2ab0:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:532
    2ab4:	2403ffff 	li	v1,-1
/home/mips/lx4180/fs/binfmt_flat.c:533
    2ab8:	8fa4003c 	lw	a0,60(sp)
    2abc:	00000000 	nop
    2ac0:	00971021 	addu	v0,a0,s7
    2ac4:	0062102b 	sltu	v0,v1,v0
    2ac8:	1440023d 	bnez	v0,33c0 <load_flat_file+0xaa0>
    2acc:	2405fff4 	li	a1,-12
/home/mips/lx4180/fs/binfmt_flat.c:537
    2ad0:	8fa50088 	lw	a1,136(sp)
    2ad4:	00000000 	nop
    2ad8:	14a0000e 	bnez	a1,2b14 <load_flat_file+0x1f4>
    2adc:	32c20005 	andi	v0,s6,0x5
/home/mips/lx4180/fs/binfmt_flat.c:538
    2ae0:	0c000000 	jal	0 <flat_core_dump>
			2ae0: R_MIPS_26	flush_old_exec
    2ae4:	02a02021 	move	a0,s5
/home/mips/lx4180/fs/binfmt_flat.c:539
    2ae8:	14400235 	bnez	v0,33c0 <load_flat_file+0xaa0>
    2aec:	00402821 	move	a1,v0
/home/mips/lx4180/fs/binfmt_flat.c:543
    2af0:	0c000000 	jal	0 <flat_core_dump>
			2af0: R_MIPS_26	setup_arg_pages
    2af4:	02a02021 	move	a0,s5
/home/mips/lx4180/fs/binfmt_flat.c:552
    2af8:	8f820074 	lw	v0,116(gp)
    2afc:	00000000 	nop
    2b00:	10400004 	beqz	v0,2b14 <load_flat_file+0x1f4>
    2b04:	32c20005 	andi	v0,s6,0x5
    2b08:	0c000000 	jal	0 <flat_core_dump>
			2b08: R_MIPS_26	__set_personality
    2b0c:	00002021 	move	a0,zero
/home/mips/lx4180/fs/binfmt_flat.c:566
    2b10:	32c20005 	andi	v0,s6,0x5
    2b14:	14400094 	bnez	v0,2d68 <load_flat_file+0x448>
    2b18:	02f31821 	addu	v1,s7,s3
/home/mips/lx4180/fs/binfmt_flat.c:571
    2b1c:	3c040000 	lui	a0,0x0
			2b1c: R_MIPS_HI16	.rodata
    2b20:	0c000000 	jal	0 <flat_core_dump>
			2b20: R_MIPS_26	printk
    2b24:	24840394 	addiu	a0,a0,916
			2b24: R_MIPS_LO16	.rodata
/home/mips/lx4180/include/linux/rwsem.h:52
/*
 * lock for writing
 */
static inline void down_write(struct rw_semaphore *sem)
{
    2b28:	8f84002c 	lw	a0,44(gp)
/home/mips/lx4180/include/linux/rwsem.h:54
	rwsemtrace(sem,"Entering down_write");
	__down_write(sem);
    2b2c:	0c000000 	jal	0 <flat_core_dump>
			2b2c: R_MIPS_26	__down_write
    2b30:	24840014 	addiu	a0,a0,20
/home/mips/lx4180/include/linux/mm.h:580

static inline unsigned long do_mmap(struct file *file, unsigned long addr,
	unsigned long len, unsigned long prot,
	unsigned long flag, unsigned long offset)
{
    2b34:	8ea40108 	lw	a0,264(s5)
/home/mips/lx4180/include/linux/mm.h:584
	unsigned long ret = -EINVAL;
	if ((offset + PAGE_ALIGN(len)) < offset)
		goto out;
	if (!(offset & ~PAGE_MASK))
    2b38:	00001821 	move	v1,zero
    2b3c:	30620fff 	andi	v0,v1,0xfff
    2b40:	14400008 	bnez	v0,2b64 <load_flat_file+0x244>
    2b44:	2405ffea 	li	a1,-22
/home/mips/lx4180/include/linux/mm.h:585
		ret = do_mmap_pgoff(file, addr, len, prot, flag, offset >> PAGE_SHIFT);
    2b48:	afa00010 	sw	zero,16(sp)
    2b4c:	afa00014 	sw	zero,20(sp)
    2b50:	00002821 	move	a1,zero
    2b54:	02403021 	move	a2,s2
    2b58:	0c000000 	jal	0 <flat_core_dump>
			2b58: R_MIPS_26	do_mmap_pgoff
    2b5c:	24070005 	li	a3,5
    2b60:	00402821 	move	a1,v0
/home/mips/lx4180/include/linux/mm.h:580
    2b64:	afa50030 	sw	a1,48(sp)
/home/mips/lx4180/include/linux/rwsem.h:72
/*
 * release a write lock
 */
static inline void up_write(struct rw_semaphore *sem)
{
    2b68:	8f84002c 	lw	a0,44(gp)
/home/mips/lx4180/include/linux/rwsem.h:74
	rwsemtrace(sem,"Entering up_write");
	__up_write(sem);
    2b6c:	0c000000 	jal	0 <flat_core_dump>
			2b6c: R_MIPS_26	__up_write
    2b70:	24840014 	addiu	a0,a0,20
/home/mips/lx4180/fs/binfmt_flat.c:576
    2b74:	8fa40030 	lw	a0,48(sp)
    2b78:	00000000 	nop
    2b7c:	2482ffff 	addiu	v0,a0,-1
    2b80:	2c42efff 	sltiu	v0,v0,-4097
    2b84:	1440000a 	bnez	v0,2bb0 <load_flat_file+0x290>
    2b88:	02f31821 	addu	v1,s7,s3
/home/mips/lx4180/fs/binfmt_flat.c:577
    2b8c:	14800003 	bnez	a0,2b9c <load_flat_file+0x27c>
    2b90:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:578
    2b94:	2405fff4 	li	a1,-12
    2b98:	afa50030 	sw	a1,48(sp)
/home/mips/lx4180/fs/binfmt_flat.c:579
    2b9c:	8fa20030 	lw	v0,48(sp)
    2ba0:	3c040000 	lui	a0,0x0
			2ba0: R_MIPS_HI16	.rodata
    2ba4:	248403c0 	addiu	a0,a0,960
			2ba4: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/binfmt_flat.c:580
    2ba8:	08000b80 	j	2e00 <load_flat_file+0x4e0>
			2ba8: R_MIPS_26	.text
    2bac:	00022823 	negu	a1,v0
/home/mips/lx4180/fs/binfmt_flat.c:583
    2bb0:	001e2080 	sll	a0,s8,0x2
    2bb4:	0083102b 	sltu	v0,a0,v1
    2bb8:	10400002 	beqz	v0,2bc4 <load_flat_file+0x2a4>
    2bbc:	afa40044 	sw	a0,68(sp)
    2bc0:	afa30044 	sw	v1,68(sp)
/home/mips/lx4180/include/linux/rwsem.h:52
/*
 * lock for writing
 */
static inline void down_write(struct rw_semaphore *sem)
{
    2bc4:	8f84002c 	lw	a0,44(gp)
/home/mips/lx4180/include/linux/rwsem.h:54
	rwsemtrace(sem,"Entering down_write");
	__down_write(sem);
    2bc8:	0c000000 	jal	0 <flat_core_dump>
			2bc8: R_MIPS_26	__down_write
    2bcc:	24840014 	addiu	a0,a0,20
/home/mips/lx4180/include/linux/mm.h:580

static inline unsigned long do_mmap(struct file *file, unsigned long addr,
	unsigned long len, unsigned long prot,
	unsigned long flag, unsigned long offset)
{
    2bd0:	8fa5003c 	lw	a1,60(sp)
    2bd4:	8fa20044 	lw	v0,68(sp)
    2bd8:	00000000 	nop
    2bdc:	00a23021 	addu	a2,a1,v0
/home/mips/lx4180/include/linux/mm.h:585
	unsigned long ret = -EINVAL;
	if ((offset + PAGE_ALIGN(len)) < offset)
		goto out;
	if (!(offset & ~PAGE_MASK))
		ret = do_mmap_pgoff(file, addr, len, prot, flag, offset >> PAGE_SHIFT);
    2be0:	afa00010 	sw	zero,16(sp)
    2be4:	afa00014 	sw	zero,20(sp)
    2be8:	00002021 	move	a0,zero
    2bec:	00002821 	move	a1,zero
    2bf0:	0c000000 	jal	0 <flat_core_dump>
			2bf0: R_MIPS_26	do_mmap_pgoff
    2bf4:	24070007 	li	a3,7
/home/mips/lx4180/include/linux/mm.h:580
    2bf8:	afa20038 	sw	v0,56(sp)
/home/mips/lx4180/include/linux/rwsem.h:72
/*
 * release a write lock
 */
static inline void up_write(struct rw_semaphore *sem)
{
    2bfc:	8f84002c 	lw	a0,44(gp)
/home/mips/lx4180/include/linux/rwsem.h:74
	rwsemtrace(sem,"Entering up_write");
	__up_write(sem);
    2c00:	0c000000 	jal	0 <flat_core_dump>
			2c00: R_MIPS_26	__up_write
    2c04:	24840014 	addiu	a0,a0,20
/home/mips/lx4180/fs/binfmt_flat.c:591
    2c08:	8fa30038 	lw	v1,56(sp)
    2c0c:	00000000 	nop
    2c10:	2462ffff 	addiu	v0,v1,-1
    2c14:	2c42efff 	sltiu	v0,v0,-4097
    2c18:	14400010 	bnez	v0,2c5c <load_flat_file+0x33c>
    2c1c:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:592
    2c20:	14600002 	bnez	v1,2c2c <load_flat_file+0x30c>
    2c24:	2404fff4 	li	a0,-12
/home/mips/lx4180/fs/binfmt_flat.c:593
    2c28:	afa40038 	sw	a0,56(sp)
/home/mips/lx4180/fs/binfmt_flat.c:594
    2c2c:	8fa20034 	lw	v0,52(sp)
    2c30:	3c040000 	lui	a0,0x0
			2c30: R_MIPS_HI16	.rodata
    2c34:	248403e8 	addiu	a0,a0,1000
			2c34: R_MIPS_LO16	.rodata
    2c38:	0c000000 	jal	0 <flat_core_dump>
			2c38: R_MIPS_26	printk
    2c3c:	00022823 	negu	a1,v0
/home/mips/lx4180/fs/binfmt_flat.c:596
    2c40:	8f84002c 	lw	a0,44(gp)
    2c44:	8fa50030 	lw	a1,48(sp)
    2c48:	0c000000 	jal	0 <flat_core_dump>
			2c48: R_MIPS_26	do_munmap
    2c4c:	02403021 	move	a2,s2
/home/mips/lx4180/fs/binfmt_flat.c:597
    2c50:	8fa50038 	lw	a1,56(sp)
    2c54:	08000cf1 	j	33c4 <load_flat_file+0xaa4>
			2c54: R_MIPS_26	.text
    2c58:	00a01021 	move	v0,a1
/home/mips/lx4180/fs/binfmt_flat.c:599
    2c5c:	afa30034 	sw	v1,52(sp)
/home/mips/lx4180/fs/binfmt_flat.c:602
    2c60:	8fa4003c 	lw	a0,60(sp)
    2c64:	00000000 	nop
    2c68:	00972821 	addu	a1,a0,s7
    2c6c:	00b32821 	addu	a1,a1,s3
    2c70:	3c040000 	lui	a0,0x0
			2c70: R_MIPS_HI16	.rodata
    2c74:	2484041c 	addiu	a0,a0,1052
			2c74: R_MIPS_LO16	.rodata
    2c78:	0c000000 	jal	0 <flat_core_dump>
			2c78: R_MIPS_26	printk
    2c7c:	00603021 	move	a2,v1
/home/mips/lx4180/fs/binfmt_flat.c:604
    2c80:	8e23000c 	lw	v1,12(s1)
    2c84:	00001021 	move	v0,zero
    2c88:	afa20028 	sw	v0,40(sp)
    2c8c:	afa3002c 	sw	v1,44(sp)
/home/mips/lx4180/fs/binfmt_flat.c:606
    2c90:	32c20008 	andi	v0,s6,0x8
    2c94:	1040000c 	beqz	v0,2cc8 <load_flat_file+0x3a8>
    2c98:	001e3080 	sll	a2,s8,0x2
/home/mips/lx4180/fs/binfmt_flat.c:607
    2c9c:	001e3880 	sll	a3,s8,0x2
    2ca0:	8fa5003c 	lw	a1,60(sp)
    2ca4:	00000000 	nop
    2ca8:	00a73821 	addu	a3,a1,a3
    2cac:	afa00010 	sw	zero,16(sp)
    2cb0:	8fa5002c 	lw	a1,44(sp)
    2cb4:	8fa60034 	lw	a2,52(sp)
    2cb8:	0c000989 	jal	2624 <decompress_exec>
			2cb8: R_MIPS_26	.text
    2cbc:	02a02021 	move	a0,s5
    2cc0:	08000b3d 	j	2cf4 <load_flat_file+0x3d4>
			2cc0: R_MIPS_26	.text
    2cc4:	00408021 	move	s0,v0
/home/mips/lx4180/fs/binfmt_flat.c:612
    2cc8:	8ea40108 	lw	a0,264(s5)
    2ccc:	00000000 	nop
    2cd0:	8c820010 	lw	v0,16(a0)
    2cd4:	8fa3003c 	lw	v1,60(sp)
    2cd8:	00000000 	nop
    2cdc:	00663021 	addu	a2,v1,a2
    2ce0:	8c420008 	lw	v0,8(v0)
    2ce4:	8fa50034 	lw	a1,52(sp)
    2ce8:	0040f809 	jalr	v0
    2cec:	27a70028 	addiu	a3,sp,40
    2cf0:	00408021 	move	s0,v0
/home/mips/lx4180/fs/binfmt_flat.c:615
    2cf4:	2c42f000 	sltiu	v0,v0,-4096
    2cf8:	14400011 	bnez	v0,2d40 <load_flat_file+0x420>
    2cfc:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:616
    2d00:	3c040000 	lui	a0,0x0
			2d00: R_MIPS_HI16	.rodata
    2d04:	24840454 	addiu	a0,a0,1108
			2d04: R_MIPS_LO16	.rodata
    2d08:	0c000000 	jal	0 <flat_core_dump>
			2d08: R_MIPS_26	printk
    2d0c:	00102823 	negu	a1,s0
/home/mips/lx4180/fs/binfmt_flat.c:617
    2d10:	8f84002c 	lw	a0,44(gp)
    2d14:	8fa50030 	lw	a1,48(sp)
    2d18:	0c000000 	jal	0 <flat_core_dump>
			2d18: R_MIPS_26	do_munmap
    2d1c:	02403021 	move	a2,s2
/home/mips/lx4180/fs/binfmt_flat.c:618
    2d20:	8fa4003c 	lw	a0,60(sp)
    2d24:	8fa50044 	lw	a1,68(sp)
    2d28:	00000000 	nop
    2d2c:	00853021 	addu	a2,a0,a1
    2d30:	8f84002c 	lw	a0,44(gp)
    2d34:	8fa50038 	lw	a1,56(sp)
/home/mips/lx4180/fs/binfmt_flat.c:619
    2d38:	08000bea 	j	2fa8 <load_flat_file+0x688>
			2d38: R_MIPS_26	.text
    2d3c:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:622
    2d40:	8e22001c 	lw	v0,28(s1)
    2d44:	00000000 	nop
    2d48:	00521023 	subu	v0,v0,s2
    2d4c:	8fa30034 	lw	v1,52(sp)
    2d50:	00000000 	nop
    2d54:	00621021 	addu	v0,v1,v0
    2d58:	afa20048 	sw	v0,72(sp)
/home/mips/lx4180/fs/binfmt_flat.c:623
    2d5c:	8fa40038 	lw	a0,56(sp)
    2d60:	08000bee 	j	2fb8 <load_flat_file+0x698>
			2d60: R_MIPS_26	.text
    2d64:	afa40040 	sw	a0,64(sp)
/home/mips/lx4180/fs/binfmt_flat.c:631
    2d68:	001e2880 	sll	a1,s8,0x2
    2d6c:	00a3102b 	sltu	v0,a1,v1
    2d70:	10400002 	beqz	v0,2d7c <load_flat_file+0x45c>
    2d74:	afa50044 	sw	a1,68(sp)
    2d78:	afa30044 	sw	v1,68(sp)
/home/mips/lx4180/include/linux/rwsem.h:52
/*
 * lock for writing
 */
static inline void down_write(struct rw_semaphore *sem)
{
    2d7c:	8f84002c 	lw	a0,44(gp)
/home/mips/lx4180/include/linux/rwsem.h:54
	rwsemtrace(sem,"Entering down_write");
	__down_write(sem);
    2d80:	0c000000 	jal	0 <flat_core_dump>
			2d80: R_MIPS_26	__down_write
    2d84:	24840014 	addiu	a0,a0,20
/home/mips/lx4180/include/linux/mm.h:580

static inline unsigned long do_mmap(struct file *file, unsigned long addr,
	unsigned long len, unsigned long prot,
	unsigned long flag, unsigned long offset)
{
    2d88:	8fa2003c 	lw	v0,60(sp)
    2d8c:	00000000 	nop
    2d90:	02423021 	addu	a2,s2,v0
    2d94:	8fa30044 	lw	v1,68(sp)
    2d98:	00000000 	nop
    2d9c:	00c33021 	addu	a2,a2,v1
/home/mips/lx4180/include/linux/mm.h:585
	unsigned long ret = -EINVAL;
	if ((offset + PAGE_ALIGN(len)) < offset)
		goto out;
	if (!(offset & ~PAGE_MASK))
		ret = do_mmap_pgoff(file, addr, len, prot, flag, offset >> PAGE_SHIFT);
    2da0:	afa00010 	sw	zero,16(sp)
    2da4:	afa00014 	sw	zero,20(sp)
    2da8:	00002021 	move	a0,zero
    2dac:	00002821 	move	a1,zero
    2db0:	0c000000 	jal	0 <flat_core_dump>
			2db0: R_MIPS_26	do_mmap_pgoff
    2db4:	24070007 	li	a3,7
/home/mips/lx4180/include/linux/mm.h:580
    2db8:	afa20030 	sw	v0,48(sp)
/home/mips/lx4180/include/linux/rwsem.h:72
/*
 * release a write lock
 */
static inline void up_write(struct rw_semaphore *sem)
{
    2dbc:	8f84002c 	lw	a0,44(gp)
/home/mips/lx4180/include/linux/rwsem.h:74
	rwsemtrace(sem,"Entering up_write");
	__up_write(sem);
    2dc0:	0c000000 	jal	0 <flat_core_dump>
			2dc0: R_MIPS_26	__up_write
    2dc4:	24840014 	addiu	a0,a0,20
/home/mips/lx4180/fs/binfmt_flat.c:638
    2dc8:	8fa40030 	lw	a0,48(sp)
    2dcc:	00000000 	nop
    2dd0:	2482ffff 	addiu	v0,a0,-1
    2dd4:	2c42efff 	sltiu	v0,v0,-4097
    2dd8:	1440000e 	bnez	v0,2e14 <load_flat_file+0x4f4>
    2ddc:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:639
    2de0:	14800002 	bnez	a0,2dec <load_flat_file+0x4cc>
    2de4:	2405fff4 	li	a1,-12
/home/mips/lx4180/fs/binfmt_flat.c:640
    2de8:	afa50030 	sw	a1,48(sp)
/home/mips/lx4180/fs/binfmt_flat.c:641
    2dec:	8fa20030 	lw	v0,48(sp)
    2df0:	00000000 	nop
    2df4:	00022823 	negu	a1,v0
    2df8:	3c040000 	lui	a0,0x0
			2df8: R_MIPS_HI16	.rodata
    2dfc:	24840478 	addiu	a0,a0,1144
			2dfc: R_MIPS_LO16	.rodata
    2e00:	0c000000 	jal	0 <flat_core_dump>
			2e00: R_MIPS_26	printk
    2e04:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:643
    2e08:	8fa50030 	lw	a1,48(sp)
    2e0c:	08000cf1 	j	33c4 <load_flat_file+0xaa4>
			2e0c: R_MIPS_26	.text
    2e10:	00a01021 	move	v0,a1
/home/mips/lx4180/fs/binfmt_flat.c:646
    2e14:	8e22000c 	lw	v0,12(s1)
    2e18:	8fa30030 	lw	v1,48(sp)
    2e1c:	00000000 	nop
    2e20:	00621021 	addu	v0,v1,v0
    2e24:	afa20034 	sw	v0,52(sp)
/home/mips/lx4180/fs/binfmt_flat.c:648
    2e28:	8e22001c 	lw	v0,28(s1)
    2e2c:	00000000 	nop
    2e30:	00621021 	addu	v0,v1,v0
    2e34:	afa20048 	sw	v0,72(sp)
/home/mips/lx4180/fs/binfmt_flat.c:656
    2e38:	32c20004 	andi	v0,s6,0x4
    2e3c:	1040000c 	beqz	v0,2e70 <load_flat_file+0x550>
    2e40:	afa30040 	sw	v1,64(sp)
/home/mips/lx4180/fs/binfmt_flat.c:657
    2e44:	24660040 	addiu	a2,v1,64
    2e48:	8fa4003c 	lw	a0,60(sp)
    2e4c:	00000000 	nop
    2e50:	02443821 	addu	a3,s2,a0
    2e54:	001e1080 	sll	v0,s8,0x2
    2e58:	00e23821 	addu	a3,a3,v0
    2e5c:	24e7ffc0 	addiu	a3,a3,-64
    2e60:	afa00010 	sw	zero,16(sp)
    2e64:	02a02021 	move	a0,s5
    2e68:	08000bb7 	j	2edc <load_flat_file+0x5bc>
			2e68: R_MIPS_26	.text
    2e6c:	24050040 	li	a1,64
/home/mips/lx4180/fs/binfmt_flat.c:666
    2e70:	32c20008 	andi	v0,s6,0x8
    2e74:	1040001d 	beqz	v0,2eec <load_flat_file+0x5cc>
    2e78:	02403021 	move	a2,s2
/home/mips/lx4180/fs/binfmt_flat.c:667
    2e7c:	00001021 	move	v0,zero
    2e80:	00001821 	move	v1,zero
    2e84:	afa20028 	sw	v0,40(sp)
    2e88:	afa3002c 	sw	v1,44(sp)
/home/mips/lx4180/fs/binfmt_flat.c:668
    2e8c:	8ea40108 	lw	a0,264(s5)
    2e90:	00000000 	nop
    2e94:	8c820010 	lw	v0,16(a0)
    2e98:	00000000 	nop
    2e9c:	8c420008 	lw	v0,8(v0)
    2ea0:	8fa50030 	lw	a1,48(sp)
    2ea4:	0040f809 	jalr	v0
    2ea8:	27a70028 	addiu	a3,sp,40
    2eac:	00408021 	move	s0,v0
/home/mips/lx4180/fs/binfmt_flat.c:670
    2eb0:	2c42f000 	sltiu	v0,v0,-4096
    2eb4:	1040002e 	beqz	v0,2f70 <load_flat_file+0x650>
    2eb8:	2e02f000 	sltiu	v0,s0,-4096
/home/mips/lx4180/fs/binfmt_flat.c:671
    2ebc:	001e3880 	sll	a3,s8,0x2
    2ec0:	8fa3003c 	lw	v1,60(sp)
    2ec4:	00000000 	nop
    2ec8:	00673821 	addu	a3,v1,a3
    2ecc:	afa00010 	sw	zero,16(sp)
    2ed0:	02a02021 	move	a0,s5
    2ed4:	02402821 	move	a1,s2
    2ed8:	8fa60034 	lw	a2,52(sp)
    2edc:	0c000989 	jal	2624 <decompress_exec>
			2edc: R_MIPS_26	.text
    2ee0:	00000000 	nop
    2ee4:	08000bdb 	j	2f6c <load_flat_file+0x64c>
			2ee4: R_MIPS_26	.text
    2ee8:	00408021 	move	s0,v0
/home/mips/lx4180/fs/binfmt_flat.c:677
    2eec:	00002021 	move	a0,zero
    2ef0:	00002821 	move	a1,zero
    2ef4:	afa40028 	sw	a0,40(sp)
    2ef8:	afa5002c 	sw	a1,44(sp)
/home/mips/lx4180/fs/binfmt_flat.c:678
    2efc:	8ea40108 	lw	a0,264(s5)
    2f00:	00000000 	nop
    2f04:	8c820010 	lw	v0,16(a0)
    2f08:	00000000 	nop
    2f0c:	8c420008 	lw	v0,8(v0)
    2f10:	8fa50030 	lw	a1,48(sp)
    2f14:	0040f809 	jalr	v0
    2f18:	27a70028 	addiu	a3,sp,40
    2f1c:	00408021 	move	s0,v0
/home/mips/lx4180/fs/binfmt_flat.c:680
    2f20:	2c42f000 	sltiu	v0,v0,-4096
    2f24:	10400012 	beqz	v0,2f70 <load_flat_file+0x650>
    2f28:	2e02f000 	sltiu	v0,s0,-4096
/home/mips/lx4180/fs/binfmt_flat.c:681
    2f2c:	8e23000c 	lw	v1,12(s1)
    2f30:	00001021 	move	v0,zero
    2f34:	afa20028 	sw	v0,40(sp)
    2f38:	afa3002c 	sw	v1,44(sp)
/home/mips/lx4180/fs/binfmt_flat.c:682
    2f3c:	8ea40108 	lw	a0,264(s5)
    2f40:	00000000 	nop
    2f44:	8c820010 	lw	v0,16(a0)
    2f48:	001e3080 	sll	a2,s8,0x2
    2f4c:	8fa5003c 	lw	a1,60(sp)
    2f50:	00000000 	nop
    2f54:	00a63021 	addu	a2,a1,a2
    2f58:	8c420008 	lw	v0,8(v0)
    2f5c:	8fa50034 	lw	a1,52(sp)
    2f60:	0040f809 	jalr	v0
    2f64:	27a70028 	addiu	a3,sp,40
    2f68:	00408021 	move	s0,v0
/home/mips/lx4180/fs/binfmt_flat.c:686
    2f6c:	2e02f000 	sltiu	v0,s0,-4096
    2f70:	14400011 	bnez	v0,2fb8 <load_flat_file+0x698>
    2f74:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:687
    2f78:	3c040000 	lui	a0,0x0
			2f78: R_MIPS_HI16	.rodata
    2f7c:	248404b0 	addiu	a0,a0,1200
			2f7c: R_MIPS_LO16	.rodata
    2f80:	0c000000 	jal	0 <flat_core_dump>
			2f80: R_MIPS_26	printk
    2f84:	00102823 	negu	a1,s0
/home/mips/lx4180/fs/binfmt_flat.c:688
    2f88:	8fa2003c 	lw	v0,60(sp)
    2f8c:	00000000 	nop
    2f90:	02423021 	addu	a2,s2,v0
    2f94:	8fa30044 	lw	v1,68(sp)
    2f98:	00000000 	nop
    2f9c:	00c33021 	addu	a2,a2,v1
    2fa0:	8f84002c 	lw	a0,44(gp)
    2fa4:	8fa50030 	lw	a1,48(sp)
    2fa8:	0c000000 	jal	0 <flat_core_dump>
			2fa8: R_MIPS_26	do_munmap
    2fac:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:690
    2fb0:	08000cf0 	j	33c0 <load_flat_file+0xaa0>
			2fb0: R_MIPS_26	.text
    2fb4:	02002821 	move	a1,s0
/home/mips/lx4180/fs/binfmt_flat.c:695
    2fb8:	8e260008 	lw	a2,8(s1)
    2fbc:	3c0200ff 	lui	v0,0xff
    2fc0:	3442ffff 	ori	v0,v0,0xffff
    2fc4:	3c040000 	lui	a0,0x0
			2fc4: R_MIPS_HI16	.rodata
    2fc8:	248404d8 	addiu	a0,a0,1240
			2fc8: R_MIPS_LO16	.rodata
    2fcc:	8fa50030 	lw	a1,48(sp)
    2fd0:	8e27000c 	lw	a3,12(s1)
    2fd4:	0c000000 	jal	0 <flat_core_dump>
			2fd4: R_MIPS_26	printk
    2fd8:	00c23024 	and	a2,a2,v0
/home/mips/lx4180/fs/binfmt_flat.c:698
    2fdc:	8fa40030 	lw	a0,48(sp)
    2fe0:	00000000 	nop
    2fe4:	24840040 	addiu	a0,a0,64
    2fe8:	afa4004c 	sw	a0,76(sp)
/home/mips/lx4180/fs/binfmt_flat.c:699
    2fec:	8fa50030 	lw	a1,48(sp)
    2ff0:	00000000 	nop
    2ff4:	00b22821 	addu	a1,a1,s2
    2ff8:	afa50050 	sw	a1,80(sp)
/home/mips/lx4180/fs/binfmt_flat.c:700
    2ffc:	3c050000 	lui	a1,0x0
			2ffc: R_MIPS_HI16	.rodata
    3000:	24a5050c 	addiu	a1,a1,1292
			3000: R_MIPS_LO16	.rodata
    3004:	8fa20088 	lw	v0,136(sp)
    3008:	00000000 	nop
    300c:	1440003a 	bnez	v0,30f8 <load_flat_file+0x7d8>
    3010:	00000000 	nop
    3014:	08000c14 	j	3050 <load_flat_file+0x730>
			3014: R_MIPS_26	.text
    3018:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:764
    301c:	3c040000 	lui	a0,0x0
			301c: R_MIPS_HI16	.rodata
    3020:	08000c0f 	j	303c <load_flat_file+0x71c>
			3020: R_MIPS_26	.text
/home/mips/lx4180/fs/binfmt_flat.c:765
    3024:	24840510 	addiu	a0,a0,1296
			3024: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/binfmt_flat.c:795
    3028:	3c040000 	lui	a0,0x0
			3028: R_MIPS_HI16	.rodata
    302c:	08000c0f 	j	303c <load_flat_file+0x71c>
			302c: R_MIPS_26	.text
/home/mips/lx4180/fs/binfmt_flat.c:796
    3030:	2484052c 	addiu	a0,a0,1324
			3030: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/binfmt_flat.c:812
    3034:	3c040000 	lui	a0,0x0
			3034: R_MIPS_HI16	.rodata
    3038:	24840548 	addiu	a0,a0,1352
			3038: R_MIPS_LO16	.rodata
    303c:	8fa50088 	lw	a1,136(sp)
    3040:	0c000000 	jal	0 <flat_core_dump>
			3040: R_MIPS_26	printk
    3044:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:813
    3048:	08000cf0 	j	33c0 <load_flat_file+0xaa0>
			3048: R_MIPS_26	.text
    304c:	2405fff8 	li	a1,-8
    3050:	8f82002c 	lw	v0,44(gp)
    3054:	8fa3004c 	lw	v1,76(sp)
    3058:	00000000 	nop
    305c:	ac430020 	sw	v1,32(v0)
/home/mips/lx4180/fs/binfmt_flat.c:702
    3060:	8f82002c 	lw	v0,44(gp)
    3064:	8fa40050 	lw	a0,80(sp)
    3068:	00000000 	nop
    306c:	ac440024 	sw	a0,36(v0)
/home/mips/lx4180/fs/binfmt_flat.c:703
    3070:	8f82002c 	lw	v0,44(gp)
    3074:	8fa50034 	lw	a1,52(sp)
    3078:	00000000 	nop
    307c:	ac450028 	sw	a1,40(v0)
/home/mips/lx4180/fs/binfmt_flat.c:704
    3080:	8f83002c 	lw	v1,44(gp)
    3084:	8fa4003c 	lw	a0,60(sp)
    3088:	00000000 	nop
    308c:	00a41021 	addu	v0,a1,a0
    3090:	ac62002c 	sw	v0,44(v1)
/home/mips/lx4180/fs/binfmt_flat.c:711
    3094:	8f83002c 	lw	v1,44(gp)
    3098:	00571021 	addu	v0,v0,s7
    309c:	ac620030 	sw	v0,48(v1)
/home/mips/lx4180/fs/binfmt_flat.c:712
    30a0:	8f84002c 	lw	a0,44(gp)
    30a4:	00000000 	nop
    30a8:	8c820030 	lw	v0,48(a0)
    30ac:	00000000 	nop
    30b0:	24420003 	addiu	v0,v0,3
    30b4:	2403fffc 	li	v1,-4
    30b8:	00431024 	and	v0,v0,v1
    30bc:	ac820034 	sw	v0,52(a0)
/home/mips/lx4180/fs/binfmt_flat.c:713
    30c0:	8f90002c 	lw	s0,44(gp)
    30c4:	8fa40040 	lw	a0,64(sp)
    30c8:	0c000000 	jal	0 <flat_core_dump>
			30c8: R_MIPS_26	ksize
    30cc:	00000000 	nop
    30d0:	8fa50040 	lw	a1,64(sp)
    30d4:	00000000 	nop
    30d8:	00a21021 	addu	v0,a1,v0
    30dc:	00531023 	subu	v0,v0,s3
    30e0:	ae020038 	sw	v0,56(s0)
/home/mips/lx4180/fs/binfmt_flat.c:717
    30e4:	8f82002c 	lw	v0,44(gp)
    30e8:	00000000 	nop
    30ec:	ac400050 	sw	zero,80(v0)
/home/mips/lx4180/fs/binfmt_flat.c:723
    30f0:	3c050000 	lui	a1,0x0
			30f0: R_MIPS_HI16	.rodata
    30f4:	24a50564 	addiu	a1,a1,1380
			30f4: R_MIPS_LO16	.rodata
    30f8:	8fa20050 	lw	v0,80(sp)
    30fc:	00000000 	nop
    3100:	afa20010 	sw	v0,16(sp)
    3104:	8fa30034 	lw	v1,52(sp)
    3108:	00000000 	nop
    310c:	afa30014 	sw	v1,20(sp)
    3110:	8fa4003c 	lw	a0,60(sp)
    3114:	00000000 	nop
    3118:	00648021 	addu	s0,v1,a0
    311c:	afb00018 	sw	s0,24(sp)
    3120:	afb0001c 	sw	s0,28(sp)
    3124:	02178021 	addu	s0,s0,s7
    3128:	26020003 	addiu	v0,s0,3
    312c:	2403fffc 	li	v1,-4
    3130:	00431024 	and	v0,v0,v1
    3134:	afa20020 	sw	v0,32(sp)
    3138:	3c040000 	lui	a0,0x0
			3138: R_MIPS_HI16	.rodata
    313c:	2484056c 	addiu	a0,a0,1388
			313c: R_MIPS_LO16	.rodata
    3140:	8ea60128 	lw	a2,296(s5)
    3144:	8fa7004c 	lw	a3,76(sp)
    3148:	0c000000 	jal	0 <flat_core_dump>
			3148: R_MIPS_26	printk
    314c:	2652ffc0 	addiu	s2,s2,-64
/home/mips/lx4180/fs/binfmt_flat.c:728
    3150:	8fa50088 	lw	a1,136(sp)
    3154:	00000000 	nop
    3158:	000518c0 	sll	v1,a1,0x3
    315c:	00651823 	subu	v1,v1,a1
    3160:	00031880 	sll	v1,v1,0x2
    3164:	8fa20084 	lw	v0,132(sp)
    3168:	00000000 	nop
    316c:	00621821 	addu	v1,v1,v0
    3170:	8fa4004c 	lw	a0,76(sp)
    3174:	00000000 	nop
    3178:	ac640000 	sw	a0,0(v1)
/home/mips/lx4180/fs/binfmt_flat.c:729
    317c:	8fa50034 	lw	a1,52(sp)
    3180:	00000000 	nop
    3184:	ac650004 	sw	a1,4(v1)
/home/mips/lx4180/fs/binfmt_flat.c:731
    3188:	ac700008 	sw	s0,8(v1)
/home/mips/lx4180/fs/binfmt_flat.c:733
    318c:	ac72000c 	sw	s2,12(v1)
/home/mips/lx4180/fs/binfmt_flat.c:734
    3190:	24020001 	li	v0,1
    3194:	a4620018 	sh	v0,24(v1)
/home/mips/lx4180/fs/binfmt_flat.c:735
    3198:	8e240008 	lw	a0,8(s1)
    319c:	3c0200ff 	lui	v0,0xff
    31a0:	3442ffff 	ori	v0,v0,0xffff
    31a4:	00822024 	and	a0,a0,v0
    31a8:	8fa20030 	lw	v0,48(sp)
    31ac:	00000000 	nop
    31b0:	00822021 	addu	a0,a0,v0
    31b4:	ac640010 	sw	a0,16(v1)
/home/mips/lx4180/fs/binfmt_flat.c:736
    31b8:	8e220028 	lw	v0,40(s1)
    31bc:	00000000 	nop
    31c0:	ac620014 	sw	v0,20(v1)
/home/mips/lx4180/fs/binfmt_flat.c:750
    31c4:	32c20002 	andi	v0,s6,0x2
    31c8:	10400019 	beqz	v0,3230 <load_flat_file+0x910>
    31cc:	2a820003 	slti	v0,s4,3
/home/mips/lx4180/fs/binfmt_flat.c:753
    31d0:	8ca30008 	lw	v1,8(a1)
    31d4:	2402ffff 	li	v0,-1
    31d8:	10620014 	beq	v1,v0,322c <load_flat_file+0x90c>
    31dc:	24b10008 	addiu	s1,a1,8
    31e0:	3c12ff00 	lui	s2,0xff00
    31e4:	3652ff01 	ori	s2,s2,0xff01
    31e8:	2410ffff 	li	s0,-1
/home/mips/lx4180/fs/binfmt_flat.c:759
    31ec:	8e240000 	lw	a0,0(s1)
    31f0:	00000000 	nop
    31f4:	10800008 	beqz	a0,3218 <load_flat_file+0x8f8>
    31f8:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:760
    31fc:	8fa50084 	lw	a1,132(sp)
    3200:	8fa60088 	lw	a2,136(sp)
    3204:	0c0009cf 	jal	273c <calc_reloc>
			3204: R_MIPS_26	.text
    3208:	00003821 	move	a3,zero
/home/mips/lx4180/fs/binfmt_flat.c:762
    320c:	1052ff83 	beq	v0,s2,301c <load_flat_file+0x6fc>
    3210:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:767
    3214:	ae220000 	sw	v0,0(s1)
/home/mips/lx4180/fs/binfmt_flat.c:753
    3218:	26310004 	addiu	s1,s1,4
    321c:	8e220000 	lw	v0,0(s1)
    3220:	00000000 	nop
    3224:	1450fff1 	bne	v0,s0,31ec <load_flat_file+0x8cc>
    3228:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:784
    322c:	2a820003 	slti	v0,s4,3
    3230:	14400034 	bnez	v0,3304 <load_flat_file+0x9e4>
    3234:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:785
    3238:	1bc0003e 	blez	s8,3334 <load_flat_file+0xa14>
    323c:	00009021 	move	s2,zero
    3240:	3c14ff00 	lui	s4,0xff00
    3244:	3694ff01 	ori	s4,s4,0xff01
    3248:	0280a821 	move	s5,s4
/home/mips/lx4180/fs/binfmt_flat.c:791
    324c:	00121080 	sll	v0,s2,0x2
    3250:	8fa30048 	lw	v1,72(sp)
    3254:	00000000 	nop
    3258:	00431021 	addu	v0,v0,v1
    325c:	8c440000 	lw	a0,0(v0)
    3260:	8fa50084 	lw	a1,132(sp)
    3264:	8fa60088 	lw	a2,136(sp)
    3268:	0c0009cf 	jal	273c <calc_reloc>
			3268: R_MIPS_26	.text
    326c:	24070001 	li	a3,1
    3270:	00408821 	move	s1,v0
/home/mips/lx4180/fs/binfmt_flat.c:792
    3274:	3c040000 	lui	a0,0x0
			3274: R_MIPS_HI16	.rodata
    3278:	24840594 	addiu	a0,a0,1428
			3278: R_MIPS_LO16	.rodata
    327c:	8c460000 	lw	a2,0(v0)
    3280:	0c000000 	jal	0 <flat_core_dump>
			3280: R_MIPS_26	printk
    3284:	00402821 	move	a1,v0
/home/mips/lx4180/fs/binfmt_flat.c:793
    3288:	1234ff67 	beq	s1,s4,3028 <load_flat_file+0x708>
    328c:	00000000 	nop
/home/mips/lx4180/include/asm/unaligned.h:40
static inline unsigned long __ldl_u(const unsigned int * __addr)
{
	unsigned long __res;

	__asm__("ulw\t%0,%1"
    3290:	8a220000 	lwl	v0,0(s1)
    3294:	9a220003 	lwr	v0,3(s1)
    3298:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:800
    329c:	00408021 	move	s0,v0
/home/mips/lx4180/fs/binfmt_flat.c:801
    32a0:	3c040000 	lui	a0,0x0
			32a0: R_MIPS_HI16	.rodata
    32a4:	248405a4 	addiu	a0,a0,1444
			32a4: R_MIPS_LO16	.rodata
    32a8:	0c000000 	jal	0 <flat_core_dump>
			32a8: R_MIPS_26	printk
    32ac:	00402821 	move	a1,v0
/home/mips/lx4180/fs/binfmt_flat.c:802
    32b0:	1200000e 	beqz	s0,32ec <load_flat_file+0x9cc>
    32b4:	02002021 	move	a0,s0
/home/mips/lx4180/fs/binfmt_flat.c:807
    32b8:	8fa50084 	lw	a1,132(sp)
    32bc:	8fa60088 	lw	a2,136(sp)
    32c0:	0c0009cf 	jal	273c <calc_reloc>
			32c0: R_MIPS_26	.text
    32c4:	00003821 	move	a3,zero
/home/mips/lx4180/fs/binfmt_flat.c:810
    32c8:	1055ff5a 	beq	v0,s5,3034 <load_flat_file+0x714>
    32cc:	00000000 	nop
/home/mips/lx4180/include/asm/unaligned.h:77
 * Store long ununaligned.
 */
static inline void __stl_u(unsigned long __val, unsigned int * __addr)
{
	__asm__("usw\t%1, %0"
    32d0:	a2220003 	sb	v0,3(s1)
    32d4:	00021202 	srl	v0,v0,0x8
    32d8:	a2220002 	sb	v0,2(s1)
    32dc:	00021202 	srl	v0,v0,0x8
    32e0:	a2220001 	sb	v0,1(s1)
    32e4:	00021202 	srl	v0,v0,0x8
    32e8:	a2220000 	sb	v0,0(s1)
/home/mips/lx4180/fs/binfmt_flat.c:785
    32ec:	26520001 	addiu	s2,s2,1
    32f0:	025e102a 	slt	v0,s2,s8
    32f4:	1040000f 	beqz	v0,3334 <load_flat_file+0xa14>
    32f8:	00121080 	sll	v0,s2,0x2
    32fc:	08000c94 	j	3250 <load_flat_file+0x930>
			32fc: R_MIPS_26	.text
    3300:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:820
    3304:	1bc0000b 	blez	s8,3334 <load_flat_file+0xa14>
    3308:	00009021 	move	s2,zero
/home/mips/lx4180/fs/binfmt_flat.c:821
    330c:	00121080 	sll	v0,s2,0x2
    3310:	8fa40048 	lw	a0,72(sp)
    3314:	00000000 	nop
    3318:	00441021 	addu	v0,v0,a0
    331c:	8c440000 	lw	a0,0(v0)
    3320:	0c000000 	jal	0 <flat_core_dump>
			3320: R_MIPS_26	old_reloc
    3324:	26520001 	addiu	s2,s2,1
/home/mips/lx4180/fs/binfmt_flat.c:820
    3328:	025e102a 	slt	v0,s2,s8
    332c:	1440fff8 	bnez	v0,3310 <load_flat_file+0x9f0>
    3330:	00121080 	sll	v0,s2,0x2
/home/mips/lx4180/fs/binfmt_flat.c:824
    3334:	8fa4004c 	lw	a0,76(sp)
    3338:	8fa50050 	lw	a1,80(sp)
    333c:	3c020000 	lui	v0,0x0
			333c: R_MIPS_HI16	_flush_icache_range
    3340:	8c420000 	lw	v0,0(v0)
			3340: R_MIPS_LO16	_flush_icache_range
    3344:	00000000 	nop
    3348:	0040f809 	jalr	v0
    334c:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:827
    3350:	8fa40040 	lw	a0,64(sp)
    3354:	0c000000 	jal	0 <flat_core_dump>
			3354: R_MIPS_26	ksize
    3358:	00000000 	nop
    335c:	8fa50040 	lw	a1,64(sp)
    3360:	00000000 	nop
    3364:	00a21021 	addu	v0,a1,v0
    3368:	00531023 	subu	v0,v0,s3
    336c:	8fa40088 	lw	a0,136(sp)
    3370:	00000000 	nop
    3374:	000418c0 	sll	v1,a0,0x3
    3378:	00641823 	subu	v1,v1,a0
    337c:	00031880 	sll	v1,v1,0x2
    3380:	8fa50084 	lw	a1,132(sp)
    3384:	00000000 	nop
    3388:	00651821 	addu	v1,v1,a1
    338c:	8c630008 	lw	v1,8(v1)
    3390:	00000000 	nop
    3394:	00431023 	subu	v0,v0,v1
    3398:	02e21021 	addu	v0,s7,v0
    339c:	00531021 	addu	v0,v0,s3
    33a0:	8fa30034 	lw	v1,52(sp)
    33a4:	8fa5003c 	lw	a1,60(sp)
    33a8:	00000000 	nop
    33ac:	00652021 	addu	a0,v1,a1
    33b0:	00002821 	move	a1,zero
    33b4:	0c000000 	jal	0 <flat_core_dump>
			33b4: R_MIPS_26	memset
    33b8:	00403021 	move	a2,v0
/home/mips/lx4180/fs/binfmt_flat.c:831
    33bc:	00002821 	move	a1,zero
/home/mips/lx4180/fs/binfmt_flat.c:832
    33c0:	00a01021 	move	v0,a1
    33c4:	8fbf007c 	lw	ra,124(sp)
    33c8:	8fbe0078 	lw	s8,120(sp)
    33cc:	8fb70074 	lw	s7,116(sp)
    33d0:	8fb60070 	lw	s6,112(sp)
    33d4:	8fb5006c 	lw	s5,108(sp)
    33d8:	8fb40068 	lw	s4,104(sp)
    33dc:	8fb30064 	lw	s3,100(sp)
    33e0:	8fb20060 	lw	s2,96(sp)
    33e4:	8fb1005c 	lw	s1,92(sp)
    33e8:	8fb00058 	lw	s0,88(sp)
    33ec:	03e00008 	jr	ra
    33f0:	27bd0080 	addiu	sp,sp,128

000033f4 <load_flat_binary>:
load_flat_binary():
/home/mips/lx4180/fs/binfmt_flat.c:874
    33f4:	27bdffb8 	addiu	sp,sp,-72
    33f8:	afbf0044 	sw	ra,68(sp)
    33fc:	afb20040 	sw	s2,64(sp)
    3400:	afb1003c 	sw	s1,60(sp)
    3404:	afb00038 	sw	s0,56(sp)
    3408:	00808821 	move	s1,a0
    340c:	00a09021 	move	s2,a1
/home/mips/lx4180/fs/binfmt_flat.c:883
    3410:	27b00010 	addiu	s0,sp,16
    3414:	02002021 	move	a0,s0
    3418:	00002821 	move	a1,zero
    341c:	0c000000 	jal	0 <flat_core_dump>
			341c: R_MIPS_26	memset
    3420:	2406001c 	li	a2,28
/home/mips/lx4180/fs/binfmt_flat.c:892
    3424:	3c020001 	lui	v0,0x1
    3428:	3442fffc 	ori	v0,v0,0xfffc
    342c:	8e230100 	lw	v1,256(s1)
    3430:	00000000 	nop
    3434:	00431023 	subu	v0,v0,v1
    3438:	afa20030 	sw	v0,48(sp)
/home/mips/lx4180/fs/binfmt_flat.c:893
    343c:	8e220120 	lw	v0,288(s1)
    3440:	00000000 	nop
    3444:	00021080 	sll	v0,v0,0x2
    3448:	8fa30030 	lw	v1,48(sp)
    344c:	00000000 	nop
    3450:	00431021 	addu	v0,v0,v1
    3454:	24420004 	addiu	v0,v0,4
    3458:	afa20030 	sw	v0,48(sp)
/home/mips/lx4180/fs/binfmt_flat.c:894
    345c:	8e220124 	lw	v0,292(s1)
    3460:	00000000 	nop
    3464:	00021080 	sll	v0,v0,0x2
    3468:	8fa30030 	lw	v1,48(sp)
    346c:	00000000 	nop
    3470:	00431021 	addu	v0,v0,v1
    3474:	24420004 	addiu	v0,v0,4
    3478:	afa20030 	sw	v0,48(sp)
/home/mips/lx4180/fs/binfmt_flat.c:897
    347c:	02202021 	move	a0,s1
    3480:	02002821 	move	a1,s0
    3484:	00003021 	move	a2,zero
    3488:	0c000a48 	jal	2920 <load_flat_file>
			3488: R_MIPS_26	.text
    348c:	27a70030 	addiu	a3,sp,48
/home/mips/lx4180/fs/binfmt_flat.c:898
    3490:	2c43f001 	sltiu	v1,v0,-4095
    3494:	10600090 	beqz	v1,36d8 <load_flat_binary+0x2e4>
    3498:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:909
    349c:	0c000000 	jal	0 <flat_core_dump>
			349c: R_MIPS_26	compute_creds
    34a0:	02202021 	move	a0,s1
/home/mips/lx4180/fs/binfmt_flat.c:910
    34a4:	8f820004 	lw	v0,4(gp)
    34a8:	2403ffbf 	li	v1,-65
    34ac:	00431024 	and	v0,v0,v1
/home/mips/lx4180/fs/binfmt_flat.c:912
    34b0:	3c040000 	lui	a0,0x0
			34b0: R_MIPS_HI16	.data
    34b4:	24840000 	addiu	a0,a0,0
			34b4: R_MIPS_LO16	.data
    34b8:	0c000000 	jal	0 <flat_core_dump>
			34b8: R_MIPS_26	set_binfmt
    34bc:	af820004 	sw	v0,4(gp)
/home/mips/lx4180/fs/binfmt_flat.c:914
    34c0:	8f82002c 	lw	v0,44(gp)
    34c4:	00000000 	nop
    34c8:	8c430038 	lw	v1,56(v0)
    34cc:	8fa20030 	lw	v0,48(sp)
    34d0:	00000000 	nop
    34d4:	00628021 	addu	s0,v1,v0
    34d8:	26100003 	addiu	s0,s0,3
    34dc:	2402fffc 	li	v0,-4
    34e0:	02028024 	and	s0,s0,v0
    34e4:	2610fffc 	addiu	s0,s0,-4
/home/mips/lx4180/fs/binfmt_flat.c:915
    34e8:	3c040000 	lui	a0,0x0
			34e8: R_MIPS_HI16	.rodata
    34ec:	248405b0 	addiu	a0,a0,1456
			34ec: R_MIPS_LO16	.rodata
    34f0:	0c000000 	jal	0 <flat_core_dump>
			34f0: R_MIPS_26	printk
    34f4:	02002821 	move	a1,s0
/home/mips/lx4180/fs/binfmt_flat.c:918
    34f8:	3c050001 	lui	a1,0x1
    34fc:	34a5fffb 	ori	a1,a1,0xfffb
    3500:	8e220100 	lw	v0,256(s1)
    3504:	00000000 	nop
    3508:	00a2102b 	sltu	v0,a1,v0
    350c:	1440004c 	bnez	v0,3640 <load_flat_binary+0x24c>
    3510:	02002021 	move	a0,s0
    3514:	3c070000 	lui	a3,0x0
			3514: R_MIPS_HI16	zone_table
    3518:	24e70000 	addiu	a3,a3,0
			3518: R_MIPS_LO16	zone_table
    351c:	00e03021 	move	a2,a3
/home/mips/lx4180/fs/binfmt_flat.c:919
    3520:	2610ffff 	addiu	s0,s0,-1
    3524:	04a10002 	bgez	a1,3530 <load_flat_binary+0x13c>
    3528:	00a01021 	move	v0,a1
    352c:	24a20fff 	addiu	v0,a1,4095
    3530:	00021303 	sra	v0,v0,0xc
    3534:	00021080 	sll	v0,v0,0x2
    3538:	00511021 	addu	v0,v0,s1
    353c:	24440080 	addiu	a0,v0,128
/home/mips/lx4180/include/linux/mm.h:353
struct zone_struct;
extern struct zone_struct *zone_table[];

static inline zone_t *page_zone(struct page *page)
{
    3540:	04a10002 	bgez	a1,354c <load_flat_binary+0x158>
    3544:	00a01021 	move	v0,a1
    3548:	24a20fff 	addiu	v0,a1,4095
    354c:	00021303 	sra	v0,v0,0xc
    3550:	00021080 	sll	v0,v0,0x2
    3554:	00511021 	addu	v0,v0,s1
    3558:	8c420080 	lw	v0,128(v0)
    355c:	00000000 	nop
/home/mips/lx4180/include/linux/mm.h:354
	return zone_table[page->flags >> ZONE_SHIFT];
    3560:	90420018 	lbu	v0,24(v0)
    3564:	00000000 	nop
    3568:	00021080 	sll	v0,v0,0x2
    356c:	00471021 	addu	v0,v0,a3
    3570:	8c420000 	lw	v0,0(v0)
/home/mips/lx4180/include/linux/mm.h:353
    3574:	8c840000 	lw	a0,0(a0)
    3578:	8c4200a8 	lw	v0,168(v0)
    357c:	00000000 	nop
    3580:	00822023 	subu	a0,a0,v0
    3584:	00042083 	sra	a0,a0,0x2
    3588:	00041940 	sll	v1,a0,0x5
    358c:	00641823 	subu	v1,v1,a0
    3590:	00031940 	sll	v1,v1,0x5
    3594:	00641821 	addu	v1,v1,a0
    3598:	000310c0 	sll	v0,v1,0x3
    359c:	00621821 	addu	v1,v1,v0
    35a0:	000313c0 	sll	v0,v1,0xf
    35a4:	00431023 	subu	v0,v0,v1
    35a8:	00021080 	sll	v0,v0,0x2
    35ac:	00441021 	addu	v0,v0,a0
    35b0:	00021023 	negu	v0,v0
    35b4:	00022300 	sll	a0,v0,0xc
    35b8:	04a10002 	bgez	a1,35c4 <load_flat_binary+0x1d0>
    35bc:	00a01021 	move	v0,a1
    35c0:	24a20fff 	addiu	v0,a1,4095
    35c4:	00021303 	sra	v0,v0,0xc
    35c8:	00021080 	sll	v0,v0,0x2
    35cc:	00511021 	addu	v0,v0,s1
    35d0:	8c420080 	lw	v0,128(v0)
    35d4:	00000000 	nop
/home/mips/lx4180/include/linux/mm.h:354
    35d8:	90420018 	lbu	v0,24(v0)
    35dc:	00000000 	nop
    35e0:	00021080 	sll	v0,v0,0x2
    35e4:	00461021 	addu	v0,v0,a2
    35e8:	8c420000 	lw	v0,0(v0)
/home/mips/lx4180/include/linux/mm.h:353
    35ec:	04a10002 	bgez	a1,35f8 <load_flat_binary+0x204>
    35f0:	00a01821 	move	v1,a1
    35f4:	24a30fff 	addiu	v1,a1,4095
    35f8:	00031b03 	sra	v1,v1,0xc
    35fc:	00031b00 	sll	v1,v1,0xc
    3600:	00a31823 	subu	v1,a1,v1
    3604:	8c4200ac 	lw	v0,172(v0)
    3608:	00000000 	nop
    360c:	00821021 	addu	v0,a0,v0
    3610:	00431021 	addu	v0,v0,v1
    3614:	3c018000 	lui	at,0x8000
    3618:	00220821 	addu	at,at,v0
    361c:	90220000 	lbu	v0,0(at)
    3620:	00000000 	nop
    3624:	a2020000 	sb	v0,0(s0)
/home/mips/lx4180/fs/binfmt_flat.c:918
    3628:	24a5ffff 	addiu	a1,a1,-1
    362c:	8e220100 	lw	v0,256(s1)
    3630:	00000000 	nop
    3634:	00a2102b 	sltu	v0,a1,v0
    3638:	1040ffb9 	beqz	v0,3520 <load_flat_binary+0x12c>
    363c:	02002021 	move	a0,s0
/home/mips/lx4180/fs/binfmt_flat.c:922
    3640:	0c00000d 	jal	34 <create_flat_tables>
			3640: R_MIPS_26	.text
    3644:	02202821 	move	a1,s1
/home/mips/lx4180/fs/binfmt_flat.c:928
    3648:	8fb00020 	lw	s0,32(sp)
/home/mips/lx4180/fs/binfmt_flat.c:930
    364c:	3c01ffc0 	lui	at,0xffc0
    3650:	00308021 	addu	s0,at,s0
/home/mips/lx4180/fs/binfmt_flat.c:944
    3654:	8f83002c 	lw	v1,44(gp)
    3658:	00000000 	nop
    365c:	ac62003c 	sw	v0,60(v1)
/home/mips/lx4180/fs/binfmt_flat.c:948
    3660:	8f82002c 	lw	v0,44(gp)
    3664:	3c040000 	lui	a0,0x0
			3664: R_MIPS_HI16	.rodata
    3668:	248405b8 	addiu	a0,a0,1464
			3668: R_MIPS_LO16	.rodata
    366c:	02402821 	move	a1,s2
    3670:	8c47003c 	lw	a3,60(v0)
    3674:	0c000000 	jal	0 <flat_core_dump>
			3674: R_MIPS_26	printk
    3678:	02003021 	move	a2,s0
/home/mips/lx4180/fs/binfmt_flat.c:952
    367c:	8e4300a8 	lw	v1,168(s2)
    3680:	3c02cfff 	lui	v0,0xcfff
    3684:	3442ffe7 	ori	v0,v0,0xffe7
    3688:	00621824 	and	v1,v1,v0
    368c:	ae4300a8 	sw	v1,168(s2)
    3690:	ae5000a0 	sw	s0,160(s2)
    3694:	8f82002c 	lw	v0,44(gp)
    3698:	00000000 	nop
    369c:	8c42003c 	lw	v0,60(v0)
    36a0:	00000000 	nop
    36a4:	ae42008c 	sw	v0,140(s2)
    36a8:	2402ffff 	li	v0,-1
    36ac:	af8203b4 	sw	v0,948(gp)
/home/mips/lx4180/fs/binfmt_flat.c:954
    36b0:	8f820018 	lw	v0,24(gp)
    36b4:	00000000 	nop
    36b8:	30420001 	andi	v0,v0,0x1
    36bc:	10400006 	beqz	v0,36d8 <load_flat_binary+0x2e4>
    36c0:	00001021 	move	v0,zero
/home/mips/lx4180/fs/binfmt_flat.c:955
    36c4:	24040005 	li	a0,5
    36c8:	03802821 	move	a1,gp
    36cc:	0c000000 	jal	0 <flat_core_dump>
			36cc: R_MIPS_26	send_sig
    36d0:	00003021 	move	a2,zero
/home/mips/lx4180/fs/binfmt_flat.c:958
    36d4:	00001021 	move	v0,zero
/home/mips/lx4180/fs/binfmt_flat.c:959
    36d8:	8fbf0044 	lw	ra,68(sp)
    36dc:	8fb20040 	lw	s2,64(sp)
    36e0:	8fb1003c 	lw	s1,60(sp)
    36e4:	8fb00038 	lw	s0,56(sp)
    36e8:	03e00008 	jr	ra
    36ec:	27bd0048 	addiu	sp,sp,72

000036f0 <load_flat_library>:
load_flat_library():
/home/mips/lx4180/fs/binfmt_flat.c:963
    36f0:	27bdffe8 	addiu	sp,sp,-24
    36f4:	afbf0010 	sw	ra,16(sp)
/home/mips/lx4180/fs/binfmt_flat.c:964
    36f8:	3c040000 	lui	a0,0x0
			36f8: R_MIPS_HI16	.rodata
    36fc:	0c000000 	jal	0 <flat_core_dump>
			36fc: R_MIPS_26	printk
    3700:	248405f0 	addiu	a0,a0,1520
			3700: R_MIPS_LO16	.rodata
/home/mips/lx4180/fs/binfmt_flat.c:966
    3704:	2402fff8 	li	v0,-8
    3708:	8fbf0010 	lw	ra,16(sp)
    370c:	00000000 	nop
    3710:	03e00008 	jr	ra
    3714:	27bd0018 	addiu	sp,sp,24
	...
Disassembly of section .data:

00000000 <flat_format>:
	...
exit_flat_binfmt():
/home/mips/lx4180/fs/binfmt_flat.c:970
   8:	000033f4 	0x33f4
			8: R_MIPS_32	.text
/home/mips/lx4180/fs/binfmt_flat.c:94
   c:	000036f0 	0x36f0
			c: R_MIPS_32	.text
  10:	00000000 	nop
			10: R_MIPS_32	.text
/home/mips/lx4180/fs/binfmt_flat.c:971
  14:	00001000 	sll	v0,zero,0x0

00000018 <border>:
  18:	00000010 	mfhi	zero
  1c:	00000011 	mthi	zero
/home/mips/lx4180/fs/binfmt_flat.c:97
  20:	00000012 	mflo	zero
flat_core_dump():
  24:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:971
  28:	00000008 	jr	zero
  2c:	00000007 	srav	zero,zero,zero
  30:	00000009 	jalr	zero,zero
create_flat_tables():
/home/mips/lx4180/fs/binfmt_flat.c:108
  34:	00000006 	srlv	zero,zero,zero
/home/mips/lx4180/fs/binfmt_flat.c:112
  38:	0000000a 	0xa
/home/mips/lx4180/fs/binfmt_flat.c:113
  3c:	00000005 	0x5
/home/mips/lx4180/fs/binfmt_flat.c:116
  40:	0000000b 	0xb
  44:	00000004 	sllv	zero,zero,zero
/home/mips/lx4180/fs/binfmt_flat.c:132
  48:	0000000c 	syscall
  4c:	00000003 	sra	zero,zero,0x0
  50:	0000000d 	break
/home/mips/lx4180/fs/binfmt_flat.c:133
  54:	00000002 	srl	zero,zero,0x0
/home/mips/lx4180/fs/binfmt_flat.c:134
  58:	0000000e 	0xe
  5c:	00000001 	0x1
  60:	0000000f 	0xf

00000064 <cplens>:
  64:	00030004 	sllv	zero,v1,zero
/home/mips/lx4180/fs/binfmt_flat.c:135
  68:	00050006 	srlv	zero,a1,zero
/home/mips/lx4180/fs/binfmt_flat.c:140
  6c:	00070008 	0x70008
  70:	0009000a 	0x9000a
  74:	000b000d 	break	0xb
/home/mips/lx4180/fs/binfmt_flat.c:141
  78:	000f0011 	0xf0011
  7c:	00130017 	0x130017
  80:	001b001f 	0x1b001f
/home/mips/lx4180/fs/binfmt_flat.c:142
  84:	0023002b 	sltu	zero,at,v1
  88:	0033003b 	0x33003b
/home/mips/lx4180/fs/binfmt_flat.c:143
  8c:	00430053 	0x430053
  90:	00630073 	0x630073
  94:	008300a3 	0x8300a3
  98:	00c300e3 	0xc300e3
/home/mips/lx4180/fs/binfmt_flat.c:145
  9c:	01020000 	0x1020000
  a0:	00000000 	nop

000000a4 <cplext>:
	...
/home/mips/lx4180/fs/binfmt_flat.c:146
  b4:	00010001 	0x10001
  b8:	00010001 	0x10001
/home/mips/lx4180/fs/binfmt_flat.c:148
  bc:	00020002 	srl	zero,v0,0x0
  c0:	00020002 	srl	zero,v0,0x0
/home/mips/lx4180/fs/binfmt_flat.c:149
  c4:	00030003 	sra	zero,v1,0x0
  c8:	00030003 	sra	zero,v1,0x0
  cc:	00040004 	sllv	zero,a0,zero
  d0:	00040004 	sllv	zero,a0,zero
/home/mips/lx4180/fs/binfmt_flat.c:150
  d4:	00050005 	0x50005
  d8:	00050005 	0x50005
  dc:	00000063 	0x63
/home/mips/lx4180/fs/binfmt_flat.c:151
  e0:	00630000 	0x630000

000000e4 <cpdist>:
  e4:	00010002 	srl	zero,at,0x0
  e8:	00030004 	sllv	zero,v1,zero
/home/mips/lx4180/fs/binfmt_flat.c:153
  ec:	00050007 	srav	zero,a1,zero
  f0:	0009000d 	break	0x9
  f4:	00110019 	multu	zero,s1
/home/mips/lx4180/fs/binfmt_flat.c:154
  f8:	00210031 	0x210031
  fc:	00410061 	0x410061
 100:	008100c1 	0x8100c1
 104:	01010181 	0x1010181
 108:	02010301 	0x2010301
/home/mips/lx4180/fs/binfmt_flat.c:156
 10c:	04010601 	b	1914 <inflate_dynamic+0x564>
 110:	08010c01 	j	43004 <load_flat_library+0x3f914>
/home/mips/lx4180/fs/binfmt_flat.c:157
 114:	10011801 	beq	zero,at,611c <load_flat_library+0x2a2c>
 118:	20013001 	addi	at,zero,12289
 11c:	40016001 	0x40016001

00000120 <cpdext>:
	...
/home/mips/lx4180/fs/binfmt_flat.c:159
 128:	00010001 	0x10001
fill_inbuf():
/home/mips/lx4180/fs/binfmt_flat.c:199
 12c:	00020002 	srl	zero,v0,0x0
 130:	00030003 	sra	zero,v1,0x0
 134:	00040004 	sllv	zero,a0,zero
 138:	00050005 	0x50005
/home/mips/lx4180/fs/binfmt_flat.c:203
 13c:	00060006 	srlv	zero,a2,zero
 140:	00070007 	srav	zero,a3,zero
 144:	00080008 	0x80008
 148:	00090009 	0x90009
/home/mips/lx4180/fs/binfmt_flat.c:205
 14c:	000a000a 	0xa000a
 150:	000b000b 	0xb000b
 154:	000c000c 	syscall	0x3000
 158:	000d000d 	break	0xd

0000015c <mask_bits>:
 15c:	00000001 	0x1
 160:	00030007 	srav	zero,v1,zero
/home/mips/lx4180/fs/binfmt_flat.c:206
 164:	000f001f 	0xf001f
 168:	003f007f 	0x3f007f
 16c:	00ff01ff 	0xff01ff
 170:	03ff07ff 	0x3ff07ff
/home/mips/lx4180/fs/binfmt_flat.c:207
 174:	0fff1fff 	jal	ffc7ffc <load_flat_library+0xffc490c>
 178:	3fff7fff 	0x3fff7fff
 17c:	ffff0000 	0xffff0000

00000180 <lbits>:
 180:	00000009 	jalr	zero,zero

00000184 <dbits>:
 184:	00000006 	srlv	zero,zero,zero

00000188 <p.3>:
 188:	00000000 	nop
 18c:	00000001 	0x1
 190:	00000002 	srl	zero,zero,0x0
 194:	00000004 	sllv	zero,zero,zero
 198:	00000005 	0x5
 19c:	00000007 	srav	zero,zero,zero
/home/mips/lx4180/fs/binfmt_flat.c:209
 1a0:	00000008 	jr	zero
 1a4:	0000000a 	0xa
 1a8:	0000000b 	0xb
/home/mips/lx4180/fs/binfmt_flat.c:211
 1ac:	0000000c 	syscall
 1b0:	00000010 	mfhi	zero
 1b4:	00000016 	0x16
 1b8:	00000017 	0x17
/home/mips/lx4180/fs/binfmt_flat.c:212
 1bc:	0000001a 	div	zero,zero,zero
Disassembly of section .reginfo:

00000000 <.reginfo>:
   0:	f0ff07fe 	0xf0ff07fe
	...
Disassembly of section .rodata:

00000000 <.rodata>:
   0:	50726f63 	0x50726f63
   4:	65737320 	0x65737320
exit_flat_binfmt():
/home/mips/lx4180/fs/binfmt_flat.c:970
   8:	25733a25 	addiu	s3,t3,14885
/home/mips/lx4180/fs/binfmt_flat.c:94
   c:	64207265 	0x64207265
  10:	63656976 	0x63656976
/home/mips/lx4180/fs/binfmt_flat.c:971
  14:	65642073 	0x65642073
  18:	69676e72 	0x69676e72
  1c:	20256420 	addi	a1,at,25632
/home/mips/lx4180/fs/binfmt_flat.c:97
  20:	616e6420 	0x616e6420
flat_core_dump():
  24:	73686f75 	0x73686f75
/home/mips/lx4180/fs/binfmt_flat.c:971
  28:	6c642068 	0x6c642068
  2c:	61766520 	0x61766520
  30:	636f7265 	0x636f7265
create_flat_tables():
/home/mips/lx4180/fs/binfmt_flat.c:108
  34:	2064756d 	addi	a0,v1,30061
/home/mips/lx4180/fs/binfmt_flat.c:112
  38:	7065640a 	0x7065640a
/home/mips/lx4180/fs/binfmt_flat.c:113
  3c:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:116
  40:	7a666c61 	0x7a666c61
  44:	743a2069 	0x743a2069
/home/mips/lx4180/fs/binfmt_flat.c:132
  48:	6e636f6d 	0x6e636f6d
  4c:	706c6574 	0x706c6574
  50:	65206c69 	0x65206c69
/home/mips/lx4180/fs/binfmt_flat.c:133
  54:	74657261 	0x74657261
/home/mips/lx4180/fs/binfmt_flat.c:134
  58:	6c207472 	0x6c207472
  5c:	65650a00 	0x65650a00
  60:	7a666c61 	0x7a666c61
  64:	743a2069 	0x743a2069
/home/mips/lx4180/fs/binfmt_flat.c:135
  68:	6e636f6d 	0x6e636f6d
/home/mips/lx4180/fs/binfmt_flat.c:140
  6c:	706c6574 	0x706c6574
  70:	65206469 	0x65206469
  74:	7374616e 	0x7374616e
/home/mips/lx4180/fs/binfmt_flat.c:141
  78:	63652074 	0x63652074
  7c:	7265650a 	0x7265650a
  80:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:142
  84:	7a666c61 	0x7a666c61
  88:	743a6261 	0x743a6261
/home/mips/lx4180/fs/binfmt_flat.c:143
  8c:	6420677a 	0x6420677a
  90:	6970206d 	0x6970206d
  94:	61676963 	0x61676963
  98:	206e756d 	addi	t6,v1,30061
/home/mips/lx4180/fs/binfmt_flat.c:145
  9c:	62657273 	0x62657273
  a0:	0a000000 	j	8000000 <load_flat_library+0x7ffc910>
  a4:	7a666c61 	0x7a666c61
/home/mips/lx4180/fs/binfmt_flat.c:146
  a8:	743a696e 	0x743a696e
  ac:	7465726e 	0x7465726e
  b0:	616c2065 	0x616c2065
  b4:	72726f72 	0x72726f72
  b8:	2c20696e 	sltiu	zero,at,26990
/home/mips/lx4180/fs/binfmt_flat.c:148
  bc:	76616c69 	0x76616c69
  c0:	64206d65 	0x64206d65
/home/mips/lx4180/fs/binfmt_flat.c:149
  c4:	74686f64 	0x74686f64
  c8:	0a000000 	j	8000000 <load_flat_library+0x7ffc910>
  cc:	7a666c61 	0x7a666c61
  d0:	743a496e 	0x743a496e
/home/mips/lx4180/fs/binfmt_flat.c:150
  d4:	70757420 	0x70757420
  d8:	69732065 	0x69732065
  dc:	6e637279 	0x6e637279
/home/mips/lx4180/fs/binfmt_flat.c:151
  e0:	70746564 	0x70746564
  e4:	0a000000 	j	8000000 <load_flat_library+0x7ffc910>
  e8:	7a666c61 	0x7a666c61
/home/mips/lx4180/fs/binfmt_flat.c:153
  ec:	743a4d75 	0x743a4d75
  f0:	6c746920 	0x6c746920
  f4:	70617274 	0x70617274
/home/mips/lx4180/fs/binfmt_flat.c:154
  f8:	20696e70 	addi	t1,v1,28272
  fc:	75740a00 	0x75740a00
 100:	7a666c61 	0x7a666c61
 104:	743a496e 	0x743a496e
 108:	70757420 	0x70757420
/home/mips/lx4180/fs/binfmt_flat.c:156
 10c:	68617320 	0x68617320
 110:	696e7661 	0x696e7661
/home/mips/lx4180/fs/binfmt_flat.c:157
 114:	6c696420 	0x6c696420
 118:	666c6167 	0x666c6167
 11c:	730a0000 	0x730a0000
/home/mips/lx4180/fs/binfmt_flat.c:159
 120:	7a666c61 	0x7a666c61
 124:	743a696e 	0x743a696e
 128:	76616c69 	0x76616c69
fill_inbuf():
/home/mips/lx4180/fs/binfmt_flat.c:199
 12c:	6420636f 	0x6420636f
 130:	6d707265 	0x6d707265
 134:	73736564 	0x73736564
 138:	20666f72 	addi	a2,v1,28530
/home/mips/lx4180/fs/binfmt_flat.c:203
 13c:	6d617420 	0x6d617420
 140:	28657272 	slti	a1,v1,29298
 144:	3d32290a 	0x3d32290a
 148:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:205
 14c:	7a666c61 	0x7a666c61
 150:	743a6f75 	0x743a6f75
 154:	74206f66 	0x74206f66
 158:	206d656d 	addi	t5,v1,25965
 15c:	6f72790a 	0x6f72790a
 160:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:206
 164:	7a666c61 	0x7a666c61
 168:	743a696e 	0x743a696e
 16c:	76616c69 	0x76616c69
 170:	6420636f 	0x6420636f
/home/mips/lx4180/fs/binfmt_flat.c:207
 174:	6d707265 	0x6d707265
 178:	73736564 	0x73736564
 17c:	20666f72 	addi	a2,v1,28530
 180:	6d617420 	0x6d617420
 184:	28657272 	slti	a1,v1,29298
 188:	3d31290a 	0x3d31290a
 18c:	00000000 	nop
 190:	7a666c61 	0x7a666c61
 194:	743a696e 	0x743a696e
 198:	76616c69 	0x76616c69
 19c:	6420636f 	0x6420636f
/home/mips/lx4180/fs/binfmt_flat.c:209
 1a0:	6d707265 	0x6d707265
 1a4:	73736564 	0x73736564
 1a8:	20666f72 	addi	a2,v1,28530
/home/mips/lx4180/fs/binfmt_flat.c:211
 1ac:	6d617420 	0x6d617420
 1b0:	286f7468 	slti	t7,v1,29800
 1b4:	6572290a 	0x6572290a
 1b8:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:212
 1bc:	7a666c61 	0x7a666c61
 1c0:	743a6372 	0x743a6372
 1c4:	63206572 	0x63206572
 1c8:	726f720a 	0x726f720a
/home/mips/lx4180/fs/binfmt_flat.c:213
 1cc:	00000000 	nop
/home/mips/lx4180/fs/binfmt_flat.c:214
 1d0:	7a666c61 	0x7a666c61
 1d4:	743a6c65 	0x743a6c65
/home/mips/lx4180/fs/binfmt_flat.c:215
 1d8:	6e677468 	0x6e677468
 1dc:	20657272 	addi	a1,v1,29298
 1e0:	6f720a00 	0x6f720a00
 1e4:	42494e46 	c0	0x494e46
/home/mips/lx4180/fs/binfmt_flat.c:216
 1e8:	4d545f46 	0x4d545f46
 1ec:	4c41543a 	0x4c41543a
 1f0:	2072656c 	addi	s2,v1,25964
 1f4:	6f63206f 	0x6f63206f
 1f8:	75747369 	0x75747369
flush_window():
/home/mips/lx4180/fs/binfmt_flat.c:219
 1fc:	64652070 	0x64652070
 200:	726f6772 	0x726f6772
 204:	616d2030 	0x616d2030
 208:	78257820 	0x78257820
 20c:	2830202d 	slti	s0,at,8237
/home/mips/lx4180/fs/binfmt_flat.c:220
 210:	20307825 	addi	s0,at,30757
/home/mips/lx4180/fs/binfmt_flat.c:223
 214:	782f3078 	0x782f3078
 218:	25782900 	addiu	t8,t3,10496
 21c:	2c206b69 	sltiu	zero,at,27497
 220:	6c6c696e 	0x6c6c696e
 224:	67202573 	0x67202573
/home/mips/lx4180/fs/binfmt_flat.c:224
 228:	210a0000 	addi	t2,t0,0
/home/mips/lx4180/fs/binfmt_flat.c:225
 22c:	54455854 	0x54455854
 230:	00000000 	nop
 234:	44415441 	0x44415441
 238:	00000000 	nop
 23c:	42535300 	c0	0x535300
/home/mips/lx4180/fs/binfmt_flat.c:227
 240:	2a554e4b 	slti	s5,s2,20043
 244:	4e4f574e 	c3	0x4f574e
/home/mips/lx4180/fs/binfmt_flat.c:228
 248:	2a000000 	slti	zero,s0,0
 24c:	0000022c 	0x22c
			24c: R_MIPS_32	.rodata
 250:	00000234 	0x234
			250: R_MIPS_32	.rodata
 254:	0000023c 	0x23c
			254: R_MIPS_32	.rodata
 258:	00000240 	sll	zero,zero,0x9
			258: R_MIPS_32	.rodata
 25c:	52656c6f 	0x52656c6f
 260:	63617469 	0x63617469
 264:	6f6e206f 	0x6f6e206f
/home/mips/lx4180/fs/binfmt_flat.c:225
 268:	66207661 	0x66207661
 26c:	72696162 	0x72696162
 270:	6c652061 	0x6c652061
 274:	74204441 	0x74204441
/home/mips/lx4180/fs/binfmt_flat.c:230
 278:	54415345 	0x54415345
/home/mips/lx4180/fs/binfmt_flat.c:231
 27c:	472b2578 	c1	0x12b2578
 280:	20286164 	addi	t0,at,24932
 284:	64726573 	0x64726573
 288:	73202570 	0x73202570
 28c:	2c206375 	sltiu	zero,at,25461
/home/mips/lx4180/fs/binfmt_flat.c:232
 290:	7272656e 	0x7272656e
 294:	746c7920 	0x746c7920
 298:	25782920 	addiu	t8,t3,10528
 29c:	696e746f 	0x696e746f
/home/mips/lx4180/fs/binfmt_flat.c:233
 2a0:	20736567 	addi	s3,v1,25959
/home/mips/lx4180/fs/binfmt_flat.c:234
 2a4:	6d656e74 	0x6d656e74
 2a8:	2025730a 	addi	a1,at,29450
 2ac:	00000000 	nop
 2b0:	42494e46 	c0	0x494e46
 2b4:	4d545f46 	0x4d545f46
huft_build():
/home/mips/lx4180/fs/../lib/inflate2.c:276
 2b8:	4c41543a 	0x4c41543a
 2bc:	20556e6b 	addi	s5,v0,28267
 2c0:	6e6f776e 	0x6e6f776e
 2c4:	2072656c 	addi	s2,v1,25964
 2c8:	6f636174 	0x6f636174
 2cc:	696f6e20 	0x696f6e20
 2d0:	74797065 	0x74797065
 2d4:	3d25780a 	0x3d25780a
 2d8:	00000000 	nop
 2dc:	52656c6f 	0x52656c6f
 2e0:	63617469 	0x63617469
 2e4:	6f6e2062 	0x6f6e2062
 2e8:	6563616d 	0x6563616d
 2ec:	65202578 	0x65202578
 2f0:	0a000000 	j	8000000 <load_flat_library+0x7ffc910>
 2f4:	42494e46 	c0	0x494e46
/home/mips/lx4180/fs/../lib/inflate2.c:300
 2f8:	4d545f46 	0x4d545f46
 2fc:	4c41543a 	0x4c41543a
 300:	204c6f61 	addi	t4,v0,28513
 304:	64696e67 	0x64696e67
/home/mips/lx4180/fs/../lib/inflate2.c:301
 308:	2066696c 	addi	a2,v1,26988
 30c:	653a2025 	0x653a2025
/home/mips/lx4180/fs/../lib/inflate2.c:302
 310:	730a0000 	0x730a0000
/home/mips/lx4180/fs/../lib/inflate2.c:305
 314:	62464c54 	0x62464c54
 318:	00000000 	nop
 31c:	23210000 	addi	at,t9,0
 320:	42494e46 	c0	0x494e46
 324:	4d545f46 	0x4d545f46
 328:	4c41543a 	0x4c41543a
 32c:	20626164 	addi	v0,v1,24932
 330:	206d6167 	addi	t5,v1,24935
/home/mips/lx4180/fs/../lib/inflate2.c:307
 334:	69632f72 	0x69632f72
 338:	65762028 	0x65762028
 33c:	30782578 	andi	t8,v1,0x2578
/home/mips/lx4180/fs/../lib/inflate2.c:308
 340:	2c206e65 	sltiu	zero,at,28261
 344:	65642030 	0x65642030
 348:	78257829 	0x78257829
 34c:	0a000000 	j	8000000 <load_flat_library+0x7ffc910>
 350:	42494e46 	c0	0x494e46
/home/mips/lx4180/fs/../lib/inflate2.c:310
 354:	4d545f46 	0x4d545f46
 358:	4c41543a 	0x4c41543a
 35c:	20736861 	addi	s3,v1,26721
/home/mips/lx4180/fs/../lib/inflate2.c:311
 360:	72656420 	0x72656420
/home/mips/lx4180/fs/../lib/inflate2.c:312
 364:	6c696272 	0x6c696272
 368:	61726965 	0x61726965
/home/mips/lx4180/fs/../lib/inflate2.c:318
 36c:	73206172 	0x73206172
/home/mips/lx4180/fs/../lib/inflate2.c:319
 370:	65206e6f 	0x65206e6f
/home/mips/lx4180/fs/../lib/inflate2.c:320
 374:	74206176 	0x74206176
 378:	61696c61 	0x61696c61
 37c:	626c6520 	0x626c6520
 380:	6265666f 	0x6265666f
 384:	72652072 	0x72652072
 388:	65762030 	0x65762030
/home/mips/lx4180/fs/../lib/inflate2.c:319
 38c:	7825780a 	0x7825780a
 390:	00000000 	nop
 394:	42494e46 	c0	0x494e46
 398:	4d545f46 	0x4d545f46
/home/mips/lx4180/fs/../lib/inflate2.c:323
 39c:	4c41543a 	0x4c41543a
 3a0:	20524f4d 	addi	s2,v0,20301
 3a4:	206d6170 	addi	t5,v1,24944
/home/mips/lx4180/fs/../lib/inflate2.c:324
 3a8:	70696e67 	0x70696e67
/home/mips/lx4180/fs/../lib/inflate2.c:325
 3ac:	206f6620 	addi	t7,v1,26144
 3b0:	66696c65 	0x66696c65
/home/mips/lx4180/fs/../lib/inflate2.c:326
 3b4:	20287765 	addi	t0,at,30565
 3b8:	20686f70 	addi	t0,v1,28528
 3bc:	65290a00 	0x65290a00
 3c0:	556e6162 	0x556e6162
 3c4:	6c652074 	0x6c652074
 3c8:	6f206d6d 	0x6f206d6d
/home/mips/lx4180/fs/../lib/inflate2.c:325
 3cc:	61702070 	0x61702070
 3d0:	726f6365 	0x726f6365
 3d4:	73732074 	0x73732074
/home/mips/lx4180/fs/../lib/inflate2.c:329
 3d8:	6578742c 	0x6578742c
 3dc:	20657272 	addi	a1,v1,29298
 3e0:	6e6f2025 	0x6e6f2025
/home/mips/lx4180/fs/../lib/inflate2.c:330
 3e4:	640a0000 	0x640a0000
/home/mips/lx4180/fs/../lib/inflate2.c:331
 3e8:	556e6162 	0x556e6162
/home/mips/lx4180/fs/../lib/inflate2.c:336
 3ec:	6c652074 	0x6c652074
 3f0:	6f20616c 	0x6f20616c
 3f4:	6c6f6361 	0x6c6f6361
 3f8:	74652052 	0x74652052
 3fc:	414d2066 	0x414d2066
 400:	6f722070 	0x6f722070
/home/mips/lx4180/fs/../lib/inflate2.c:337
 404:	726f6365 	0x726f6365
 408:	73732064 	0x73732064
 40c:	6174612c 	0x6174612c
 410:	20657272 	addi	a1,v1,29298
 414:	6e6f2025 	0x6e6f2025
 418:	640a0000 	0x640a0000
 41c:	42494e46 	c0	0x494e46
 420:	4d545f46 	0x4d545f46
/home/mips/lx4180/fs/../lib/inflate2.c:336
 424:	4c41543a 	0x4c41543a
 428:	20416c6c 	addi	at,v0,27756
 42c:	6f636174 	0x6f636174
 430:	65642064 	0x65642064
 434:	6174612b 	0x6174612b
/home/mips/lx4180/fs/../lib/inflate2.c:339
 438:	6273732b 	0x6273732b
 43c:	73746163 	0x73746163
 440:	6b202825 	0x6b202825
 444:	64206279 	0x64206279
 448:	74657329 	0x74657329
 44c:	3a202578 	xori	zero,s1,0x2578
 450:	0a000000 	j	8000000 <load_flat_library+0x7ffc910>
 454:	556e6162 	0x556e6162
 458:	6c652074 	0x6c652074
 45c:	6f207265 	0x6f207265
 460:	61642064 	0x61642064
/home/mips/lx4180/fs/../lib/inflate2.c:338
 464:	6174612b 	0x6174612b
 468:	6273732c 	0x6273732c
/home/mips/lx4180/fs/../lib/inflate2.c:341
 46c:	20657272 	addi	a1,v1,29298
 470:	6e6f2025 	0x6e6f2025
 474:	640a0000 	0x640a0000
 478:	556e6162 	0x556e6162
 47c:	6c652074 	0x6c652074
 480:	6f20616c 	0x6f20616c
 484:	6c6f6361 	0x6c6f6361
/home/mips/lx4180/fs/../lib/inflate2.c:346
 488:	74652052 	0x74652052
 48c:	414d2066 	0x414d2066
/home/mips/lx4180/fs/../lib/inflate2.c:347
 490:	6f722070 	0x6f722070
/home/mips/lx4180/fs/../lib/inflate2.c:348
 494:	726f6365 	0x726f6365
 498:	73732074 	0x73732074
 49c:	6578742f 	0x6578742f
/home/mips/lx4180/fs/../lib/inflate2.c:349
 4a0:	64617461 	0x64617461
 4a4:	2c206572 	sltiu	zero,at,25970
 4a8:	726e6f20 	0x726e6f20
 4ac:	25640a00 	addiu	a0,t3,2560
 4b0:	556e6162 	0x556e6162
 4b4:	6c652074 	0x6c652074
 4b8:	6f207265 	0x6f207265
 4bc:	61642063 	0x61642063
/home/mips/lx4180/fs/../lib/inflate2.c:355
 4c0:	6f64652b 	0x6f64652b
 4c4:	64617461 	0x64617461
/home/mips/lx4180/fs/../lib/inflate2.c:356
 4c8:	2b627373 	slti	v0,k1,29555
 4cc:	2c206572 	sltiu	zero,at,25970
 4d0:	726e6f20 	0x726e6f20
/home/mips/lx4180/fs/../lib/inflate2.c:357
 4d4:	25640a00 	addiu	a0,t3,2560
 4d8:	4d617070 	0x4d617070
 4dc:	696e6720 	0x696e6720
 4e0:	69732025 	0x69732025
/home/mips/lx4180/fs/../lib/inflate2.c:358
 4e4:	782c2045 	0x782c2045
 4e8:	6e747279 	0x6e747279
 4ec:	20706f69 	addi	s0,v1,28521
 4f0:	6e742069 	0x6e742069
 4f4:	73202578 	0x73202578
 4f8:	2c206461 	sltiu	zero,at,25697
 4fc:	74615f73 	0x74615f73
 500:	74617274 	0x74617274
 504:	20697320 	addi	t1,v1,29472
/home/mips/lx4180/fs/../lib/inflate2.c:359
 508:	25780a00 	addiu	t8,t3,2560
 50c:	4c696200 	0x4c696200
 510:	63616c63 	0x63616c63
 514:	5f72656c 	0x5f72656c
 518:	6f632066 	0x6f632066
 51c:	61696c20 	0x61696c20
/home/mips/lx4180/fs/../lib/inflate2.c:364
 520:	31302069 	andi	s0,t1,0x2069
 524:	64203d20 	0x64203d20
/home/mips/lx4180/fs/../lib/inflate2.c:365
 528:	25780a00 	addiu	t8,t3,2560
 52c:	63616c63 	0x63616c63
/home/mips/lx4180/fs/../lib/inflate2.c:367
 530:	5f72656c 	0x5f72656c
/home/mips/lx4180/fs/../lib/inflate2.c:368
 534:	6f632066 	0x6f632066
/home/mips/lx4180/fs/../lib/inflate2.c:369
 538:	61696c20 	0x61696c20
/home/mips/lx4180/fs/../lib/inflate2.c:374
 53c:	32206964 	andi	zero,s1,0x6964
 540:	203d2025 	addi	sp,at,8229
 544:	780a0000 	0x780a0000
 548:	63616c63 	0x63616c63
 54c:	5f72656c 	0x5f72656c
/home/mips/lx4180/fs/../lib/inflate2.c:377
 550:	6f632066 	0x6f632066
 554:	61696c20 	0x61696c20
 558:	33206964 	andi	zero,t9,0x6964
 55c:	203d2025 	addi	sp,at,8229
/home/mips/lx4180/fs/../lib/inflate2.c:378
 560:	780a0000 	0x780a0000
 564:	4c6f6164 	0x4c6f6164
 568:	00000000 	nop
 56c:	25732025 	addiu	s3,t3,8229
 570:	733a2054 	0x733a2054
 574:	4558543d 	0x4558543d
 578:	25782d25 	addiu	t8,t3,11557
 57c:	78204441 	0x78204441
 580:	54413d25 	0x54413d25
 584:	782d2578 	0x782d2578
 588:	20425353 	addi	v0,v0,21331
/home/mips/lx4180/fs/../lib/inflate2.c:383
 58c:	3d25782d 	0x3d25782d
 590:	25780a00 	addiu	t8,t3,2560
 594:	7270203d 	0x7270203d
 598:	2025782c 	addi	a1,at,30764
 59c:	2a72703d 	slti	s2,s3,28733
 5a0:	25780a00 	addiu	t8,t3,2560
/home/mips/lx4180/fs/../lib/inflate2.c:386
 5a4:	61646472 	0x61646472
/home/mips/lx4180/fs/../lib/inflate2.c:387
 5a8:	3d25780a 	0x3d25780a
/home/mips/lx4180/fs/../lib/inflate2.c:390
 5ac:	00000000 	nop
 5b0:	703d2578 	0x703d2578
 5b4:	0a000000 	j	8000000 <load_flat_library+0x7ffc910>
 5b8:	73746172 	0x73746172
 5bc:	745f7468 	0x745f7468
 5c0:	72656164 	0x72656164
 5c4:	28726567 	slti	s2,v1,25959
/home/mips/lx4180/fs/../lib/inflate2.c:391
 5c8:	733d3078 	0x733d3078
 5cc:	25782c20 	addiu	t8,t3,11296
 5d0:	656e7472 	0x656e7472
 5d4:	793d3078 	0x793d3078
 5d8:	25782c20 	addiu	t8,t3,11296
 5dc:	73746172 	0x73746172
 5e0:	745f7374 	0x745f7374
/home/mips/lx4180/fs/../lib/inflate2.c:394
 5e4:	61636b3d 	0x61636b3d
 5e8:	30782578 	andi	t8,v1,0x2578
/home/mips/lx4180/fs/../lib/inflate2.c:395
 5ec:	290a0000 	slti	t2,t0,0
 5f0:	6c6f6164 	0x6c6f6164
 5f4:	5f6c6962 	0x5f6c6962
 5f8:	0a000000 	j	8000000 <load_flat_library+0x7ffc910>
/home/mips/lx4180/fs/../lib/inflate2.c:396
 5fc:	00000000 	nop
Disassembly of section .fixup:

00000000 <.fixup>:
   0:	0800001e 	j	78 <cplens+0x14>
			0: R_MIPS_26	.text
   4:	2402fff2 	li	v0,-14
exit_flat_binfmt():
/home/mips/lx4180/fs/binfmt_flat.c:970
   8:	08000027 	j	9c <cplens+0x38>
			8: R_MIPS_26	.text
/home/mips/lx4180/fs/binfmt_flat.c:94
   c:	2402fff2 	li	v0,-14
  10:	2403fff2 	li	v1,-14
/home/mips/lx4180/fs/binfmt_flat.c:971
  14:	08000029 	j	a4 <cplext>
			14: R_MIPS_26	.text
  18:	00001021 	move	v0,zero
  1c:	08000031 	j	c4 <cplext+0x20>
			1c: R_MIPS_26	.text
/home/mips/lx4180/fs/binfmt_flat.c:97
  20:	2402fff2 	li	v0,-14
flat_core_dump():
  24:	0800003a 	j	e8 <cpdist+0x4>
			24: R_MIPS_26	.text
/home/mips/lx4180/fs/binfmt_flat.c:971
  28:	2402fff2 	li	v0,-14
  2c:	2403fff2 	li	v1,-14
  30:	0800003d 	j	f4 <cpdist+0x10>
			30: R_MIPS_26	.text
create_flat_tables():
/home/mips/lx4180/fs/binfmt_flat.c:108
  34:	00001021 	move	v0,zero
/home/mips/lx4180/fs/binfmt_flat.c:112
  38:	08000045 	j	114 <cpdist+0x30>
			38: R_MIPS_26	.text
/home/mips/lx4180/fs/binfmt_flat.c:113
  3c:	2402fff2 	li	v0,-14
Disassembly of section __ex_table:

00000000 <__ex_table>:
   0:	00000070 	0x70
			0: R_MIPS_32	.text
   4:	00000000 	nop
			4: R_MIPS_32	.fixup
exit_flat_binfmt():
/home/mips/lx4180/fs/binfmt_flat.c:970
   8:	00000094 	0x94
			8: R_MIPS_32	.text
/home/mips/lx4180/fs/binfmt_flat.c:94
   c:	00000008 	jr	zero
			c: R_MIPS_32	.fixup
  10:	0000009c 	0x9c
			10: R_MIPS_32	.text
/home/mips/lx4180/fs/binfmt_flat.c:971
  14:	00000010 	mfhi	zero
			14: R_MIPS_32	.fixup
  18:	000000bc 	0xbc
			18: R_MIPS_32	.text
  1c:	0000001c 	0x1c
			1c: R_MIPS_32	.fixup
/home/mips/lx4180/fs/binfmt_flat.c:97
  20:	000000e0 	0xe0
			20: R_MIPS_32	.text
flat_core_dump():
  24:	00000024 	and	zero,zero,zero
			24: R_MIPS_32	.fixup
/home/mips/lx4180/fs/binfmt_flat.c:971
  28:	000000ec 	0xec
			28: R_MIPS_32	.text
  2c:	0000002c 	0x2c
			2c: R_MIPS_32	.fixup
  30:	0000010c 	syscall	0x4
			30: R_MIPS_32	.text
create_flat_tables():
/home/mips/lx4180/fs/binfmt_flat.c:108
  34:	00000038 	0x38
			34: R_MIPS_32	.fixup
Disassembly of section .text.init:

00000000 <init_flat_binfmt>:
init_flat_binfmt():
   0:	27bdffe8 	addiu	sp,sp,-24
   4:	afbf0010 	sw	ra,16(sp)
exit_flat_binfmt():
/home/mips/lx4180/fs/binfmt_flat.c:970
   8:	3c040000 	lui	a0,0x0
			8: R_MIPS_HI16	.data
/home/mips/lx4180/fs/binfmt_flat.c:94
   c:	0c000000 	jal	0 <init_flat_binfmt>
			c: R_MIPS_26	register_binfmt
  10:	24840000 	addiu	a0,a0,0
			10: R_MIPS_LO16	.data
/home/mips/lx4180/fs/binfmt_flat.c:971
  14:	8fbf0010 	lw	ra,16(sp)
  18:	00000000 	nop
  1c:	03e00008 	jr	ra
/home/mips/lx4180/fs/binfmt_flat.c:97
  20:	27bd0018 	addiu	sp,sp,24
Disassembly of section .text.exit:

00000000 <exit_flat_binfmt>:
   0:	27bdffe8 	addiu	sp,sp,-24
   4:	afbf0010 	sw	ra,16(sp)
/home/mips/lx4180/fs/binfmt_flat.c:970
   8:	3c040000 	lui	a0,0x0
			8: R_MIPS_HI16	.data
/home/mips/lx4180/fs/binfmt_flat.c:94
   c:	0c000000 	jal	0 <exit_flat_binfmt>
			c: R_MIPS_26	unregister_binfmt
  10:	24840000 	addiu	a0,a0,0
			10: R_MIPS_LO16	.data
/home/mips/lx4180/fs/binfmt_flat.c:971
  14:	8fbf0010 	lw	ra,16(sp)
  18:	00000000 	nop
  1c:	03e00008 	jr	ra
/home/mips/lx4180/fs/binfmt_flat.c:97
  20:	27bd0018 	addiu	sp,sp,24
Disassembly of section .initcall.init:

00000000 <__initcall_init_flat_binfmt>:
   0:	00000000 	nop
			0: R_MIPS_32	.text.init
Disassembly of section .exitcall.exit:

00000000 <__exitcall_exit_flat_binfmt>:
   0:	00000000 	nop
			0: R_MIPS_32	.text.exit
