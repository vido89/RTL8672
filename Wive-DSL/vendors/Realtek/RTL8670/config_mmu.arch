.EXPORT_ALL_VARIABLES:
############################################################################
#
#  A Generic ARM config.arch that can be included by other platforms
#  to reduce the number of places that need to be edited when something
#  common changes.  If you include this file you should provide:
#
#  CPUFLAGS            - cpu specific flags to pass to the compiler
#  VENDOR_CFLAGS       - vendor specific flags to pass to the compiler
#  DISABLE_XIP         - set this to 1 to disable XIP code
#  DISABLE_MOVE_RODATA - set this to 1 to disable moving rodata to text
#  LOPT                - library optimisation flags
#  UOPT                - user optimisation flags
#
#  David McCullough <davidm@snapgear.com>
#
############################################################################
#
# Generic settings
#

CONSOLE_BAUD_RATE = 115200

############################################################################
#
# The makefiles need to know how to do things in different contexts
# To save some pain we put it all here
#
# First settings we always want for all build
#
# ARCH is for the kernel
# TARGET_ARCH is for uClibc

MACHINE 	      = mips
ARCH		      = mips
CROSS_COMPILE	      = /opt/Wive-DSL/toolchain/bin/mips-linux-
CROSS_KERNEL_COMPILE  = /opt/Wive-DSL/toolchain/rsdk/linux/uclibc/bin/mips-linux-
CROSS_KERNEL_TOOLS    = $(CROSS_KERNEL_COMPILE)

CROSS         = $(CROSS_COMPILE)
CC        = $(CROSS_COMPILE)gcc $(CPUFLAGS)
AS        = $(CROSS_COMPILE)as $(CPUFLAGS)
CXX       = $(CROSS_COMPILE)g++ $(CPUFLAGS)
AR        = $(CROSS_COMPILE)ar
LD        = $(CROSS_COMPILE)ld
OBJCOPY   = $(CROSS_COMPILE)objcopy
RANLIB    = $(CROSS_COMPILE)ranlib
ELF2FLT   = elf2flt
STRIPTOOL = $(CROSS_COMPILE)strip
STRIP     = $(STRIPTOOL)

LIBGCC = $(shell $(CC) $(CPUCFLAGS) -print-libgcc-file-name 2>&1)
GCC_DIR = $(shell echo $(LIBGCC) | sed -e 's/be\///' | sed -e 's/libgcc.a//')
LIBGCC_DIR = $(shell echo $(LIBGCC) | sed -e 's/libgcc.a//')
GXX_DIR = $(shell $(CC) -print-file-name=libstdc++.a 2>&1 | sed -e 's/libstdc++.a//')

############################################################################
#
# General purpose lib building rules,  uClibc.config uses these when
# possible
#

ifdef UCLINUX_BUILD_LIB

  ifdef CONFIG_LIB_DEBUG
	LDFLAGS :=
  else
	CFLAGS  := -Os
	LDFLAGS := -Wl,-S
  endif
	CFLAGS  += $(VENDOR_CFLAGS)
	CFLAGS  += -fno-builtin
	CFLAGS  += -DEMBED

	# don't want all the CFLAGS for uClibc/Config
	ARCH_CFLAGS := $(CFLAGS)
	ARCH_CFLAGS += -I$(ROOTDIR)
	
	CFLAGS  += -nostdinc
	CFLAGS  += -I$(ROOTDIR)/lib/$(CONFIG_LIBCDIR)/include -I$(ROOTDIR)
	CFLAGS  += -mips1  -fPIC -Dlinux -D__linux__ -Dunix	

ifdef CONFIG_DEFAULTS_KERNEL_2_6
	CFLAGS	+= -D_LINUX_2_6_
endif

	# the following is needed for uClinux-2.4
	CFLAGS  += -I$(ROOTDIR)/$(LINUXDIR)/include

	CFLAGS  += -idirafter $(GCC_DIR)/include

	LDLIBS   = -nodefaultlibs

endif

############################################################################
#
# Settings for building user apps
#

ifdef UCLINUX_BUILD_USER

	SLIBC        = -lc
	SLIBM        = -lm
	SLIBNET      = -lnet
	SLIBDES      = -ldes
	SLIBAES      = -laes
	SLIBPCAP     = -lpcap
	SLIBSSL      = -lssl
	SLIBCRYPTO   = -lcrypto
  ifeq ($(LIBCDIR),libc)
	SLIBCRYPT    = -lcrypt_old
  else
	SLIBCRYPT    = -lcrypt
  endif
	SLIBPTHREAD  = -lpthread

	LIBC        = $(SLIBC)
	LIBM        = $(SLIBM)
	LIBNET      = $(SLIBNET)
	LIBDES      = $(SLIBDES)
	LIBAES      = $(SLIBAES)
	LIBPCAP     = $(SLIBPCAP)
	LIBSSL      = $(SLIBSSL)
	LIBCRYPTO   = $(SLIBCRYPTO)
	LIBPTHREAD  = $(SLIBPTHREAD)
	LIBCRYPT    = $(SLIBCRYPT)
	LIBIBERTY   = -liberty
	LIBIO       = -lio
	LIBIOSTREAM = -liostream
	LIBSTDCPP   = -lstdc++

	LDPATH = \
			-L$(ROOTDIR)/lib/$(LIBCDIR)/. \
			-L$(ROOTDIR)/lib/$(LIBCDIR)/lib \
			-L$(ROOTDIR)/lib/libm \
			-L$(ROOTDIR)/lib/libnet \
			-L$(ROOTDIR)/lib/libdes \
			-L$(ROOTDIR)/lib/libaes \
			-L$(ROOTDIR)/lib/libpcap \
			-L$(ROOTDIR)/lib/libcrypt_old \
			-L$(ROOTDIR)/lib/libssl

	INCLIBC = -I$(ROOTDIR)/lib/$(CONFIG_LIBCDIR)/include
	INCLIBM = -I$(ROOTDIR)/lib/libm
	INCNET  = -I$(ROOTDIR)/lib/libnet
	INCDES  = -I$(ROOTDIR)/freeswan/libdes
	INCAES  = -I$(ROOTDIR)/freeswan/libcrypto/libaes
	INCGMP  = -I$(ROOTDIR)/lib/libgmp
	INCPCAP = -I$(ROOTDIR)/lib/libpcap
	INCSSL  = -I$(ROOTDIR)/lib/libssl/include
	INCZ    = -I$(ROOTDIR)/lib/zlib
	INCVEND = -I$(ROOTDIR)/vendors/include
	INCCRYPT = -I$(ROOTDIR)/lib/libcrypt

  ifdef CONFIG_USER_DEBUG
	LDFLAGS :=
  else
	CFLAGS  := -Os
  endif

	#CFLAGS  += $(CPUFLAGS)
	CFLAGS  += $(VENDOR_CFLAGS)
	CFLAGS  += -mips1   -fPIC -Dlinux -D__linux__ -Dunix -DEMBED 	
	#CFLAGS  += -Dlinux -D__linux__ -Dunix -D__uClinux__ -DEMBED -fpic -fPIC\
			-embedded-relocs   -mno-abicalls

ifdef CONFIG_DEFAULTS_KERNEL_2_6
	CFLAGS  += -D_LINUX_2_6_
endif

	CFLAGS  += -nostdinc $(INCLIBC) $(INCCRYPT) $(INCZ)
	CFLAGS  += -I$(ROOTDIR)
	CFLAGS  += -idirafter $(GCC_DIR)/include
	CFLAGS  += -shared-libgcc
	
	#
	# the following is needed for 2.4
	#
	CFLAGS  += -I$(ROOTDIR)/$(LINUXDIR)/include

	CXXFLAGS = $(CFLAGS) $(INCCXX)

  ifeq ($(findstring glibc,$(LIBCDIR)),glibc)
	CRTI    = -nostartfiles $(ROOTDIR)/lib/$(LIBCDIR)/lib/crt1.o \
			$(ROOTDIR)/lib/$(LIBCDIR)/lib/crti.o \
			$(LIBGCC_DIR)/crtbegin.o
	SH_CRTI = -nostartfiles $(ROOTDIR)/lib/$(LIBCDIR)/lib/crti.o \
			$(LIBGCC_DIR)/crtbeginS.o
	CRTN    = $(ROOTDIR)/lib/$(LIBCDIR)/lib/ld-linux.so.2 \
			$(LIBGCC_DIR)/crtend.o \
			$(ROOTDIR)/lib/$(LIBCDIR)/lib/crtn.o \
			$(LIBGCC_DIR)/libgcc.a
	SH_CRTN = $(LIBGCC_DIR)/crtendS.o $(ROOTDIR)/lib/$(LIBCDIR)/lib/crtn.o
  else
  	# This means we are using uClibc
	CRTI    = -nostartfiles $(ROOTDIR)/lib/$(LIBCDIR)/lib/crt0.o
        # Use static linking
	CRTN    = $(LIBGCC_DIR)/libgcc.a
  endif


	SH_LDFLAGS := $(LDFLAGS) $(SH_CRTI) $(LDPATH)
	SH_LDLIBS  := -nodefaultlibs $(LIBC) $(SH_CRTN)
  #ifndef DISABLE_MOVE_RODATA
  #	LDFLAGS += -Wl,-move-rodata
  #endif
	LDFLAGS    += $(CRTI) $(LDPATH)
	#LDLIBS         = $(LIBC)
	LDLIBS     = -nodefaultlibs $(LIBC) $(CRTN)
	#LDLIBS-static  = $(SLIBC)
	#CXXLIBS        = $(LIBSTDCPP) $(LIBIOSTREAM) $(LIBIO) $(LIBIBERTY) \
					 $(LIBC) $(LIBGCC)
	CXXLIBS    = -L$(GXX_DIR) $(LIBSTDCPP) $(LIBIBERTY) $(LIBC)
	
  ifndef FLTFLAGS
	FLTFLAGS :=
  endif
	export FLTFLAGS

	# for anyone still using it
	CONVERT = /bin/true

endif

############################################################################
